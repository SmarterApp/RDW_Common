package org.opentestsystem.rdw.archive;

import org.opentestsystem.rdw.multitenant.archive.ArchiveProperties;
import org.opentestsystem.rdw.multitenant.archive.ArchivePropertiesTenant;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.core.env.PropertyResolver;

/**
 * Spring configuration for archive service. To use do something like:<pre>
 * {@literal @}Import(ArchiveConfiguration.class)
 *  public class Application {
 *      {@literal @}Autowired private ArchiveServiceFactory factory;
 *      {@literal @}Autowired private Environment env;
 *      private ArchiveService archiveService;
 *
 *      void init() {
 *          archiveService = factory.createArchiveService(env, "my-archive");
 *      }
 *  }
 * </pre>
 * With an application.yml that contains something like:<pre>
 * my-archive:
 *   root: s3://MyBucket
 *   cloud:
 *     aws:
 *       region:
 *         auto: false
 *         static: us-west-2
 *       credentials:
 *         accessKey: MyAccessKey
 *         secretKey: MySecretKey
 * </pre>
 * Note that it is the factory that is autowired, not the archive service itself. That is
 * just a necessary evil because of the dynamic nature of property parsing.
 * <p>
 * I don't think any of this precludes or interferes with the use of
 * ContextCredentialsAutoConfiguration.class and ContextResourceLoaderConfiguration.class
 * to get spring auto configured AmazonS3 clients.
 * </p>
 *
 * @see ArchiveServiceFactory
 * @see ArchiveService
 * @see LocalArchiveService
 * @see S3ArchiveService
 * @deprecated This is not a tenant aware solution leaving temporarily for backwards compatibility.
 */
@Configuration
@Deprecated
public class ArchiveConfiguration {

    @Bean
    public ArchiveServiceFactory archiveServiceFactory() {
        return (propertyResolver, prefix) -> {
            //temporary backwards compatible shim
            final ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();

            // use a relaxed property resolver to support Spring-like tolerance for camelCase, kabob-case, etc.
            // (using RelaxedDataBinder with configuration pojo might be less fragile)
            final String pre = prefix == null ? "" : prefix.endsWith(".") ? prefix : (prefix + ".");
            final PropertyResolver resolver = new RelaxedPropertyResolver(propertyResolver, pre);
            final String root = resolver.getRequiredProperty("root");
            archivePropertiesTenant.setUriRoot(root);
            if (archivePropertiesTenant.isConfiguredFile()) {
                return localArchiveService(archivePropertiesTenant);
            }
            if (archivePropertiesTenant.isConfiguredS3()) {
                PropertyResolver credentialsResolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.credentials.");
                archivePropertiesTenant.setS3AccessKey(credentialsResolver.getRequiredProperty("access-key"));
                archivePropertiesTenant.setS3SecretKey(credentialsResolver.getRequiredProperty("secret-key"));

                final PropertyResolver regionResolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.region.");
                archivePropertiesTenant.setS3RegionStatic(regionResolver.getRequiredProperty("static"));

                final String sse = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.").getProperty("sse");
                archivePropertiesTenant.setS3Sse(sse);

                return s3ArchiveService(archivePropertiesTenant);
            }
            throw new IllegalArgumentException("Invalid archive root " + root);
        };
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public S3ArchiveService s3ArchiveService(final ArchiveProperties archiveProperties) {
        return new S3ArchiveService(archiveProperties);
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public LocalArchiveService localArchiveService(final ArchiveProperties archiveProperties) {
        return new LocalArchiveService(archiveProperties);
    }
}
