package org.opentestsystem.rdw.archive;

import org.opentestsystem.rdw.multitenant.TenantConfigurationStatus;
import org.opentestsystem.rdw.multitenant.TenantConfigurationStatusProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class ArchivePropertiesRoot extends AbstractArchiveProperties implements TenantConfigurationStatusProvider {

    private static final Logger logger = LoggerFactory.getLogger(ArchivePropertiesRoot.class);
    private final LocalDateTime created = LocalDateTime.now();

    private String uriRoot;
    private String pathPrefix;
    private String s3AccessKey;
    private String s3SecretKey;
    private String s3RegionStatic;
    private String s3Sse;
    private Map<String, ArchivePropertiesTenant> tenants = new HashMap<>();

    public ArchivePropertiesRoot() {
        logger.debug("created: {} tenants: {} ", created, tenants);
    }

    @Override
    public String getUriRoot() {
        return uriRoot;
    }

    public void setUriRoot(String uriRoot) {
        this.uriRoot = uriRoot;
    }

    @Override
    public String getPathPrefix() {
        return pathPrefix;
    }

    public void setPathPrefix(String pathPrefix) {
        this.pathPrefix = pathPrefix;
    }

    @Override
    public String getS3AccessKey() {
        return s3AccessKey;
    }

    public void setS3AccessKey(String s3AccessKey) {
        this.s3AccessKey = s3AccessKey;
    }

    @Override
    public String getS3SecretKey() {
        return s3SecretKey;
    }

    public void setS3SecretKey(String s3SecretKey) {
        this.s3SecretKey = s3SecretKey;
    }

    @Override
    public String getS3RegionStatic() {
        return s3RegionStatic;
    }

    public void setS3RegionStatic(String s3RegionStatic) {
        this.s3RegionStatic = s3RegionStatic;
    }

    @Override
    public String getS3Sse() {
        return s3Sse;
    }

    public void setS3Sse(String s3Sse) {
        this.s3Sse = s3Sse;
    }

    public Map<String, ArchivePropertiesTenant> getTenants() {
        return tenants;
    }

    public void setTenants(Map<String, ArchivePropertiesTenant> tenants) {
        this.tenants = tenants;
    }

    @Override
    public TenantConfigurationStatus getStatus() {
        return TenantConfigurationStatus.builder()
                .created(created)
                .tenantKeys(new ArrayList<>(tenants.keySet()))
                .build();
    }
}
