package org.opentestsystem.rdw.archive;

import com.fasterxml.jackson.annotation.JsonAlias;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.common.base.Objects;

/**
 * POJO for reading/writing archive properties
 * <p>
 * The JsonAlias annotations make it so it will read properties using rules
 * that mimic Spring's relaxed binding. The JsonInclude annotation is needed
 * because at least one object mapper is configured to include null-only and
 * we need this to always include all elements.
 * </p>
 */
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ArchivePropertiesTenant extends AbstractArchiveProperties {

    private String uriRoot;
    private String pathPrefix;
    private String s3AccessKey;
    private String s3SecretKey;
    private String s3RegionStatic;
    private String s3Sse;

    @Override
    public String getUriRoot() {
        return uriRoot;
    }

    @JsonAlias({"uri-root", "uri_root"})
    public void setUriRoot(String uriRoot) {
        this.uriRoot = uriRoot;
    }

    @Override
    public String getPathPrefix() {
        return pathPrefix;
    }

    @JsonAlias({"path-prefix", "path_prefix"})
    public void setPathPrefix(String pathPrefix) {
        this.pathPrefix = pathPrefix;
    }

    @Override
    public String getS3AccessKey() {
        return s3AccessKey;
    }

    @JsonAlias({"s3-access-key", "s3_access_key"})
    public void setS3AccessKey(String s3AccessKey) {
        this.s3AccessKey = s3AccessKey;
    }

    @Override
    public String getS3SecretKey() {
        return s3SecretKey;
    }

    @JsonAlias({"s3-secret-key", "s3_secret_key"})
    public void setS3SecretKey(String s3SecretKey) {
        this.s3SecretKey = s3SecretKey;
    }

    @Override
    public String getS3RegionStatic() {
        return s3RegionStatic;
    }

    @JsonAlias({"s3-region-static", "s3_region_static"})
    public void setS3RegionStatic(String s3RegionStatic) {
        this.s3RegionStatic = s3RegionStatic;
    }

    @Override
    public String getS3Sse() {
        return s3Sse;
    }

    @JsonAlias({"s3-sse", "s3_sse"})
    public void setS3Sse(String s3Sse) {
        this.s3Sse = s3Sse;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ArchivePropertiesTenant)) return false;
        ArchivePropertiesTenant that = (ArchivePropertiesTenant) o;
        return Objects.equal(uriRoot, that.uriRoot) &&
                Objects.equal(pathPrefix, that.pathPrefix) &&
                Objects.equal(s3AccessKey, that.s3AccessKey) &&
                Objects.equal(s3SecretKey, that.s3SecretKey) &&
                Objects.equal(s3RegionStatic, that.s3RegionStatic) &&
                Objects.equal(s3Sse, that.s3Sse);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(uriRoot, pathPrefix, s3AccessKey, s3SecretKey, s3RegionStatic, s3Sse);
    }
}
