package org.opentestsystem.rdw.archive;

import java.io.InputStream;
import java.util.Properties;

/**
 * Decorator to swap between {@link LocalArchiveService} and {@link S3ArchiveService} based
 * upon the supplied {@link ArchiveProperties}
 */
public class ArchiveServiceDecorator implements ArchiveService {

    final ArchiveProperties archiveServiceProperties;
    final ArchiveService archiveService;

    public ArchiveServiceDecorator(ArchiveProperties archiveServiceProperties) {
        this.archiveServiceProperties = archiveServiceProperties;
        if (archiveServiceProperties.isConfiguredFile()) {
            archiveService = new LocalArchiveService(archiveServiceProperties);
        } else if (archiveServiceProperties.isConfiguredS3()) {
            archiveService = new S3ArchiveService(archiveServiceProperties);
        } else {
            throw new IllegalArgumentException("No valid archive service configuration.");
        }
    }

    @Override
    public String getRawUri(String location) {
        return archiveService.getRawUri(location);
    }

    @Override
    public void writeResource(String location, byte[] content, Properties properties) {
        archiveService.writeResource(location, content, properties);
    }

    @Override
    public void writeResource(String location, InputStream is, Properties properties) {
        archiveService.writeResource(location, is, properties);
    }

    @Override
    public byte[] readResource(String location) {
        return archiveService.readResource(location);
    }

    @Override
    public InputStream openResource(String location) {
        return archiveService.openResource(location);
    }

    @Override
    public Properties readProperties(String location) {
        return archiveService.readProperties(location);
    }

    @Override
    public void writeProperties(String location, Properties properties) {
        archiveService.writeProperties(location, properties);
    }

    @Override
    public void delete(String location) {
        archiveService.delete(location);
    }

    @Override
    public boolean exists(String location) {
        return archiveService.exists(location);
    }
}
