package org.opentestsystem.rdw.archive;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;

import java.io.InputStream;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Provides per-tenant archive services.  Routes calls to underlying instance per tenant.
 */
public class ArchiveServiceTenantDynamicRouter implements ArchiveService {

    private final ConcurrentHashMap<String, ArchiveService> tenantArchiveServices = new ConcurrentHashMap<>();
    private final ArchivePropertiesResolver archivePropertiesResolver;
    private final TenantKeyResolver tenantKeyResolver;

    public ArchiveServiceTenantDynamicRouter(ArchivePropertiesResolver archivePropertiesResolver,
                                             TenantKeyResolver tenantKeyResolver) {
        this.archivePropertiesResolver = archivePropertiesResolver;
        this.tenantKeyResolver = tenantKeyResolver;
    }

    /**
     * Create ArchiveService for a tenant
     *
     * @param key unused present only to conform to computeIfAbsent MappingFunction
     * @return Archive Service for a particular tenant.
     */
    @VisibleForTesting
    protected ArchiveService archiveServiceFactory(String key) {
        return new ArchiveServiceDecorator(archivePropertiesResolver);
    }

    private ArchiveService getArchiveService() {
        final Optional<String> tenantKey = this.tenantKeyResolver.getTenantKey();
        if (!tenantKey.isPresent()) {
            throw new IllegalStateException("No tenant key set");
        }
        return tenantArchiveServices.computeIfAbsent(tenantKey.get(), this::archiveServiceFactory);
    }

    @Override
    public String getRawUri(String location) {
        return getArchiveService().getRawUri(location);
    }

    @Override
    public List<String> listResources(String path) {
        return getArchiveService().listResources(path);
    }

    @Override
    public void writeResource(String location, byte[] content, Properties properties) {
        getArchiveService().writeResource(location, content, properties);
    }

    @Override
    public void writeResource(String location, InputStream is, Properties properties) {
        getArchiveService().writeResource(location, is, properties);
    }

    @Override
    public byte[] readResource(String location) {
        return getArchiveService().readResource(location);
    }

    @Override
    public InputStream openResource(String location) {
        return getArchiveService().openResource(location);
    }

    @Override
    public Properties readProperties(String location) {
        return getArchiveService().readProperties(location);
    }

    @Override
    public void writeProperties(String location, Properties properties) {
        getArchiveService().writeProperties(location, properties);
    }

    @Override
    public void delete(String location) {
        getArchiveService().delete(location);
    }

    @Override
    public boolean exists(String location) {
        return getArchiveService().exists(location);
    }

}
