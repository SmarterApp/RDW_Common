package org.opentestsystem.rdw.archive;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.Headers;
import com.amazonaws.services.s3.model.ObjectMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StreamUtils;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Properties;

/**
 * An {@link ArchiveService} implementation that uses Amazon S3.
 *
 * @see ArchiveConfiguration
 */
public class S3ArchiveService implements ArchiveService, InitializingBean {
    private static final Logger logger = LoggerFactory.getLogger(S3ArchiveService.class);
    private static final String S3SchemePrefix = "s3://";

    private final String bucket;
    private AmazonS3 amazonS3;

    /**
     * @param root root path, must start with "s3://", e.g. "s3://myBucket"
     */
    S3ArchiveService(final String root) {
        if (!validRoot(root)) {
            throw new IllegalArgumentException("Invalid S3 root " + root);
        }
        // just in case there is an errant trailing slash ...
        String path = root.substring(S3SchemePrefix.length());
        bucket = path.endsWith("/") ? path.substring(0, path.length()-1) : path;
    }

    @Autowired
    void setAmazonS3(final AmazonS3 amazonS3) {
        this.amazonS3 = amazonS3;
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        if (!amazonS3.doesBucketExist(bucket)) {
            throw new IllegalArgumentException("Invalid S3 bucket " + bucket);
        }
    }

    @Override
    public void writeResource(final String location, final byte[] content, final Properties properties) {
        writeResource(location, new ByteArrayInputStream(content), properties);
    }

    @Override
    public void writeResource(final String location, final InputStream is, final Properties properties) {
        final ObjectMetadata metadata = new ObjectMetadata();
        if (properties != null) {
            for (final Map.Entry<Object, Object> entry : properties.entrySet()) {
                final String key = (String) entry.getKey();
                final String value = entry.getValue().toString();
                metadata.addUserMetadata(key, value);

                // extract S3-specific properties into appropriate metadata
                if (Headers.CONTENT_TYPE.equalsIgnoreCase(key)) {
                    metadata.setContentType((String) entry.getValue());
                }
            }
        }

        // TODO - calculate and provide md5 base64 digest for transmission verification

        try {
            amazonS3.putObject(bucket, location, is, metadata);
        } catch (final AmazonServiceException e) {
            final String msg = "Error writing content to " + bucket + location;
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }
    }

    @Override
    public byte[] readResource(final String location) {
        try (final InputStream is = new BufferedInputStream(amazonS3.getObject(bucket, location).getObjectContent())) {
            return StreamUtils.copyToByteArray(is);
        } catch (final AmazonServiceException e) {
            if (e.getStatusCode() == 404 || e.getStatusCode() == 301) {
                return null;
            }
            final String msg = "Amazon error reading content from " + bucket + location;
            logger.warn(msg, e);
            throw e;
        } catch (final IOException e) {
            final String msg = "Error reading content from " + bucket + location;
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }
    }

    @Override
    public Properties readProperties(final String location) {
        final Properties properties = new Properties();

        final ObjectMetadata metadata = amazonS3.getObjectMetadata(bucket, location);
        for (final Map.Entry<String, String> entry : metadata.getUserMetadata().entrySet()) {
            properties.setProperty(entry.getKey(), entry.getValue());
        }

        return properties;
    }

    static boolean validRoot(final String root) {
        return root != null && root.toLowerCase().startsWith(S3SchemePrefix);
    }
}
