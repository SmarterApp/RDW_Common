package org.opentestsystem.rdw.archive;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {TestConfiguration.class})
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class ArchivePropertiesResolverIT {

    @Autowired
    ArchivePropertiesRoot archivePropertiesRoot;

    @Autowired
    ArchivePropertiesResolver archivePropertiesResolver;

    @Test
    public void archivePropertiesRootShouldLoad() {
        assertThat(archivePropertiesRoot.getUriRoot())
                .isNull();
        assertThat(archivePropertiesRoot.getS3AccessKey())
                .isNull();
        assertThat(archivePropertiesRoot.getS3SecretKey())
                .isNull();
        assertThat(archivePropertiesRoot.getS3RegionStatic())
                .isEqualTo("us-west-2");
        assertThat(archivePropertiesRoot.getS3Sse())
                .isNull();
    }

    @Test
    public void testResolverCa() {
        TenantContextHolder.setTenantId("CA");
        assertThat(archivePropertiesResolver.getUriRoot())
                .isEqualTo("s3://ca-archive");
        assertThat(archivePropertiesResolver.getPathPrefix())
                .isEqualTo("ca");
        assertThat(archivePropertiesResolver.getS3AccessKey())
                .isEqualTo("testaccesskey");
        assertThat(archivePropertiesResolver.getS3SecretKey())
                .isEqualTo("testkey");
        assertThat(archivePropertiesResolver.getS3RegionStatic())
                .isEqualTo("us-west-2");
        assertThat(archivePropertiesResolver.getS3Sse())
                .isEqualTo("test");
        assertThat(archivePropertiesResolver.isConfiguredS3())
                .isEqualTo(true);
        assertThat(archivePropertiesResolver.isConfiguredFile())
                .isEqualTo(false);
        TenantContextHolder.clear();
    }

    @Test
    public void testResolverNv() {
        TenantContextHolder.setTenantId("NV");
        assertThat(archivePropertiesResolver.getUriRoot())
                .isEqualTo("file://tmp");
        assertThat(archivePropertiesResolver.getPathPrefix())
                .isEqualTo("nv");
        assertThat(archivePropertiesResolver.isConfiguredS3())
                .isEqualTo(false);
        assertThat(archivePropertiesResolver.isConfiguredFile())
                .isEqualTo(true);
        TenantContextHolder.clear();
    }

}
