package org.opentestsystem.rdw.archive;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.HashMap;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {TestConfiguration.class})
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv", "tenant"})
@EnableConfigurationProperties
public class ArchiveServiceTenantDynamicRouterIT {

    @Autowired
    private ArchiveServiceTenantDynamicRouter archiveServiceTenantDynamicRouter;

    private static HashMap<String, ArchiveService> mockStore = new HashMap<>();

    @Configuration
    public static class Config {
        @Bean
        ArchiveServiceTenantDynamicRouter archiveServiceTenanDynamicRouter(ArchivePropertiesResolver archivePropertiesResolver,
                                                                           TenantKeyResolver tenantKeyResolver) {
            return new TestArchiveServiceTenantDynamicRouter(archivePropertiesResolver, tenantKeyResolver);
        }
    }

    /**
     * Test seam so can observe archiveServiceFactory
     */
    static class TestArchiveServiceTenantDynamicRouter extends ArchiveServiceTenantDynamicRouter {

        TestArchiveServiceTenantDynamicRouter(ArchivePropertiesResolver archivePropertiesResolver, TenantKeyResolver tenantKeyResolver) {
            super(archivePropertiesResolver, tenantKeyResolver);
        }

        @Override
        protected ArchiveService archiveServiceFactory(String key) {
            final ArchiveService archiveService = mock(ArchiveService.class);
            mockStore.put(key, archiveService);
            return archiveService;
        }
    }

    @Test
    public void routerShouldCreateServicesPerTenant() {

        //CA->CA interaction
        TenantContextHolder.setTenantId("CA");

        archiveServiceTenantDynamicRouter.delete("test");
        assertThat(mockStore.get("CA")).isNotNull();

        TenantContextHolder.clear();

        //NV->NVX interaction
        TenantContextHolder.setTenantId("NV");

        archiveServiceTenantDynamicRouter.delete("test");
        assertThat(mockStore.get("NVX")).isNotNull();

        TenantContextHolder.clear();

        // verify
        verify(mockStore.get("CA")).delete("test");
        verify(mockStore.get("NVX")).delete("test");
    }

}
