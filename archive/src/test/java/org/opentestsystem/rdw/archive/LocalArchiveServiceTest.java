package org.opentestsystem.rdw.archive;

import com.amazonaws.services.s3.Headers;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import static com.amazonaws.util.IOUtils.toByteArray;
import static org.assertj.core.api.Assertions.assertThat;

public class LocalArchiveServiceTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();
    private LocalArchiveService service;

    @Before
    public void createService() {
        service = new LocalArchiveService("file://" + temporaryFolder.getRoot().getAbsolutePath());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAFileScheme() {
        new LocalArchiveService("/tmp");
    }

    @Test
    public void itShouldWriteAndReadContent() {
        final byte[] content = "TestyMcTestFace".getBytes();
        service.writeResource("test", content, null);
        assertThat(service.readResource("test")).isEqualTo(content);
    }

    @Test
    public void itShouldWriteAndReadContentInLocation() throws IOException {
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");
        properties.put("Content-Length", 123L);


        final byte[] content = "TestyMcTestFace".getBytes();
        service.writeResource("f1/f2/test", content, properties);
        assertThat(service.readResource("f1/f2/test")).isEqualTo(content);

        final Properties readProperties = service.readProperties("f1/f2/test");
        assertThat(readProperties).hasSize(4);
        assertThat(readProperties.get("Content-Length")).isEqualTo(15L);
        assertThat(readProperties.getProperty("Content-Type")).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");
        assertThat(readProperties.getProperty(ArchiveService.RawURI))
                .isEqualTo("file://" + temporaryFolder.getRoot().getCanonicalPath() + "/f1/f2/test");
    }

    @Test
    public void itShouldWriteAndReadContentInLocationUsingStreams() throws Exception {
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");

        final byte[] srcContent = "TestyMcTestFace".getBytes("UTF-8");

        try (final InputStream writeStream = new ByteArrayInputStream(srcContent)) {
            service.writeResource("f1/f2/test", writeStream, properties);

            try (final InputStream readStream =  service.openResource("f1/f2/test")) {
                final byte[] readContent = toByteArray(readStream);
                assertThat(readContent).isEqualTo(srcContent);
            }
        }

        final Properties readProperties = service.readProperties("f1/f2/test");
        assertThat(readProperties).hasSize(4);
        assertThat(readProperties.get("Content-Length")).isEqualTo(15L);
        assertThat(readProperties.getProperty("Content-Type")).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");
        assertThat(readProperties.getProperty(ArchiveService.RawURI))
                .isEqualTo("file://" + temporaryFolder.getRoot().getCanonicalPath() + "/f1/f2/test");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAnUnknownLocation() {
        service.readResource("f1/f2/test");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAPartialLocation() {
        final byte[] content = "TestyMcTestFace".getBytes();
        service.writeResource("f1/f2/test", content, null);
        assertThat(service.readResource("f1/f2/test")).isEqualTo(content);
        service.readResource("f1/f2");
    }

    @Test
    public void itShouldDelete() {
        service.writeResource("f1/f2/test1", "test1".getBytes(), null);
        service.writeResource("f1/f2/test2", "test2".getBytes(), null);
        service.writeResource("f1/f2/test3", "test3".getBytes(), null);

        service.delete("f1/f2/test1");
        assertThat(service.exists("f1/f2/test1")).isFalse();
        assertThat(service.exists("f1/f2/test2")).isTrue();
        assertThat(service.exists("f1/f2/test3")).isTrue();

        service.delete("f1/f2");
        assertThat(service.exists("f1/f2/test2")).isFalse();
        assertThat(service.exists("f1/f2/test3")).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToDeleteUnknownLocation() {
        service.delete("f1/f2");
    }

    @Test
    public void itShouldReadPropertiesWhenPropertiesFileDoesNotExit() {
        final byte[] content = "test1".getBytes();

        service.writeResource("testNoProps.csv",  content, null);

        Properties properties = service.readProperties("testNoProps.csv");

        assertThat(properties.get(Headers.CONTENT_LENGTH)).isEqualTo(5L);
        assertThat(properties.get(Headers.CONTENT_TYPE)).isEqualTo("text/plain");
    }
}