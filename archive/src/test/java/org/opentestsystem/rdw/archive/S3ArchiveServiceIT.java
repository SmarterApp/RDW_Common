package org.opentestsystem.rdw.archive;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.aws.autoconfigure.context.ContextCredentialsAutoConfiguration;
import org.springframework.cloud.aws.context.config.annotation.ContextResourceLoaderConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.util.StreamUtils.copyToByteArray;

@RunWith(SpringRunner.class)
@TestPropertySource(properties = {
        "archive.root=s3://rdw-dev-archive/",   // a test bucket with open permissions
        "cloud.aws.credentials.accessKey: YourAccessKey",
        "cloud.aws.credentials.secretKey: YourSecretKey",
        "cloud.aws.region.auto: false",
        "cloud.aws.region.static: us-west-2"
})
@Import(value = {
        ContextCredentialsAutoConfiguration.class,  // needed to get credentials from properties
        ContextResourceLoaderConfiguration.class,   // needed to get AmazonS3 client
        ArchiveConfiguration.class
})
@Ignore("need credentials")
public class S3ArchiveServiceIT {

    @Autowired
    private S3ArchiveService service;

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAS3Scheme() {
        new S3ArchiveService("/tmp");
    }

    @Test
    public void itShouldWriteAndReadContent() throws UnsupportedEncodingException {
        final byte[] content = "TestyMcTestFace".getBytes("UTF-8");
        service.writeResource("TEST/test", content, null);
        assertThat(service.exists("TEST/test")).isTrue();
        assertThat(service.readResource("TEST/test")).isEqualTo(content);
        final Properties readProperties = service.readProperties("TEST/test");
        assertThat(readProperties).hasSize(2);
        assertThat(readProperties.get("Content-Length")).isEqualTo(15L);
        assertThat(readProperties.getProperty("Content-Type")).isEqualTo("application/octet-stream");

        // cleanup
        service.delete("TEST");
    }

    @Test
    public void itShouldWriteAndReadContentInLocation() throws UnsupportedEncodingException {
        final byte[] content = "TestyMcTestFace".getBytes("UTF-8");
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");

        service.writeResource("TEST/f1/f2/test", content, properties);
        assertThat(service.readResource("TEST/f1/f2/test")).isEqualTo(content);

        final Properties readProperties = service.readProperties("TEST/f1/f2/test");
        assertThat(readProperties).hasSize(3);
        assertThat(readProperties.get("Content-Length")).isEqualTo(15L);
        assertThat(readProperties.getProperty("Content-Type")).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");

        // cleanup
        service.delete("TEST");
    }

    @Test
    public void itShouldWriteAndReadContentUsingStreams() throws Exception {
        final byte[] srcContent = "TestyMcTestFace".getBytes("UTF-8");

        try (final InputStream writeStream = new ByteArrayInputStream(srcContent)) {
            service.writeResource("TEST/f1/f2/test", writeStream, null);

            try (final InputStream readStream =  service.openResource("TEST/f1/f2/test")) {
                final byte[] readContent = copyToByteArray(readStream);
                assertThat(readContent).isEqualTo(srcContent);
            }
        }

        // cleanup
        service.delete("TEST");
    }

    @Test
    public void itShouldReturnExists() throws UnsupportedEncodingException {
        service.writeResource("TEST/f1/f2/testExists", "TestExists".getBytes("UTF-8"), null);
        assertThat(service.exists("TEST/f1/f2/testExists")).isTrue();
        assertThat(service.exists("TEST/f1/f2/test123")).isFalse();
        assertThat(service.exists("TEST/f1/f2")).isFalse();
        assertThat(service.exists("TEST/f1/")).isFalse();
        assertThat(service.exists("TEST/")).isFalse();

        // cleanup
        service.delete("TEST");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAnUnknownLocation() {
        service.readResource("TEST/f1/f2/test123");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToReadAPartialLocation() throws UnsupportedEncodingException {
        final byte[] content = "TestyMcTestFace".getBytes("UTF-8");
        service.writeResource("TEST/f1/f2/test", content, null);
        assertThat(service.readResource("TEST/f1/f2/test")).isEqualTo(content);
        service.readResource("TEST/f1/f2");

        // cleanup
        service.delete("TEST");
    }

    @Test
    public void itShouldDelete() throws UnsupportedEncodingException {
        service.writeResource("TEST/f1/f2/test1", "test1".getBytes("UTF-8"), null);
        service.writeResource("TEST/f1/f2/test2", "test2".getBytes("UTF-8"), null);
        service.writeResource("TEST/f1/f2/test3", "test3".getBytes("UTF-8"), null);

        service.delete("TEST/f1/f2/test1");
        assertThat(service.exists("TEST/f1/f2/test1")).isFalse();
        assertThat(service.exists("TEST/f1/f2/test2")).isTrue();
        assertThat(service.exists("TEST/f1/f2/test3")).isTrue();

        service.delete("TEST/f1/f2");
        assertThat(service.exists("TEST/f1/f2/test2")).isFalse();
        assertThat(service.exists("TEST/f1/f2/test3")).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToDeleteUnknownLocation() {
        service.delete("TEST/f1/f2");
    }
}