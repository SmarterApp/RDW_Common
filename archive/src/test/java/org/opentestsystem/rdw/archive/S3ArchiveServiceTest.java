package org.opentestsystem.rdw.archive;

import com.amazonaws.services.s3.AmazonS3;
import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class S3ArchiveServiceTest {

    private S3ArchiveService archiveService;
    private AmazonS3 amazonS3;
    private final String bucket = "bucket";
    private final String archiveRoot = "s3://" + bucket;

    @Before
    public void createArchiveService() {
        amazonS3 = mock(AmazonS3.class);
        when(amazonS3.doesBucketExist(bucket)).thenReturn(true);

        archiveService = new S3ArchiveService(amazonS3, archiveRoot);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAS3Scheme() {
        new S3ArchiveService(amazonS3, "/tmp");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAnExistingBucket() {
        when(amazonS3.doesBucketExist(bucket)).thenReturn(false);
        new S3ArchiveService(amazonS3, archiveRoot);
    }

    @Test
    public void itShouldUseClientForExists() {
        final String location = "TEST/f1/f2/test";
        when(amazonS3.doesObjectExist(bucket, location)).thenReturn(false).thenReturn(true);
        assertThat(archiveService.exists(location)).isFalse();
        assertThat(archiveService.exists(location)).isTrue();
    }
}
