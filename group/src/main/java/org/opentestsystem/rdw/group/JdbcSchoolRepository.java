package org.opentestsystem.rdw.group;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

@Repository("warehouseJdbcSchoolRepository")
class JdbcSchoolRepository implements SchoolRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.common.school.findAll}")
    private String findAllQuery;

    @Autowired
    JdbcSchoolRepository(@Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Set<String> findAllNaturalIds(@NotNull final PermissionScope permissionScope) {
        final MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("statewide", permissionScope.isStatewide());
        params.addValue("district_group_ids", nullOrEmptyToUnmatchable(permissionScope.getDistrictGroupIds()));
        params.addValue("district_ids", nullOrEmptyToUnmatchable(permissionScope.getDistrictIds()));
        params.addValue("school_group_ids", nullOrEmptyToUnmatchable(permissionScope.getInstitutionGroupIds()));
        params.addValue("school_ids", nullOrEmptyToUnmatchable(permissionScope.getInstitutionIds()));

        return newHashSet(template.queryForList(findAllQuery, params, String.class));
    }

    private static List<Long> UnmatchableIds = ImmutableList.of(-1L);
    private static Collection<Long> nullOrEmptyToUnmatchable(final Collection<Long> values) {
        return (values == null || values.isEmpty()) ? UnmatchableIds : values;
    }
}
