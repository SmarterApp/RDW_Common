package org.opentestsystem.rdw.group;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.security.PermissionScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@Import({JdbcSchoolRepository.class})
@GroupRepositoryIT
@Sql(scripts = "classpath:organization-test-data.sql")
public class JdbcSchoolRepositoryTest {

    @Autowired
    private SchoolRepository repository;

    @Test
    public void itShouldFindNoSchoolsForEmptyPermissions() {
        final Set<String> schoolIds = repository.findAllNaturalIds(PermissionScope.EMPTY);
        assertThat(schoolIds).isEmpty();
    }

    @Test
    public void itShouldFindAllSchoolsForStatewide() {
        final Set<String> schoolIds = repository.findAllNaturalIds(PermissionScope.STATEWIDE);
        assertThat(schoolIds).containsExactlyInAnyOrder("schoolNat1", "schoolNat2", "schoolNat3", "schoolNat4");
    }

    @Test
    public void itShouldFindSchoolsForPermissionScope() {
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictGroupId(-10L).build()))
                .containsExactlyInAnyOrder("schoolNat1", "schoolNat2");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictGroupId(-20L).build()))
                .containsExactlyInAnyOrder("schoolNat3");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictGroupId(-90L).build())).isEmpty();

        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictId(-10L).build()))
                .containsExactlyInAnyOrder("schoolNat1", "schoolNat2");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictId(-20L).build()))
                .containsExactlyInAnyOrder("schoolNat3");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictId(-30L).build()))
                .containsExactlyInAnyOrder("schoolNat4");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addDistrictId(-90L).build())).isEmpty();

        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addSchoolGroupId(-10L).build()))
                .containsExactlyInAnyOrder("schoolNat1");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addSchoolGroupId(-90L).build())).isEmpty();

        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addSchoolId(-101L).addSchoolId(-301).build()))
                .containsExactlyInAnyOrder("schoolNat1", "schoolNat4");
        assertThat(repository.findAllNaturalIds(PermissionScope.builder().addSchoolId(-90L).build())).isEmpty();
    }

}
