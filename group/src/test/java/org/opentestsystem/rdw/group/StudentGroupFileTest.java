package org.opentestsystem.rdw.group;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.security.PermissionScope.STATEWIDE;

/**
 * Test CsvValidationService against some test files.
 */
@RunWith(MockitoJUnitRunner.class)
public class StudentGroupFileTest {

    @Mock
    private SchoolRepository schoolRepository;
    @Mock
    private SchoolYearRepository schoolYearRepository;
    @Mock
    private SubjectRepository subjectRepository;

    private DefaultCsvValidationService service;

    @Before
    public void setup() {
        when(schoolYearRepository.findAll()).thenReturn(newArrayList(2016, 2017, 2018));
        when(subjectRepository.findAllCodes()).thenReturn(newHashSet("Math", "ELA"));

        service = new DefaultCsvValidationService(schoolRepository, schoolYearRepository, subjectRepository);
    }

    @Test
    public void itShouldSetNewlineToCR() {
        final Map<String,String> metadata = newHashMap();
        service.validate(this.getClass().getResourceAsStream("/test.cr.csv"), STATEWIDE, metadata);
        assertThat(metadata.get("delimiter")).isEqualTo(",");
        assertThat(metadata.get("newline")).isEqualTo("\\r");
    }

    @Test
    public void itShouldSetNewlineToLF() {
        final Map<String,String> metadata = newHashMap();
        service.validate(this.getClass().getResourceAsStream("/test.lf.csv"), STATEWIDE, metadata);
        assertThat(metadata.get("delimiter")).isEqualTo(",");
        assertThat(metadata.get("newline")).isEqualTo("\\n");
    }

    @Test
    public void itShouldSetNewlineToCRLF() {
        final Map<String,String> metadata = newHashMap();
        service.validate(this.getClass().getResourceAsStream("/test.crlf.csv"), STATEWIDE, metadata);
        assertThat(metadata.get("delimiter")).isEqualTo(",");
        assertThat(metadata.get("newline")).isEqualTo("\\r\\n");
    }

    @Test
    public void delimiterIsHardcoded() {
        final Map<String,String> metadata = newHashMap();
        service.validate(this.getClass().getResourceAsStream("/test.crlf.tsv"), STATEWIDE, metadata);
        assertThat(metadata.get("delimiter")).isEqualTo(",");
        assertThat(metadata.get("newline")).isEqualTo("\\r\\n");
    }

    @Test
    public void mespi() {
        assertThat(validateFile("/kenastondone7.csv", "19647336108641")).isTrue();
        assertThat(validateFile("/kenastondone7.csv", "1964733610")).isFalse();
    }

    private boolean validateFile(final String resource, final String... schoolIds) {
        when(schoolRepository.findAllNaturalIds(STATEWIDE)).thenReturn(ImmutableSet.copyOf(schoolIds));
        final Map<String,String> metadata = newHashMap();
        return service.validate(this.getClass().getResourceAsStream(resource), STATEWIDE, metadata)
                .stream().allMatch(CsvValidationResult::isOk);
    }
}
