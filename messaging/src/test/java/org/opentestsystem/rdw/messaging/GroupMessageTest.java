package org.opentestsystem.rdw.messaging;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class GroupMessageTest {

    @Test
    public void itShouldRetainBuilderValues() {
        final GroupMessage groupMessage = GroupMessage.builder()
                .digest("ABCDEF")
                .uploadId(1L)
                .build();
        assertThat(groupMessage.getDigest()).isEqualTo("ABCDEF");
        assertThat(groupMessage.getUploadId()).isEqualTo(1L);
    }

    @Test
    public void itShouldCopyValues() {
        final GroupMessage src = GroupMessage.builder()
                .digest("ABCDEF")
                .uploadId(1L)
                .build();
        assertThat(src.copy().build().getDigest()).isEqualTo("ABCDEF");
        assertThat(src.copy().build().getUploadId()).isEqualTo(1L);
    }

    @Test
    public void equalsShouldCheckDigestAndUploadId() {
        final GroupMessage one = GroupMessage.builder()
                .digest("ABCDEF")
                .uploadId(1L)
                .build();
        final GroupMessage one_ish = GroupMessage.builder()
                .digest("ABCDEG")
                .uploadId(1L)
                .build();
        final GroupMessage two = GroupMessage.builder()
                .digest("ABCDEF")
                .uploadId(2L)
                .build();

        assertThat(one.equals(one_ish)).isFalse();
        assertThat(one.equals(two)).isFalse();
        assertThat(one.equals(one.copy().build())).isTrue();

        assertThat(one.hashCode()).isNotEqualTo(one_ish.hashCode());
        assertThat(one.hashCode()).isNotEqualTo(two.hashCode());
        assertThat(one.hashCode()).isEqualTo(one.copy().build().hashCode());
    }

    @Test
    public void itShouldConvertToJson() {
        final GroupMessage groupMessage = GroupMessage.builder()
                .digest("ABCDEF")
                .uploadId(1L)
                .build();
        assertThat(groupMessage.toJson()).isEqualTo("{\"digest\":\"ABCDEF\",\"uploadId\":1}");
    }
}
