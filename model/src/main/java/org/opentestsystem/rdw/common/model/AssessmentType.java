package org.opentestsystem.rdw.common.model;

/**
 * Represents an assessment type.
 * <p>
 * The enum has additional information that needs to be shared amongst RDW applications.
 * The 'id' corresponds to the database id (don't change the ids arbitrarily!).
 * </p>
 */
public enum AssessmentType {
    ICA(1, "ica"),
    IAB(2, "iab"),
    SUMMATIVE(3, "sum");

    private final int id;
    private final String code;

    AssessmentType(final int id, final String code) {
        this.id = id;
        this.code = code;
    }

    /**
     * Returns the enum constant of this type with the specified id.
     *
     * @param id id to look up
     * @return enum constant with the specified id
     * @throws IllegalArgumentException if id doesn't match any enum constant
     */
    public static AssessmentType valueOf(final int id) {
        for (final AssessmentType type : values()) {
            if (type.id() == id) {
                return type;
            }
        }
        throw new IllegalArgumentException("Unknown AssessmentType id: " + id);
    }

    /**
     * Returns the enum constant of this type with the specified code.
     *
     * @param code code to look up
     * @return enum constant with the specified id
     * @throws IllegalArgumentException if id doesn't match any enum constant
     */
    public static AssessmentType fromCode(final String code) {
        for (final AssessmentType type : values()) {
            if (type.code().equals(code)) {
                return type;
            }
        }
        throw new IllegalArgumentException("Unknown AssessmentType code: " + code);
    }

    /**
     * This is the assessment type id.
     * This value corresponds to the assessment type entity ID in the database
     *
     * @return the assessment type id
     */
    public int id() {
        return id;
    }

    /**
     * This is the assessment type code.
     * This value corresponds to the assessment type code in the database
     *
     * @return the assessment type code
     */
    public String code() {
        return code;
    }
}
