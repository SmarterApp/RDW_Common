package org.opentestsystem.rdw.common.model;

import java.util.StringJoiner;

/**
 * Strategy for creating archive locations.
 * This lives here because it uses ImportContent.
 */
public interface LocationStrategy {
    /**
     * @param id id of resource, typically a digest or filename
     * @return location for id
     */
    String location(String id);


    /**
     * The simplest location strategy uses the id as the full path/filename.
     */
    class SimpleLocationStrategy implements LocationStrategy {
        @Override
        public String location(final String id) {
            return id;
        }
    }

    /**
     * A simple location partitioning scheme based on the first few characters of the file name
     */
    class PartitioningLocationStrategy implements LocationStrategy {
        private final String prefix;

        public PartitioningLocationStrategy(final String prefix) {
            this.prefix = prefix;
        }

        @Override
        public String location(final String id) {
            final StringJoiner joiner = new StringJoiner("/");
            joiner.add(prefix);
            joiner.add(id.substring(0,2));
            joiner.add(id.substring(2,4));
            joiner.add(id);
            return joiner.toString();
        }
    }

    /**
     * For import content the id is a hex digest so it can be used to partition the files.
     */
    class ImportContentLocationStrategy extends PartitioningLocationStrategy {
        public ImportContentLocationStrategy(final ImportContent content) {
            super(content.name());
        }
    }

    /**
     * For group upload content, the location strategy is similar to import content
     */
    class GroupUploadContentLocationStrategy extends ImportContentLocationStrategy {
        public GroupUploadContentLocationStrategy() {
            super(ImportContent.GROUPS);
        }
    }
}
