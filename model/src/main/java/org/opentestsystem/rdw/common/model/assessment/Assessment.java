package org.opentestsystem.rdw.common.model.assessment;

import org.opentestsystem.rdw.common.model.AssessmentType;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.apache.commons.lang3.StringUtils.isEmpty;

/**
 * An assessment model for serializing from content
 */
public class Assessment {
    private String id;
    private String name;
    private String label;
    private String subject;
    private AssessmentType type;
    private String grade;
    private int schoolYear;
    private String version;
    private Scoring overallScoring;
    private List<Scoring> altScorings;
    private List<Item> items;

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getGrade() {
        return grade;
    }

    public String getLabel() {
        return label;
    }

    public AssessmentType getType() {
        return type;
    }

    public String getSubject() {
        return subject;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public String getVersion() {
        return version;
    }

    public Scoring getOverallScoring() {
        return overallScoring;
    }

    /**
     * @return ordered list of alt scoring; may be null!
     */
    public List<Scoring> getAltScorings() {
        return altScorings;
    }

    /**
     * @return list of items, may be empty won't be null
     */
    public List<Item> getItems() {
        return items;
    }

    static ValidatingBuilder builder() {
        return new ValidatingBuilder();
    }

    /**
     * A validating Builder for the {@link Assessment}. Unlike its plain ol'
     * cousin, this builder will complain if a value is changed: it allows
     * values to be set but subsequent attempts to set a value will throw if
     * the value is different. It allows the calling code to be simplified.
     */
    public static class ValidatingBuilder {
        private String id;
        private String name;
        private String label;
        private String subject;
        private AssessmentType type;
        private String grade;
        private Integer schoolYear;
        private String version;
        private Scoring overallScoring;
        private List<Scoring> altScorings;
        private List<Item> items = newArrayList();

        /**
         * Builds an {@link Assessment} object
         *
         * @return the assembled object
         * @throws NullPointerException if there was a problem processing any of the required data elements
         */
        public Assessment build() {
            validate();

            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.name = name;
            assessment.label = label;
            assessment.subject = subject;
            assessment.type = type;
            assessment.grade = grade;
            assessment.schoolYear = schoolYear;
            assessment.version = version;
            assessment.overallScoring = overallScoring;
            assessment.altScorings = altScorings;
            assessment.items = items;
            return assessment;
        }

        public ValidatingBuilder id(final String id) {
            this.id = check("id", this.id, id);
            return this;
        }

        public ValidatingBuilder name(final String name) {
            this.name = check("name", this.name, name);
            return this;
        }

        public ValidatingBuilder label(final String label) {
            this.label = check("label", this.label, label);
            return this;
        }

        public ValidatingBuilder subject(final String subject) {
            this.subject = check("subject", this.subject, subject);
            return this;
        }

        public ValidatingBuilder type(final AssessmentType type) {
            this.type = check("type", this.type, type);
            return this;
        }

        public ValidatingBuilder grade(final String grade) {
            this.grade = check("grade", this.grade, grade);
            return this;
        }

        public ValidatingBuilder schoolYear(final Integer schoolYear) {
            this.schoolYear = check("school year", this.schoolYear, schoolYear);
            return this;
        }

        public ValidatingBuilder version(final String version) {
            this.version = check("version", this.version, version);
            return this;
        }

        public ValidatingBuilder item(final Item item) {
            // as a convenience, silently ignore null items
            if (item != null) {
                for (final Item existing : this.items) {
                    if (existing.getFullKey().equals(item.getFullKey())) {
                        throw new IllegalArgumentException("Duplicate item found for " + item.getFullKey());
                    }
                }
                this.items.add(item);
            }
            return this;
        }

        public ValidatingBuilder overallScoring(final Scoring overallScoring) {
            this.overallScoring = overallScoring;
            return this;
        }

        public ValidatingBuilder altScorings(final List<Scoring> altScorings) {
            this.altScorings = altScorings;
            return this;
        }

        private <T> T check(final String field, final T current, final T value) {
            if (current == null || current.equals(value)) return value;
            throw new IllegalArgumentException("Mismatched " + field);
        }

        void validate() {
            if (isEmpty(id)) {
                throw new IllegalArgumentException("Id must be set");
            }
            if (isEmpty(name)) {
                throw new IllegalArgumentException("Name must be set");
            }
            if (isEmpty(label)) {
                throw new IllegalArgumentException("Label must be set");
            }
            if (isEmpty(subject)) {
                throw new IllegalArgumentException("Subject must be set");
            }
            if (type == null) {
                throw new IllegalArgumentException("Type must be set");
            }
            if (isEmpty(grade)) {
                throw new IllegalArgumentException("Grade must be set");
            }
            if (schoolYear == null) {
                throw new IllegalArgumentException("SchoolYear must be set");
            }
            if (overallScoring == null || overallScoring.getLevelCount() == 0) {
                throw new IllegalArgumentException("OverallScoring must be set");
            }
        }
    }
}

