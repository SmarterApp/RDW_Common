package org.opentestsystem.rdw.common.model.assessment;

import static org.apache.commons.lang3.StringUtils.isBlank;

/**
 * Assessment item details
 */
public class Item {
    private String fullKey;
    private String bankKey;
    private String itemId;
    private String filename;
    private String version;
    private String type;
    private String grade;
    private String standard;
    private String claim;
    private String target;
    private String commonCore;
    private String secondaryCommonCore;
    private String claimContentTarget;
    private String secondaryClaimContentTarget;
    private String passage;
    private Boolean asl;
    private String braille;
    private String brailleLanguage;
    private Integer dok;
    private String language;
    private Boolean allowCalculator;
    private Boolean mathPractice;
    private Integer maxPoints;
    private String glossary;
    private String scoringEngine;
    private Boolean spanish;
    private Boolean fieldTest;
    private Boolean active;
    private Boolean responseRequired;
    private Boolean adminRequired;
    private Integer position;
    private String measurementModel;
    private Integer weight;
    private Integer scorePoints;
    private String answerKey;
    private Integer numberOfAnswerOptions;
    private Boolean performanceTask;
    private String ptWritingType;

    private Double a;
    private Double b0_b;
    private Double b1_c;
    private Double b2;
    private Double b3;
    private Double avg_b;

    private String bpref1;
    private String bpref2;
    private String bpref3;
    private String bpref4;
    private String bpref5;
    private String bpref6;
    private String bpref7;

    /**
     * @return full item key, e.g. "200-11443"
     */
    public String getFullKey() {
        return fullKey;
    }

    /**
     * @return bank key, e.g. "200"
     */
    public String getBankKey() {
        return bankKey;
    }

    /**
     * @return item id, e.g. "11443"
     */
    public String getItemId() {
        return itemId;
    }

    /**
     * @return item filename, e.g "item-200-58197.xml"
     */
    public String getFilename() {
        return filename;
    }

    /**
     * @return item version, e.g. "9832"
     */
    public String getVersion() {
        return version;
    }

    /**
     * @return item type, e.g. "SA", "MC"
     */
    public String getType() {
        return type;
    }

    /**
     * @return item grade (as string), e.g. "4", "11"
     */
    public String getGrade() {
        return grade;
    }

    /**
     * @return SB item standard, e.g. "SBAC-ELA-v1:2-W|1-11"
     */
    public String getStandard() {
        return standard;
    }

    /**
     * @return item claim, e.g. "2-W"
     */
    public String getClaim() {
        return claim;
    }

    /**
     * @return item target, e.g. "1-11"
     */
    public String getTarget() {
        return target;
    }

    /**
     * @return common core, e.g "5.RI.10"
     */
    public String getCommonCore() {
        return commonCore;
    }

    /**
     * @return secondary common core, e.g. "5.RI.10;8.L.5b;8.L.5b"
     */
    public String getSecondaryCommonCore() {
        return secondaryCommonCore;
    }

    /**
     * @return claim content target, e.g. "2-W	|1-11"
     */
    public String getClaimContentTarget() {
        return claimContentTarget;
    }

    /**
     * @return secondardy claim content target, e.g. "2-W	|1-11	;2-W |3-11;2-W |3-11"
     */
    public String getSecondaryClaimContentTarget() {
        return secondaryClaimContentTarget;
    }

    /**
     * @return passage, e.g. "200-502"
     */
    public String getPassage() {
        return passage;
    }

    /**
     * @return ASL flag
     */
    public Boolean getAsl() {
        return asl;
    }

    /**
     * @return braille, e.g. "BRF"
     */
    public String getBraille() {
        return braille;
    }

    /**
     * @return braille language, e.g. "ENU-Braille"
     */
    public String getBrailleLanguage() {
        return brailleLanguage;
    }

    /**
     * @return Depth Of Knowledge, typically 1-4, may be null
     */
    public Integer getDok() {
        return dok;
    }

    /**
     * @return item language, e.g. "ENU"
     */
    public String getLanguage() {
        return language;
    }

    /**
     * @return calculator allowed flag, may be null
     */
    public Boolean getAllowCalculator() {
        return allowCalculator;
    }

    /**
     * @return math practice item indicator, may be null
     */
    public Boolean getMathPractice() {
        return mathPractice;
    }

    /**
     * @return max points for item, typically 1-2, may be null
     */
    public Integer getMaxPoints() {
        return maxPoints;
    }

    public String getGlossary() {
        return glossary;
    }

    /**
     * @return scoring engine, e.g. "HandScored"
     */
    public String getScoringEngine() {
        return scoringEngine;
    }

    public Boolean getSpanish() {
        return spanish;
    }

    public Boolean getFieldTest() {
        return fieldTest;
    }

    public Boolean getActive() {
        return active;
    }

    public Boolean getResponseRequired() {
        return responseRequired;
    }

    public Boolean getAdminRequired() {
        return adminRequired;
    }

    /**
     * @return item position in assessment
     */
    public Integer getPosition() {
        return position;
    }

    /**
     * @return measurement model, e.g. "IRTGPC"
     */
    public String getMeasurementModel() {
        return measurementModel;
    }

    public Integer getWeight() {
        return weight;
    }

    public Integer getScorePoints() {
        return scorePoints;
    }

    /**
     * @return answer key, e.g. "B;D"
     */
    public String getAnswerKey() {
        return answerKey;
    }

    public Integer getNumberOfAnswerOptions() {
        return numberOfAnswerOptions;
    }

    public Boolean getPerformanceTask() {
        return performanceTask;
    }

    /**
     * @return performance task writing type, e.g. "Opinion"
     */
    public String getPtWritingType() {
        return ptWritingType;
    }

    public Double getA() {
        return a;
    }

    public Double getB0_b() {
        return b0_b;
    }

    public Double getB1_c() {
        return b1_c;
    }

    public Double getB2() {
        return b2;
    }

    public Double getB3() {
        return b3;
    }

    public Double getAvg_b() {
        return avg_b;
    }

    public String getBpref1() {
        return bpref1;
    }

    public String getBpref2() {
        return bpref2;
    }

    public String getBpref3() {
        return bpref3;
    }

    public String getBpref4() {
        return bpref4;
    }

    public String getBpref5() {
        return bpref5;
    }

    public String getBpref6() {
        return bpref6;
    }

    public String getBpref7() {
        return bpref7;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder class for the Item object
     */
    public static class Builder {
        private String fullKey;
        private String bankKey;
        private String itemId;
        private String filename;
        private String version;
        private String type;
        private String grade;
        private String standard;
        private String claim;
        private String target;
        private String commonCore;
        private String secondaryCommonCore;
        private String claimContentTarget;
        private String secondaryClaimContentTarget;
        private String passage;
        private Boolean asl;
        private String braille;
        private String brailleLanguage;
        private Integer dok;
        private String language;
        private Boolean allowCalculator;
        private Boolean mathPractice;
        private Integer maxPoints;
        private String glossary;
        private String scoringEngine;
        private Boolean spanish;
        private Boolean fieldTest;
        private Boolean active;
        private Boolean responseRequired;
        private Boolean adminRequired;
        private Integer position;
        private String measurementModel;
        private Integer weight;
        private Integer scorePoints;
        private String answerKey;
        private Integer numberOfAnswerOptions;
        private Boolean performanceTask;
        private String ptWritingType;

        private Double a;
        private Double b0_b;
        private Double b1_c;
        private Double b2;
        private Double b3;
        private Double avg_b;

        private String bpref1;
        private String bpref2;
        private String bpref3;
        private String bpref4;
        private String bpref5;
        private String bpref6;
        private String bpref7;

        public Item build() {
            validate();

            final Item item = new Item();

            item.fullKey = fullKey;
            item.bankKey = bankKey;
            item.itemId = itemId;
            item.filename = filename;
            item.version = version;
            item.type = type;
            item.grade = grade;
            item.standard = standard;
            item.claim = claim;
            item.target = target;
            item.claimContentTarget = claimContentTarget;
            item.secondaryClaimContentTarget = secondaryClaimContentTarget;
            item.commonCore = commonCore;
            item.secondaryCommonCore = secondaryCommonCore;
            item.passage = passage;
            item.asl = asl;
            item.braille = braille;
            item.brailleLanguage = brailleLanguage;
            item.dok = dok;
            item.language = language;
            item.allowCalculator = allowCalculator;
            item.mathPractice = mathPractice;
            item.maxPoints = maxPoints;
            item.glossary = glossary;
            item.scoringEngine = scoringEngine;
            item.spanish = spanish;
            item.fieldTest = fieldTest;
            item.active = active;
            item.responseRequired = responseRequired;
            item.adminRequired = adminRequired;
            item.position = position;
            item.measurementModel = measurementModel;
            item.weight = weight;
            item.scorePoints = scorePoints;
            item.answerKey = answerKey;
            item.numberOfAnswerOptions = numberOfAnswerOptions;
            item.performanceTask = performanceTask;
            item.ptWritingType = ptWritingType;
            item.a = a;
            item.b0_b = b0_b;
            item.b1_c = b1_c;
            item.b2 = b2;
            item.b3 = b3;
            item.avg_b = avg_b;
            item.bpref1 = bpref1;
            item.bpref2 = bpref2;
            item.bpref3 = bpref3;
            item.bpref4 = bpref4;
            item.bpref5 = bpref5;
            item.bpref6 = bpref6;
            item.bpref7 = bpref7;

            return item;
        }

        public Builder fullKey(final String fullKey) {
            this.fullKey = fullKey;
            return this;
        }

        public Builder bankKey(final String bankKey) {
            this.bankKey = bankKey;
            return this;
        }

        public Builder itemId(final String itemId) {
            this.itemId = itemId;
            return this;
        }

        public Builder filename(final String filename) {
            this.filename = filename;
            return this;
        }

        public Builder version(final String version) {
            this.version = version;
            return this;
        }

        public Builder type(final String type) {
            this.type = type;
            return this;
        }

        public Builder grade(final String grade) {
            this.grade = grade;
            return this;
        }

        public Builder standard(final String standard) {
            this.standard = standard;
            return this;
        }

        public Builder claim(final String claim) {
            this.claim = claim;
            return this;
        }

        public Builder target(final String target) {
            this.target = target;
            return this;
        }

        public Builder claimContentTarget(final String claimContentTarget) {
            this.claimContentTarget = claimContentTarget;
            return this;
        }

        public Builder secondaryClaimContentTarget(final String secondaryClaimContentTarget) {
            this.secondaryClaimContentTarget = secondaryClaimContentTarget;
            return this;
        }

        public Builder commonCore(final String commonCore) {
            this.commonCore = commonCore;
            return this;
        }

        public Builder secondaryCommonCore(final String secondaryCommonCore) {
            this.secondaryCommonCore = secondaryCommonCore;
            return this;
        }

        public Builder passage(final String passage) {
            this.passage = passage;
            return this;
        }

        public Builder asl(final Boolean asl) {
            this.asl = asl;
            return this;
        }

        public Builder braille(final String braille) {
            this.braille = braille;
            return this;
        }

        public Builder brailleLanguage(final String brailleLanguage) {
            this.brailleLanguage = brailleLanguage;
            return this;
        }

        public Builder dok(final Integer dok) {
            this.dok = dok;
            return this;
        }

        public Builder language(final String language) {
            this.language = language;
            return this;
        }

        public Builder allowCalculator(final Boolean allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder mathPractice(final Boolean mathPractice) {
            this.mathPractice = mathPractice;
            return this;
        }

        public Builder maxPoints(final Integer maxPoints) {
            this.maxPoints = maxPoints;
            return this;
        }

        public Builder glossary(final String glossary) {
            this.glossary = glossary;
            return this;
        }

        public Builder scoringEngine(final String scoringEngine) {
            this.scoringEngine = scoringEngine;
            return this;
        }

        public Builder spanish(final Boolean spanish) {
            this.spanish = spanish;
            return this;
        }

        public Builder fieldTest(final Boolean fieldTest) {
            this.fieldTest = fieldTest;
            return this;
        }

        public Builder active(final Boolean active) {
            this.active = active;
            return this;
        }

        public Builder responseRequired(final Boolean responseRequired) {
            this.responseRequired = responseRequired;
            return this;
        }

        public Builder adminRequired(final Boolean adminRequired) {
            this.adminRequired = adminRequired;
            return this;
        }

        public Builder position(final Integer position) {
            this.position = position;
            return this;
        }

        public Builder measurementModel(final String measurementModel) {
            this.measurementModel = measurementModel;
            return this;
        }

        public Builder weight(final Integer weight) {
            this.weight = weight;
            return this;
        }

        public Builder scorePoints(final Integer scorePoints) {
            this.scorePoints = scorePoints;
            return this;
        }

        public Builder answerKey(final String answerKey) {
            this.answerKey = answerKey;
            return this;
        }

        public Builder numberOfAnswerOptions(final Integer numberOfAnswerOptions) {
            this.numberOfAnswerOptions = numberOfAnswerOptions;
            return this;
        }

        public Builder performanceTask(final Boolean performanceTask) {
            this.performanceTask = performanceTask;
            return this;
        }

        public Builder ptWritingType(final String ptWritingType) {
            this.ptWritingType = ptWritingType;
            return this;
        }

        public Builder a(final Double a) {
            this.a = a;
            return this;
        }

        public Builder b0_b(final Double b0_b) {
            this.b0_b = b0_b;
            return this;
        }

        public Builder b1_c(final Double b1_c) {
            this.b1_c = b1_c;
            return this;
        }

        public Builder b2(final Double b2) {
            this.b2 = b2;
            return this;
        }

        public Builder b3(final Double b3) {
            this.b3 = b3;
            return this;
        }

        public Builder avg_b(final Double avg_b) {
            this.avg_b = avg_b;
            return this;
        }

        public Builder bpref1(final String bpref1) {
            this.bpref1 = bpref1;
            return this;
        }

        public Builder bpref2(final String bpref2) {
            this.bpref2 = bpref2;
            return this;
        }

        public Builder bpref3(final String bpref3) {
            this.bpref3 = bpref3;
            return this;
        }

        public Builder bpref4(final String bpref4) {
            this.bpref4 = bpref4;
            return this;
        }

        public Builder bpref5(final String bpref5) {
            this.bpref5 = bpref5;
            return this;
        }

        public Builder bpref6(final String bpref6) {
            this.bpref6 = bpref6;
            return this;
        }

        public Builder bpref7(final String bpref7) {
            this.bpref7 = bpref7;
            return this;
        }

        private void validate() {
            if (isBlank(fullKey)) {
                throw new IllegalArgumentException("FullKey must be set");
            }
        }
    }
}
