package org.opentestsystem.rdw.common.model.assessment;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Scoring details for assessment overall and alt-scoring.
 */
public class Scoring {

    public static class LevelRange {
        private double low;
        private double high;

        /**
         * @return score range low value
         */
        public double getLow() {
            return low;
        }

        /**
         * @return score range high value
         */
        public double getHigh() {
            return high;
        }

        LevelRange(final double low, final double high) {
            if (low > high) {
                throw new IllegalArgumentException("LevelRange low is greater than high");
            }
            this.low = low;
            this.high = high;
        }

        @Override
        public String toString() {
            return "(" + low + "-" + high + ")";
        }
    }

    private List<LevelRange> levelRanges;

    /**
     * @return ordered list of level score ranges, may be empty won't be null
     */
    public List<LevelRange> getLevelRanges() {
        return levelRanges;
    }

    /**
     * @return number of level ranges
     */
    public int getLevelCount() {
        return levelRanges.size();
    }

    /**
     * @return min score, i.e. low value of first range
     */
    public Double getMinScore() {
        return levelRanges.get(0).getLow();
    }

    /**
     * @return max score, i.e. high value of last range
     */
    public Double getMaxScore() {
        return levelRanges.get(levelRanges.size()-1).getHigh();
    }


    public static Builder builder() {
        return new Builder();
    }

    /**
     * The Builder for the {@link Scoring}
     */
    public static class Builder {
        final List<LevelRange> levelRanges = newArrayList();

        /**
         * Builds an {@link Scoring} object
         *
         * @return the assembled object
         */
        public Scoring build() {
            validate();

            final Scoring scoring = new Scoring();
            scoring.levelRanges = levelRanges;
            return scoring;
        }

        public Builder levelRange(final double low, final double high) {
            levelRanges.add(new LevelRange(low, high));
            return this;
        }

        public boolean isEmpty() {
            return levelRanges.isEmpty();
        }

        private void validate() {
            if (levelRanges.isEmpty()) {
                throw new IllegalArgumentException("Scoring must have at least one level");
            }
            for (int l = 1; l < levelRanges.size(); ++l) {
                if (levelRanges.get(l-1).high > levelRanges.get(l).low) {
                    throw new IllegalArgumentException("Levels must be increasing and non-overlapping " +
                            levelRanges.get(l-1).toString() + ", " + levelRanges.get(l).toString());
                }
            }
        }
    }
}
