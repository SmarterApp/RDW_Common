package org.opentestsystem.rdw.common.model.subject;

/**
 * This class represents Claim and AltScore details for the parent Subject.
 */
public abstract class Scorable extends NamedCodedEntity {
    private Integer dataOrder;
    private Integer displayOrder;
    private String icon = "fa-pencil-square-o";
    private String description;

    /**
     * @return The in-depth display text for the alt/claim score
     */
    public String getDescription() {
        return description;
    }

    /**
     * The data order of this scorable alt/claim.
     * May be null for non-scorable claims.
     * During parsing, scorable alt/claims are ordered based on this attribute and
     * the order in the XML file. If a data order is specified that doesn't
     * "fit" with the sequence, an error will result.
     *
     * @return the scorable alt/claim data order
     */
    public Integer getDataOrder() {
        return dataOrder;
    }

    /**
     * This hook is to allow post-processing.
     *
     * @param dataOrder data order value
     */
    void setDataOrder(final Integer dataOrder) {
        this.dataOrder = dataOrder;
    }

    /**
     * The display order of this scorable alt/claim.
     * May be null for non-scorable claims.
     *
     * @return the scorable alt/claim display order
     */
    public Integer getDisplayOrder() {
        return displayOrder;
    }

    /**
     * The display icon name displayed with a scorable alt/claim.
     * May be null for non-scorable claims.
     * NOTE: All free Font Awesome icons are supported and
     * <a href="https://fontawesome.com/icons?d=gallery&m=free">can be found here.</a>
     *
     * @return The icon name for this alt/claim
     */
    public String getIcon() {
        return icon;
    }

    public static abstract class Builder<B extends Builder, S extends Scorable>
            extends NamedCodedEntity.Builder<B, S> {
        private String description;
        private Integer dataOrder;
        private Integer displayOrder;
        private String icon;

        @Override
        public S build() {
            final S container = super.build();
            final Scorable scorable = container;
            scorable.description = description;
            scorable.dataOrder = dataOrder;
            scorable.displayOrder = displayOrder;
            scorable.icon = icon;
            return container;
        }

        @Override
        public B copy(final S container) {
            super.copy(container);
            this.description = container.getDescription();
            this.dataOrder = container.getDataOrder();
            this.displayOrder = container.getDisplayOrder();
            this.icon = container.getIcon();
            return (B) this;
        }

        public B description(final String description) {
            this.description = description;
            return (B) this;
        }

        public B dataOrder(final Integer dataOrder) {
            this.dataOrder = dataOrder;
            return (B) this;
        }

        public B displayOrder(final Integer displayOrder) {
            this.displayOrder = displayOrder;
            return (B) this;
        }

        public B icon(final String icon) {
            this.icon = icon;
            return (B) this;
        }
    }
}
