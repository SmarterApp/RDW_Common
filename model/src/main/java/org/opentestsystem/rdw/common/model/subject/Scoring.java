package org.opentestsystem.rdw.common.model.subject;

import org.opentestsystem.rdw.common.model.ScoreType;

/**
 * This class contains overall, alt or claim scoring definitions.
 */
public abstract class Scoring {
    private String name;
    private Double minScore;
    private Double maxScore;
    private PerformanceLevels performanceLevels;

    public abstract ScoreType getScoreType();

    /**
     * @return The name for the scoring, e.g. "Claim"
     */
    public String getName() {
        return name;
    }

    /**
     * @return The minimum score value, may be null
     */
    public Double getMinScore() {
        return minScore;
    }

    /**
     * @return The maximum score value, may be null
     */
    public Double getMaxScore() {
        return maxScore;
    }

    /**
     * @return The performance levels for the scoring
     */
    public PerformanceLevels getPerformanceLevels() {
        return performanceLevels;
    }

    public static abstract class Builder<B extends Builder, S extends Scoring> {
        private String name;
        private Double minScore;
        private Double maxScore;
        private PerformanceLevels performanceLevels;

        public S build() {
            final S container = createInstance();
            final Scoring scoring = container;
            scoring.name = name;
            scoring.minScore = minScore;
            scoring.maxScore = maxScore;
            scoring.performanceLevels = performanceLevels;
            return container;
        }

        protected abstract S createInstance();

        public B name(final String name) {
            this.name = name;
            return (B) this;
        }

        public B minScore(final Double minScore) {
            this.minScore = minScore;
            return (B) this;
        }

        public B maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return (B) this;
        }

        public B performanceLevels(final PerformanceLevels performanceLevels) {
            this.performanceLevels = performanceLevels;
            return (B) this;
        }
    }
}
