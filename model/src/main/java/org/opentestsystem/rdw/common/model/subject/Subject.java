package org.opentestsystem.rdw.common.model.subject;

import java.util.List;

/**
 * This class represents the root element of a Subject definition model.
 */
public class Subject extends NamedCodedEntity {

    private List<SubjectMessage> subjectMessages;
    private List<SubjectAssessmentType> assessmentTypes;
    private List<DepthOfKnowledge> depthsOfKnowledge;
    private List<ItemDifficulty> itemDifficulties;
    private List<ReportGrade> reportGrades;
    private List<AltScore> altScores;
    private List<Claim> claims;
    private List<Standard> standards;

    /**
     * @return The key-value display message pairs for this subject.
     */
    public List<SubjectMessage> getSubjectMessages() {
        return subjectMessages;
    }

    /**
     * @return The definition of this subject within the context of the three assessment types
     */
    public List<SubjectAssessmentType> getAssessmentTypes() {
        return assessmentTypes;
    }

    /**
     * @return The depths of knowledge referenced by assessment items for this subject
     */
    public List<DepthOfKnowledge> getDepthsOfKnowledge() {
        return depthsOfKnowledge;
    }

    /**
     * @return The item difficulty cutpoints for assessment items for this subject
     */
    public List<ItemDifficulty> getItemDifficulties() {
        return itemDifficulties;
    }

    /**
     * @return The report display messages for this subject's reports
     */
    public List<ReportGrade> getReportGrades() {
        return reportGrades;
    }

    /**
     * @return the alt score details for this subject
     */
    public List<AltScore> getAltScores() {
        return altScores;
    }

    /**
     * @return The scorable and organizational claims for this subject
     */
    public List<Claim> getClaims() {
        return claims;
    }

    /**
     * @return The standards referenced by assessment items for this subject
     */
    public List<Standard> getStandards() {
        return standards;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends NamedCodedEntity.Builder<Builder, Subject> {
        private List<SubjectMessage> subjectMessages;
        private List<SubjectAssessmentType> assessmentTypes;
        private List<ReportGrade> reportGrades;
        private List<Standard> standards;
        private List<AltScore> altScores;
        private List<Claim> claims;
        private List<DepthOfKnowledge> depthsOfKnowledge;
        private List<ItemDifficulty> itemDifficulties;

        @Override
        protected Subject createInstance() {
            return new Subject();
        }

        @Override
        public Subject build() {
            final Subject subject = super.build();
            subject.subjectMessages = subjectMessages;
            subject.assessmentTypes = assessmentTypes;
            subject.reportGrades = reportGrades;
            subject.standards = standards;
            subject.altScores = altScores;
            subject.claims = claims;
            subject.depthsOfKnowledge = depthsOfKnowledge;
            subject.itemDifficulties = itemDifficulties;
            return subject;
        }

        public Builder subjectMessages(final List<SubjectMessage> subjectMessages) {
            this.subjectMessages = subjectMessages;
            return this;
        }

        public Builder assessmentTypes(final List<SubjectAssessmentType> assessmentTypes) {
            this.assessmentTypes = assessmentTypes;
            return this;
        }

        public Builder reportGrades(final List<ReportGrade> reportGrades) {
            this.reportGrades = reportGrades;
            return this;
        }

        public Builder altScores(final List<AltScore> altScores) {
            this.altScores = altScores;
            return this;
        }

        public Builder claims(final List<Claim> claims) {
            this.claims = claims;
            return this;
        }

        public Builder standards(final List<Standard> standards) {
            this.standards = standards;
            return this;
        }

        public Builder depthsOfKnowledge(final List<DepthOfKnowledge> depthsOfKnowledge) {
            this.depthsOfKnowledge = depthsOfKnowledge;
            return this;
        }

        public Builder itemDifficulties(final List<ItemDifficulty> itemDifficulties) {
            this.itemDifficulties = itemDifficulties;
            return this;
        }
    }
}
