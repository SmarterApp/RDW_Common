package org.opentestsystem.rdw.common.model.subject;

/**
 * This class represents subject trait codes.<br/>
 * <p>
 * A trait code is used to identify additional trait scores for an exam.
 * The other trait attributes (purpose, category) are used for grouping score
 * values in reports. The other attribute values don't have to match the code
 * text but usually do. Traits are assumed to be raw scores for a subset of
 * the overall assessment -- the scores must be integer values.<br/>
 *
 * Note: unlike other CodedEntity's, the trait code is used ONLY to match
 * data from the subject definition file. It is not (and should not be)
 * used elsewhere in the system.
 * </p>
 * <p>
 * ELA has traits for five purposes, each with three categories.
 * SOCK_ARGU_ORG is the code that identifies the score for organization (ORG)
 * of the answer to the question with purpose argument (ARGU). Typically, a 
 * test result has one or more trait scores for a single purpose. In this 
 * example, a test result may have three ARGU scores, SOCK_ARGU_ORG, 
 * SOCK_ARGU_CON, SOCK_ARGU_EVI.
 * </p>
 * Note: this may be confusing because exam items are hardcoded to have three
 * trait scores. This is legacy behavior specific to SmarterBalanced subjects.
 * Although the traits logically refer to similar things, this Trait class 
 * deals with only the exam-level scores.
 */
public class Trait extends CodedEntity {
    private String purpose;
    private String category;
    private int maxScore;

    /**
     * @return the trait purpose, e.g. ARGU
     */
    public String getPurpose() {
        return purpose;
    }

    /**
     * @return the trait category, e.g. ORG
     */
    public String getCategory() {
        return category;
    }

    /**
     * @return the max score for this trait, e.g. 4
     */
    public int getMaxScore() {
        return maxScore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends CodedEntity.Builder<Builder, Trait> {
        private String purpose;
        private String category;
        private int maxScore;

        @Override
        protected Trait createInstance() {
            return new Trait();
        }

        public Trait build() {
            final Trait trait = super.build();
            trait.purpose = purpose;
            trait.category = category;
            trait.maxScore = maxScore;
            return trait;
        }

        public Builder purpose(final String purpose) {
            this.purpose = purpose;
            return this;
        }

        public Builder category(final String category) {
            this.category = category;
            return this;
        }

        public Builder maxScore(final int maxScore) {
            this.maxScore = maxScore;
            return this;
        }
    }
}
