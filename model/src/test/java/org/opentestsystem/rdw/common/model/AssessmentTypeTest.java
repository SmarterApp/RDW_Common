package org.opentestsystem.rdw.common.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class AssessmentTypeTest {

    @Test
    public void itShouldHaveAnId() {
        assertThat(AssessmentType.ICA.id()).isEqualTo(1);
        assertThat(AssessmentType.IAB.id()).isEqualTo(2);
        assertThat(AssessmentType.SUMMATIVE.id()).isEqualTo(3);
    }

    @Test
    public void itShouldConvertFromValue() {
        assertThat(AssessmentType.valueOf(1)).isEqualTo(AssessmentType.ICA);
        assertThat(AssessmentType.valueOf(2)).isEqualTo(AssessmentType.IAB);
        assertThat(AssessmentType.valueOf(3)).isEqualTo(AssessmentType.SUMMATIVE);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownValue() {
        AssessmentType.valueOf(17);
    }

    @Test
    public void itShouldConvertFromString() {
        assertThat(AssessmentType.valueOf("ICA")).isEqualTo(AssessmentType.ICA);
        assertThat(AssessmentType.valueOf("IAB")).isEqualTo(AssessmentType.IAB);
        assertThat(AssessmentType.valueOf("SUMMATIVE")).isEqualTo(AssessmentType.SUMMATIVE);
    }

    @Test(expected = IllegalArgumentException.class)
    public void stringValueIsCaseSensitive() {
        AssessmentType.valueOf("iab");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownStringValue() {
        AssessmentType.valueOf("fubar");
    }

    @Test
    public void itShouldConvertFromCode() {
        assertThat(AssessmentType.fromCode("ica")).isEqualTo(AssessmentType.ICA);
        assertThat(AssessmentType.fromCode("iab")).isEqualTo(AssessmentType.IAB);
        assertThat(AssessmentType.fromCode("sum")).isEqualTo(AssessmentType.SUMMATIVE);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownCode() {
        AssessmentType.fromCode("notvalid");
    }

    @Test(expected = IllegalArgumentException.class)
    public void fromCodeIsCaseSensitive() {
        AssessmentType.fromCode("ICA");
    }
}
