package org.opentestsystem.rdw.common.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class ScoreTypeTest {

    @Test
    public void itShouldHaveAnId() {
        assertThat(ScoreType.OVERALL.id()).isEqualTo(1);
        assertThat(ScoreType.ALT.id()).isEqualTo(2);
        assertThat(ScoreType.CLAIM.id()).isEqualTo(3);
    }

    @Test
    public void itShouldConvertFromValue() {
        assertThat(ScoreType.valueOf(1)).isEqualTo(ScoreType.OVERALL);
        assertThat(ScoreType.valueOf(2)).isEqualTo(ScoreType.ALT);
        assertThat(ScoreType.valueOf(3)).isEqualTo(ScoreType.CLAIM);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownValue() {
        ScoreType.valueOf(17);
    }

    @Test
    public void itShouldConvertFromString() {
        assertThat(ScoreType.valueOf("OVERALL")).isEqualTo(ScoreType.OVERALL);
        assertThat(ScoreType.valueOf("ALT")).isEqualTo(ScoreType.ALT);
        assertThat(ScoreType.valueOf("CLAIM")).isEqualTo(ScoreType.CLAIM);
    }

    @Test(expected = IllegalArgumentException.class)
    public void stringValueIsCaseSensitive() {
        ScoreType.valueOf("alt");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownStringValue() {
        ScoreType.valueOf("fubar");
    }

    @Test
    public void itShouldConvertFromCode() {
        assertThat(ScoreType.fromCode("Overall")).isEqualTo(ScoreType.OVERALL);
        assertThat(ScoreType.fromCode("Alt")).isEqualTo(ScoreType.ALT);
        assertThat(ScoreType.fromCode("Claim")).isEqualTo(ScoreType.CLAIM);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotConvertFromUnknownCode() {
        ScoreType.fromCode("notvalid");
    }

    @Test(expected = IllegalArgumentException.class)
    public void fromCodeIsCaseSensitive() {
        ScoreType.fromCode("OVERALL");
    }
}
