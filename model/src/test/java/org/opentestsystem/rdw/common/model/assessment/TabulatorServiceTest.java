package org.opentestsystem.rdw.common.model.assessment;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.AssessmentType;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;

@RunWith(MockitoJUnitRunner.class)
public class TabulatorServiceTest {

    private TabulatorService service;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void createService() {
        service = new TabulatorService();
    }

    @Test
    public void itShouldParseAnAssessment() {
        final List<Assessment> assessments = parseResource("/Cutpoints.test1.csv");
        assertThat(assessments).hasSize(1);
        final Assessment assessment = assessments.get(0);
        assertThat(assessment.getId()).isEqualTo("(SBAC)SBAC-ICA-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017");
        assertThat(assessment.getName()).isEqualTo("SBAC-ICA-FIXED-G11E-BriefWrites-ELA-11");
        assertThat(assessment.getSubject()).isEqualTo("ELA");
        assertThat(assessment.getGrade()).isEqualTo("11");
        assertThat(assessment.getType()).isEqualTo(AssessmentType.ICA);
        assertThat(assessment.getLabel()).isEqualTo("ELA ICA G11 BriefWrites");
        assertThat(assessment.getVersion()).isEqualTo("9832");

        final Scoring scoring = assessment.getOverallScoring();
        assertThat(scoring.getLevelCount()).isEqualTo(1);
        assertThat(scoring.getMinScore()).isEqualTo(2300);
        assertThat(scoring.getMaxScore()).isEqualTo(2490);
        assertThat(scoring.getLevelRanges().get(0).getLow()).isEqualTo(2300);
        assertThat(scoring.getLevelRanges().get(0).getHigh()).isEqualTo(2490);

        assertThat(assessment.getAltScorings()).isNull();

        assertThat(assessment.getItems()).hasSize(1);
        final Item item = assessment.getItems().get(0);
        assertThat(item.getFullKey()).isEqualTo("200-58197");
        assertThat(item.getBankKey()).isEqualTo("200");
        assertThat(item.getItemId()).isEqualTo("58197");
        assertThat(item.getFilename()).isEqualTo("item-200-58197.xml");
        assertThat(item.getVersion()).isEqualTo("9832");
        assertThat(item.getType()).isEqualTo("SA");
        assertThat(item.getGrade()).isEqualTo("11");
        assertThat(item.getStandard()).isEqualTo("SBAC-ELA-v1:2-W|1-11");
        assertThat(item.getClaim()).isEqualTo("2-W");
        assertThat(item.getTarget()).isEqualTo("1-11");
        assertThat(item.getClaimContentTarget()).isEqualTo("2-W	|1-11");
        assertThat(item.getSecondaryClaimContentTarget()).isEqualTo("2-W\t|1-11\t;2-W |3-11;2-W |3-11");
        assertThat(item.getCommonCore()).isEqualTo("5.RI.10");
        assertThat(item.getSecondaryCommonCore()).isEqualTo("5.RI.10;8.L.5b;8.L.5b");
        assertThat(item.getPassage()).isNull();
        assertThat(item.getAsl()).isFalse();
        assertThat(item.getBraille()).isEqualTo("BRF");
        assertThat(item.getBrailleLanguage()).isEqualTo("ENU-Braille");
        assertThat(item.getDok()).isEqualTo(3);
        assertThat(item.getLanguage()).isEqualTo("ENU");
        assertThat(item.getAllowCalculator()).isNull();
        assertThat(item.getMathPractice()).isNull();
        assertThat(item.getMaxPoints()).isEqualTo(10);
        assertThat(item.getGlossary()).isNull();
        assertThat(item.getScoringEngine()).isEqualTo("HandScored");
        assertThat(item.getSpanish()).isFalse();
        assertThat(item.getFieldTest()).isFalse();
        assertThat(item.getActive()).isTrue();
        assertThat(item.getResponseRequired()).isTrue();
        assertThat(item.getAdminRequired()).isTrue();
        assertThat(item.getPosition()).isEqualTo(1);
        assertThat(item.getMeasurementModel()).isEqualTo("IRTGPC");
        assertThat(item.getWeight()).isEqualTo(1);
        assertThat(item.getScorePoints()).isEqualTo(2);
        assertThat(item.getAnswerKey()).isEqualTo("D");
        assertThat(item.getNumberOfAnswerOptions()).isEqualTo(4);
        assertThat(item.getPerformanceTask()).isNull();
        assertThat(item.getPtWritingType()).isEqualTo("Opinion");

        assertThat(item.getA()).isEqualTo(0.55434);
        assertThat(item.getB0_b()).isEqualTo(0.93104);
        assertThat(item.getB1_c()).isEqualTo(0.43826);
        assertThat(item.getB2()).isNull();
        assertThat(item.getB3()).isNull();
        assertThat(item.getAvg_b()).isEqualTo(0.68465);

        assertThat(item.getBpref1()).isEqualTo("(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017");
        assertThat(item.getBpref2()).isNull();
        assertThat(item.getBpref3()).isEqualTo("SBAC-2-W|1-11");
        assertThat(item.getBpref4()).isNull();
        assertThat(item.getBpref5()).isNull();
        assertThat(item.getBpref6()).isNull();
        assertThat(item.getBpref7()).isNull();
    }

    @Test
    public void itShouldReadSixCutpoints() {
        final List<Assessment> assessments = parseResource("/Cutpoints.test6.csv");
        assertThat(assessments).hasSize(1);
        final Assessment assessment = assessments.get(0);

        final Scoring scoring = assessment.getOverallScoring();
        assertThat(scoring.getLevelCount()).isEqualTo(6);
        assertThat(scoring.getMinScore()).isEqualTo(2300);
        assertThat(scoring.getMaxScore()).isEqualTo(2900);
        assertThat(scoring.getLevelRanges().get(3).getLow()).isEqualTo(2680);
        assertThat(scoring.getLevelRanges().get(3).getHigh()).isEqualTo(2800);
        assertThat(assessment.getAltScorings()).isNull();

        // freeloading on this test for math practice
        assertThat(assessment.getItems().get(0).getMathPractice()).isEqualTo(4);
    }

    @Test
    public void itShouldReadELPAC() {
        // ELPAC: summative, has alt scoring, no item details
        final List<Assessment> assessments = parseResource("/ELPAC.csv");
        assertThat(assessments).hasSize(13);

        for (final Assessment assessment : assessments) {
            assertThat(assessment.getId()).startsWith("ELPAC-SA-GRADE").endsWith("Spring-2017-2018");
            assertThat(assessment.getName()).startsWith("ELPAC-SA-GRADE");
            assertThat(assessment.getLabel()).startsWith("ELPAC");
            assertThat(assessment.getType()).isEqualTo(AssessmentType.SUMMATIVE);
            assertThat(assessment.getGrade()).isNotBlank();
            assertThat(assessment.getSchoolYear()).isEqualTo(2018);
            assertThat(assessment.getItems()).isEmpty();
            assertThat(assessment.getOverallScoring().getLevelCount()).isEqualTo(4);
            assertThat(assessment.getOverallScoring().getMinScore()).isEqualTo(1150);
            assertThat(assessment.getAltScorings()).hasSize(2);
        }

        // spot check one of them (this also tests that order matches content order)
        final Assessment assessment = assessments.get(8);
        assertThat(assessment.getId()).isEqualTo("ELPAC-SA-GRADE-08-Spring-2017-2018");
        assertThat(assessment.getName()).isEqualTo("ELPAC-SA-GRADE-08");
        assertThat(assessment.getLabel()).isEqualTo("ELPAC Grade 8");
        assertThat(assessment.getGrade()).isEqualTo("08");
        final Scoring overall = assessment.getOverallScoring();
        assertThat(overall.getMinScore()).isEqualTo(1150);
        assertThat(overall.getLevelRanges().get(0).getLow()).isEqualTo(1150.0);
        assertThat(overall.getLevelRanges().get(0).getHigh()).isEqualTo(1485.0);
        assertThat(overall.getLevelRanges().get(1).getLow()).isEqualTo(1486.0);
        assertThat(overall.getLevelRanges().get(1).getHigh()).isEqualTo(1533.0);
        assertThat(overall.getLevelRanges().get(2).getLow()).isEqualTo(1534.0);
        assertThat(overall.getLevelRanges().get(2).getHigh()).isEqualTo(1589.0);
        assertThat(overall.getLevelRanges().get(3).getLow()).isEqualTo(1590.0);
        assertThat(overall.getLevelRanges().get(3).getHigh()).isEqualTo(1900.0);
        assertThat(overall.getMaxScore()).isEqualTo(1900);

        assertThat(assessment.getAltScorings()).hasSize(2);
    }

    @Test
    public void itShouldThrowIfDuplicateItem() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("Duplicate item");
        parseResource("/DuplicateItem.csv");
    }

    @Test
    public void itShouldThrowIfMissingRequiredColumns() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("Missing required columns: [AssessmentSubtype]");
        parseResource("/MissingRequiredColumns.csv");
    }

    @Test
    public void itShouldThrowIfMissingAssessmentId() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("Missing assessment id");
        parseResource("/MissingAssessmentId.csv");
    }

    @Test
    public void itShouldThrowIfScoreRangeIsInvalid() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("low is greater than high");
        parseResource("/InvalidScoreLevelRange.csv");
    }

    @Test
    public void itShouldThrowIfScoreRangesOverlap() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("Levels must be increasing and non-overlapping");
        parseResource("/InvalidScoreLevels.csv");
    }

    @Test
    public void itShouldIncludeRecordAndLineInError() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage("record=1, line=3");
        parseResource("/InvalidScoreLevels.csv");
    }

    @Test
    public void itShouldIgnoreEmptyRowsAndComments() {
        final List<Assessment> assessments = parseResource("/EmptyRows.csv");
        assertThat(assessments).hasSize(4);
    }

    @Test
    public void itShouldAllowExpectedMissingColumns() {
        final List<Assessment> assessments = parseResource("/ExpectedMissingColumns.csv");
        final Item item = assessments.get(0).getItems().get(0);
        assertThat(item.getFullKey()).isEqualTo("200-58197");
        assertThat(item.getPerformanceTask()).isNull();
        assertThat(item.getPtWritingType()).isNull();
        assertThat(item.getAnswerKey()).isNull();
        assertThat(item.getNumberOfAnswerOptions()).isNull();
    }

    @Test
    public void itShouldDealWithUnsortedContentAndMissingLevelScoreFields() {
        final List<Assessment> assessments = parseResource("/Unsorted.csv");

        assertThat(assessments.get(0).getId()).isEqualTo("(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017");
        assertThat(assessments.get(0).getItems()).hasSize(6);
        assertThat(assessments.get(1).getId()).isEqualTo("(SBAC)SBAC-IAB-FIXED-G11E-Editing-ELA-11-Winter-2016-2017");
        assertThat(assessments.get(1).getItems()).hasSize(11);
        assertThat(assessments.get(2).getId()).isEqualTo("(SBAC)SBAC-ICA-FIXED-G11E-COMBINED-2017-Winter-2016-2017");
        assertThat(assessments.get(2).getItems()).hasSize(16);

        // check that scoring parsing deals with missing "High" columns
        final Scoring overall = assessments.get(0).getOverallScoring();
        assertThat(overall.getLevelRanges().get(0).getLow()).isEqualTo(2300);
        assertThat(overall.getLevelRanges().get(0).getHigh()).isEqualTo(2490);
        assertThat(overall.getLevelRanges().get(2).getLow()).isEqualTo(2580);
        assertThat(overall.getLevelRanges().get(2).getHigh()).isEqualTo(2680);

    }

    private List<Assessment> parseResource(final String name) {
        try (final InputStream is = this.getClass().getResourceAsStream(name)) {
            return service.parse(is);
        } catch (final IOException e) {
            fail("failed to load " + name + ": " + e.getMessage());
            return null;
        }
    }
}
