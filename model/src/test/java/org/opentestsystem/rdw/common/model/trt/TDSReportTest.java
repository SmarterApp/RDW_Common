package org.opentestsystem.rdw.common.model.trt;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.time.temporal.ChronoUnit;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;

public class TDSReportTest {

    @org.junit.Test
    public void thisTestEnforcesModelClasses() {
        // The idea of this test is to explicitly use the various model classes so that any change
        // in them will result in a compilation error; this is because the real client of this code
        // is in another project and we don't want to wait that long to discover breaking changes.

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.sample.xml"));
        assertThat(tdsReport).isNotNull();

        final Test test = tdsReport.getTest();
        assertThat(test).isNotNull();

        final Examinee examinee = tdsReport.getExaminee();
        assertThat(examinee).isNotNull();

        final Opportunity opportunity = tdsReport.getOpportunity();
        assertThat(opportunity).isNotNull();

        final List<Comment> comments = tdsReport.getComment();
        assertThat(comments).isNotNull();

        final List<ToolUsage> toolUsages = tdsReport.getToolUsage();
        assertThat(toolUsages).isNotNull();
    }

    @org.junit.Test
    public void itShouldGetBestAttribute() {
        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.sample2.xml"));
        final Examinee examinee = tdsReport.getExaminee();

        assertThat(examinee.getBestAttribute("FirstName").getValue()).isEqualTo("LoadTest");
        assertThat(examinee.getBestAttribute("MiddleName").getValue()).isEqualTo("Fubar");
        assertThat(examinee.getBestAttribute("LastOrSurname").getValue()).isEqualTo("Student0000072");
        assertThat(examinee.getBestAttribute("Shoesize")).isNull();
    }

    @org.junit.Test
    public void itShouldGetBestRelationship() {
        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.sample2.xml"));
        final Examinee examinee = tdsReport.getExaminee();

        assertThat(examinee.getBestRelationship("ResponsibleInstitutionIdentifier").getValue()).isEqualTo("2222");
        assertThat(examinee.getBestRelationship("ResponsibleDistrictIdentifier").getValue()).isEqualTo("1111");
        assertThat(examinee.getBestRelationship("StateAbbreviation").getValue()).isEqualTo("WI");
        assertThat(examinee.getBestRelationship("NotAThing")).isNull();
    }

    @org.junit.Test
    public void itShouldParseTimeOffset() {
        // the "timezone" TDS has "-05:00" inserted for every time so the easiest way to see if it is working
        // is to compare it to the original sample ...
        final TDSReport origReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.sample.xml"));
        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.timezone.xml"));

        assertThat(tdsReport.getOpportunity().getDateCompleted().minus(5, ChronoUnit.HOURS))
                .isEqualTo(origReport.getOpportunity().getDateCompleted());
        assertThat(tdsReport.getOpportunity().getStartDate().minus(5, ChronoUnit.HOURS))
                .isEqualTo(origReport.getOpportunity().getStartDate());
        assertThat(tdsReport.getOpportunity().getStatusDate().minus(5, ChronoUnit.HOURS))
                .isEqualTo(origReport.getOpportunity().getStatusDate());

        // dates don't have offset
        assertThat(tdsReport.getOpportunity().getEffectiveDate())
                .isEqualTo(origReport.getOpportunity().getEffectiveDate());
    }

    // this is a test that loads external TDSReports that can't be checked in with source
    @org.junit.Test
    public void testExternalReports() throws FileNotFoundException {
        final File srcdir = new File("/Users/marklaffoon/Downloads/Fairway Samples");
        if (!srcdir.exists()) return;

        int failures = 0;
        for (final File file : srcdir.listFiles((dir, name) -> name.endsWith(".xml"))) {
            try {
                final TDSReport tdsReport = XmlUtils.tdsReportFromXml(new FileInputStream(file));
//                System.out.println(file.getAbsolutePath() + ": " + XmlUtils.tdsReportToXml(tdsReport).substring(0, 80));
            } catch (final Exception e) {
                System.out.println(file.getAbsolutePath() + ": " + e.getMessage());
                ++failures;
            }
        }
        if (failures != 0) {
            fail(failures + " files failed");
        }
    }
}