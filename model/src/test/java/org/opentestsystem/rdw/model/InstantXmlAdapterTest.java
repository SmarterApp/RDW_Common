package org.opentestsystem.rdw.model;

import org.junit.Before;
import org.junit.Test;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class InstantXmlAdapterTest {

    private InstantXmlAdapter adapter;

    @Before
    public void createAdapter() {
        adapter = new InstantXmlAdapter();
    }

    @Test
    public void itShouldRoundtripStrictValues() throws Exception {
        for (final String value : new String[] {
                "2017-03-17T14:29:00Z",
                "2017-03-17T14:29:30.030Z",
                "2017-03-17T14:29:30.031234Z",
                null
        }) {
            assertThat(adapter.marshal(adapter.unmarshal(value))).isEqualTo(value);
        }
    }

    @Test
    public void itShouldDoThis() throws Exception {
        assertThat(adapter.marshal(adapter.unmarshal("2017-03-17T14:29:00.1-05:00"))).isEqualTo("2017-03-17T19:29:00.100Z");
    }

    @Test
    public void itShouldDealWithZone() throws Exception {
        // this is the baseline instant using the most correct syntax
        final Instant base = adapter.unmarshal("2017-03-17T14:29:00Z");
        System.out.println(adapter.marshal(base));

        // all of these should produce the same instant
        for (final String value : new String[]{
                "2017-03-17T14:29:00",
                "2017-03-17T14:29:00Z",
                "2017-03-17T14:29:00.000000Z",
                "2017-03-17T14:29:00+00:00",
                "2017-03-17T07:29:00-07:00",
                "2017-03-17T16:29:00+02:00"
        }) {
            assertThat(adapter.unmarshal(value)).isEqualTo(base);
        }
    }
}
