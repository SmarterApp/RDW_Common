package org.opentestsystem.rdw.multitenant;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.google.common.base.Objects;

import java.time.Instant;

/**
 * Tenant definition.
 *
 * @see TenantProperties
 */
public class Tenant {
    private String id;
    private String key;
    private String name;
    private String description;
    private boolean sandbox;
    private String sandboxDataset;
    @JsonIgnore //TODO: configprops serializer can't handle this type, find another RP-549
    private Instant created;

    public Tenant() {
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String id;
        private String key;
        private String name;
        private String description;
        private boolean sandbox;
        private String sandboxDataset;
        private Instant created;

        public Tenant build() {
            final Tenant tenant = new Tenant();
            tenant.id = id;
            tenant.key = key;
            tenant.name = name;
            tenant.description = description;
            tenant.sandbox = sandbox;
            tenant.sandboxDataset = sandboxDataset;
            tenant.created = created != null ? created : Instant.now();
            return tenant;
        }

        public Builder id(final String id) {
            this.id = id;
            return this;
        }

        public Builder key(final String key) {
            this.key = key;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder description(final String description) {
            this.description = description;
            return this;
        }

        public Builder sandbox(final boolean sandbox) {
            this.sandbox = sandbox;
            return this;
        }

        public Builder sandboxDataset(final String sandboxDataset) {
            this.sandboxDataset = sandboxDataset;
            return this;
        }

        public Builder created(final Instant created) {
            this.created = created;
            return this;
        }
    }

    /**
     * Id of a tenant.  External id provided by granting authority.
     *
     * @return tenant id, e.g. "CA"
     */
    public String getId() {
        return id;
    }

    public void setId(final String id) {
        this.id = id;
    }

    /**
     * Configuration key.  Used to map a tenant to a specific configuration within RDW applications.
     *
     * @return tenant key, e.g. "CA"
     */
    public String getKey() {
        return key;
    }

    public void setKey(final String key) {
        this.key = key;
    }

    /**
     * @return tenant name, e.g. "California"
     */
    public String getName() {
        return name;
    }

    public void setName(final String name) {
        this.name = name;
    }

    /**
     * @return (optional) tenant description
     */
    public String getDescription() {
        return description;
    }

    public void setDescription(final String description) {
        this.description = description;
    }

    /**
     * @return {@code true} if the tenant is a sandbox
     */
    public boolean isSandbox() {
        return sandbox;
    }

    public void setSandbox(final boolean sandbox) {
        this.sandbox = sandbox;
    }

    /**
     * @return dataset name for sandbox
     */
    public String getSandboxDataset() {
        return sandboxDataset;
    }

    public void setSandboxDataset(String sandboxDataset) {
        this.sandboxDataset = sandboxDataset;
    }

    /**
     * @return The {@link Instant} the tenant was created
     */
    public Instant getCreated() {
        return created;
    }

    public void setCreated(final Instant created) {
        this.created = created;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Tenant)) return false;
        Tenant tenant = (Tenant) o;
        return sandbox == tenant.sandbox &&
                Objects.equal(id, tenant.id) &&
                Objects.equal(key, tenant.key) &&
                Objects.equal(name, tenant.name) &&
                Objects.equal(description, tenant.description) &&
                Objects.equal(sandboxDataset, tenant.sandboxDataset) &&
                Objects.equal(created, tenant.created);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id, key, name, description, sandbox, sandboxDataset, created);
    }

    @Override
    public String toString() {
        return "Tenant{" +
                "id='" + id + '\'' +
                ", key='" + key + '\'' +
                ", name='" + name + '\'' +
                ", description='" + description + '\'' +
                ", sandbox=" + sandbox +
                ", sandboxDataset='" + sandboxDataset + '\'' +
                ", created=" + created +
                '}';
    }
}
