package org.opentestsystem.rdw.multitenant;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;

import javax.sql.DataSource;

/**
 * Tenant specific {@link AbstractDynamicRoutingDataSource} defers
 * to {@link TenantDataSourceOverrideResolver} for tenant specific
 * datasource url, username, and password.
 * Otherwise uses the supplied {@link DataSourceProperties}
 */
public class TenantDynamicRoutingDataSource extends AbstractDynamicRoutingDataSource {

    //TODO: this interim default is only in place while we have a single tenant
    public static final String DEFAULT_TENANT_ID = "DEFAULT_TENANT";

    private static final Logger logger = LoggerFactory.getLogger(TenantDynamicRoutingDataSource.class);

    private final DataSourceProperties dataSourceProperties;
    private final TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver;

    public TenantDynamicRoutingDataSource(DataSourceProperties dataSourceProperties,
                                          TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver) {
        this.dataSourceProperties = dataSourceProperties;
        this.tenantDataSourceOverrideResolver = tenantDataSourceOverrideResolver;
    }

    @Override
    protected Object determineCurrentLookupKey() {
        final String tenantId = TenantContextHolder.getTenantId();
        if (tenantId == null) {
            logger.warn("No tenantId set in TenantContextHolder falling back to default {}", DEFAULT_TENANT_ID);
            return DEFAULT_TENANT_ID;
        }
        return tenantId;
    }

    @Override
    protected DataSource dataSourceFactory(Object lookupKey) {
        final String tenantId = (String) lookupKey;
        final TenantDatasourceOverride override = tenantDataSourceOverrideResolver.resolve(tenantId);
        logger.info("creating new dataSource for url: {} username: {} password: XXXXXXX", override.getUrl(), override.getUsername());
        return dataSourceProperties
                .initializeDataSourceBuilder()
                .username(override.getUsername())
                .password(override.getPassword())
                .url(override.getUrl())
                .build();
    }
}

