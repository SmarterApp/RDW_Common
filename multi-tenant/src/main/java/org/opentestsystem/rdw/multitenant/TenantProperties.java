package org.opentestsystem.rdw.multitenant;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Configuration class for tenant information.  Intended to be used with
 * {@code @ConfigurationProperties}. For example:<pre>
 * {@literal @}Bean
 * {@literal @}ConfigurationProperties("tenantProperties")
 * {@literal @}RefreshScope
 *  public TenantProperties tenantProperties() { return new TenantProperties(); }
 * </pre>
 */
public class TenantProperties implements TenantConfigurationStatusProvider {

    private static final Logger logger = LoggerFactory.getLogger(TenantProperties.class);
    private final LocalDateTime created = LocalDateTime.now();

    private Map<String, Tenant> tenants = new HashMap<>();

    public TenantProperties() {
        logger.debug("created: {} tenants: {} ", created, tenants);
    }

    /**
     * Tenants configured.
     * Key is tenantKey, not tenantId to remain consistent with other tenant configuration;
     *
     * @return all tenants
     */
    public Map<String, Tenant> getTenants() {
        return tenants;
    }

    public void setTenants(Map<String, Tenant> tenants) {
        this.tenants = tenants;
    }

    /**
     * Helper to look up a tenant by id.
     *
     * @param id tenant id
     * @return Optional Tenant
     */
    public Optional<Tenant> findTenantById(String id) {
        return tenants.values().stream()
                .filter(t -> t.id.equals(id))
                .findFirst();
    }

    /**
     * Helper to look up tenant key by id.
     *
     * @param id Tenant Id
     * @return Tenant Key
     */
    public Optional<String> findTenantKeyById(String id) {
        return findTenantById(id)
                .map(Tenant::getKey);
    }

    public static class Tenant {

        private String id;
        private String key;
        private String name;
        private String description;

        /**
         * Id of a tenant.  External id provided by granting authority.
         *
         * @return tenant id
         */
        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        /**
         * Configuration key.  Used to map a tenant to a specific configuration within RDW applications.
         *
         * @return tenant key
         */
        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }
    }

    @Override
    public TenantConfigurationStatus getStatus() {
        return TenantConfigurationStatus
                .builder()
                .created(created)
                .tenantKeys(tenants.values()
                        .stream()
                        .map(Tenant::getKey)
                        .collect(Collectors.toList()))
                .build();
    }
}
