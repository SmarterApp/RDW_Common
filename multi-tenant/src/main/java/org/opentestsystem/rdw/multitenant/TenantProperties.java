package org.opentestsystem.rdw.multitenant;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Configuration class for tenant information.  Intended to be used with
 * {@code @ConfigurationProperties}. For example:<pre>
 * {@literal @}Bean
 * {@literal @}ConfigurationProperties("tenantProperties")
 * {@literal @}RefreshScope
 *  public TenantProperties tenantProperties() { return new TenantProperties(); }
 * </pre>
 *
 * @see Tenant
 */
public class TenantProperties implements TenantConfigurationStatusProvider {

    private static final Logger logger = LoggerFactory.getLogger(TenantProperties.class);
    private final LocalDateTime created = LocalDateTime.now();

    private Map<String, Tenant> tenants = new HashMap<>();

    public TenantProperties() {
        logger.debug("created: {} tenants: {} ", created, tenants);
    }

    /**
     * Tenants configured.
     * Key is tenantKey, not tenantId to remain consistent with other tenant configuration;
     *
     * @return a map of tenant keys and (all) tenants
     */
    public Map<String, Tenant> getTenants() {
        return tenants;
    }

    /**
     * Fetches a collection of all tenants
     *
     * @return a {@link Collection} of all tenants that are *not* sandboxes
     */
    public Set<Tenant> findTenants() {
        return tenants.values().stream()
                .filter(tenant -> !tenant.isSandbox())
                .collect(Collectors.toSet());
    }

    /**
     * Fetches a collection of all sandboxes
     *
     * @return a {@link Collection} of all tenants that are sandboxes
     */
    public Set<Tenant> findSandboxes() {
        return tenants.values().stream()
                .filter(tenant -> tenant.isSandbox())
                .collect(Collectors.toSet());
    }

    public void setTenants(final Map<String, Tenant> tenants) {
        this.tenants = tenants;
    }

    /**
     * Helper to look up a tenant by id.
     *
     * @param id tenant id
     * @return Optional Tenant
     */
    public Optional<Tenant> findTenantById(final String id) {
        return tenants.values().stream()
                .filter(t -> t.getId().equals(id))
                .findFirst();
    }

    /**
     * Helper to look up tenant key by id.
     *
     * @param id Tenant Id
     * @return Tenant Key
     */
    public Optional<String> findTenantKeyById(final String id) {
        return findTenantById(id)
                .map(Tenant::getKey);
    }

    @Override
    public TenantConfigurationStatus getStatus() {
        return TenantConfigurationStatus
                .builder()
                .created(created)
                .tenantKeys(tenants.values()
                        .stream()
                        .map(Tenant::getKey)
                        .collect(Collectors.toList()))
                .build();
    }
}
