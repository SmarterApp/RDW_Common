package org.opentestsystem.rdw.multitenant.archive;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;

import java.util.Optional;

public class ArchivePropertiesResolver extends AbstractArchiveProperties {

    private ArchivePropertiesRoot archivePropertiesRoot;
    private final TenantKeyResolver tenantKeyResolver;

    public ArchivePropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                     ArchivePropertiesRoot archivePropertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.archivePropertiesRoot = archivePropertiesRoot;
    }

    private Optional<ArchivePropertiesTenant> getResolvedArchivePropertiesTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(archivePropertiesRoot.getTenants().get(k)));
    }

    @Override
    public String getUriRoot() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getUriRoot)
                .orElse(archivePropertiesRoot.getUriRoot());
    }

    @Override
    public String getPathPrefix() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getPathPrefix)
                .orElse(archivePropertiesRoot.getPathPrefix());
    }

    @Override
    public String getS3AccessKey() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getS3AccessKey)
                .orElse(archivePropertiesRoot.getS3AccessKey());

    }

    @Override
    public String getS3SecretKey() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getS3SecretKey)
                .orElse(archivePropertiesRoot.getS3SecretKey());
    }

    @Override
    public String getS3RegionStatic() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getS3RegionStatic)
                .orElse(archivePropertiesRoot.getS3RegionStatic());
    }

    @Override
    public String getS3Sse() {
        return getResolvedArchivePropertiesTenant()
                .map(ArchivePropertiesTenant::getS3Sse)
                .orElse(archivePropertiesRoot.getS3Sse());
    }

}
