package org.opentestsystem.rdw.multitenant.configprops;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.context.refresh.ContextRefresher;
import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
import org.springframework.context.event.EventListener;

import java.util.Objects;

/**
 * Clears all caches after a context refresh, such as would occur after the creation of a new tenant or sandbox.
 *
 * <p>
 * This class listens for {@link RefreshScopeRefreshedEvent}.
 * It is fired after {@link ContextRefresher#refresh()} completes,
 * and beans that use {@link RefreshScope} will have been updated by then.
 * The message is extracted from {@link ConfigurationPropertiesReportEndpoint}
 */
public class ConfigurationChangeCacheClearer {
    private static final Logger logger = LoggerFactory.getLogger(ConfigurationChangeCacheClearer.class);

    private final CacheManager cacheManager;

    public ConfigurationChangeCacheClearer(final CacheManager cacheManager) {
        this.cacheManager = cacheManager;
    }

    /**
     * Listen for {@link RefreshScopeRefreshedEvent} and clear all caches
     *
     * @param refreshScopeRefreshedEvent event payload
     */
    @EventListener
    public void refreshScopeRefreshedEventClearCaches(final RefreshScopeRefreshedEvent refreshScopeRefreshedEvent) {
        logger.debug("RefreshScopeRefreshedEvent - {}", refreshScopeRefreshedEvent);
        try {
            // Clear all caches listed in CacheManager
            cacheManager.getCacheNames()
                    .stream()
                    .map(cacheManager::getCache)
                    .filter(Objects::nonNull)
                    .forEach(Cache::clear);
        } catch (Exception e) {
            //no end user log only
            logger.warn("Unable to clear cache", e);
        }
    }
}
