package org.opentestsystem.rdw.multitenant.configprops;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
import org.springframework.cloud.context.refresh.ContextRefresher;
import org.springframework.context.event.EventListener;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;

import java.util.Map;

/**
 * Listen for {@link EnvironmentChangeEvent} event.  It is fired after {@link ContextRefresher#refresh()}
 * all beans that use {@link RefreshScope} will have been updated.
 * Publish a message based off of the {@link ConfigurationPropertiesReportEndpoint}
 */
public class EnvironmentChangeEventListener {

    private static final Logger logger = LoggerFactory.getLogger(EnvironmentChangeEventListener.class);

    private final String serviceName;
    private final ConfigpropsProcessor configpropsProcessor;
    private final ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint;
    private final ObjectMapper objectMapper;

    public EnvironmentChangeEventListener(String serviceName,
                                          ConfigpropsProcessor configpropsProcessor,
                                          ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint,
                                          ObjectMapper objectMapper) {
        this.serviceName = serviceName;
        this.configpropsProcessor = configpropsProcessor;
        this.configurationPropertiesReportEndpoint = configurationPropertiesReportEndpoint;
        this.objectMapper = objectMapper;
    }


    @EventListener
    public void listenForEnvironmentChangeEvent(final EnvironmentChangeEvent environmentChangeEvent) {
        try {
            Map<String, Object> configprops = configurationPropertiesReportEndpoint.invoke();
            String json = objectMapper.writeValueAsString(configprops);
            logger.debug("EnvironmentChangeEvent - eventKeys {} configprops {} ", environmentChangeEvent.getKeys(), json);
            ConfigpropsUpdateMessage payload = new ConfigpropsUpdateMessage();
            payload.setConfigprops(json);
            payload.setService(serviceName);
            Map<String, Object> headers = ImmutableMap.of("serviceName", serviceName);
            final Message<ConfigpropsUpdateMessage> message =
                    MessageBuilder.createMessage(payload, new MessageHeaders(headers));
            configpropsProcessor.configpropsUpdated().send(message);
        } catch (Exception e) {
            throw new IllegalStateException("Unable to handle EnvironmentChangeEvent", e);
        }
    }

}

