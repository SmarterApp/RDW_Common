package org.opentestsystem.rdw.multitenant.datasource;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.common.base.Objects;
import org.opentestsystem.rdw.multitenant.TenantConfigurationStatus;
import org.opentestsystem.rdw.multitenant.TenantConfigurationStatusProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * A container for data source properties.
 * It is expected to be loaded via @ConfigurationProperties.
 */
public class DataSourceElementsProperties implements DataSourceElements, TenantConfigurationStatusProvider {

    private static final Logger logger = LoggerFactory.getLogger(DataSourceElementsProperties.class);

    @JsonIgnore
    private final LocalDateTime created = LocalDateTime.now();

    private String url;
    private DataSourceUrlParts urlParts;
    private String username;
    private String password;
    private String schemaSearchPath;
    private Boolean testWhileIdle;
    private String validationQuery;
    private Integer validationInterval;
    private String driverClassName;
    private Integer initialSize;
    private Integer maxActive;
    private Integer minIdle;
    private Integer maxIdle;
    private Boolean removeAbandoned;
    private Integer removeAbandonedTimeout;
    private Boolean logAbandoned;
    private Map<String, DataSourceElementsTenant> tenants = new HashMap<>();

    public DataSourceElementsProperties() {
        logger.debug("created: {} tenants: {} ", created, tenants);
    }

    @Override
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Override
    public DataSourceUrlParts getUrlParts() {
        return urlParts;
    }

    public void setUrlParts(DataSourceUrlParts urlParts) {
        this.urlParts = urlParts;
    }

    @Override
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String getSchemaSearchPath() {
        return schemaSearchPath;
    }

    public void setSchemaSearchPath(String schemaSearchPath) {
        this.schemaSearchPath = schemaSearchPath;
    }

    @Override
    public Boolean getTestWhileIdle() {
        return testWhileIdle;
    }

    public void setTestWhileIdle(Boolean testWhileIdle) {
        this.testWhileIdle = testWhileIdle;
    }

    @Override
    public String getValidationQuery() {
        return validationQuery;
    }

    public void setValidationQuery(String validationQuery) {
        this.validationQuery = validationQuery;
    }

    @Override
    public Integer getValidationInterval() {
        return validationInterval;
    }

    public void setValidationInterval(Integer validationInterval) {
        this.validationInterval = validationInterval;
    }

    @Override
    public String getDriverClassName() {
        return driverClassName;
    }

    public void setDriverClassName(String driverClassName) {
        this.driverClassName = driverClassName;
    }

    @Override
    public Integer getInitialSize() {
        return initialSize;
    }

    public void setInitialSize(Integer initialSize) {
        this.initialSize = initialSize;
    }

    @Override
    public Integer getMaxActive() {
        return maxActive;
    }

    public void setMaxActive(Integer maxActive) {
        this.maxActive = maxActive;
    }

    @Override
    public Integer getMinIdle() {
        return minIdle;
    }

    public void setMinIdle(Integer minIdle) {
        this.minIdle = minIdle;
    }

    @Override
    public Integer getMaxIdle() {
        return maxIdle;
    }

    public void setMaxIdle(Integer maxIdle) {
        this.maxIdle = maxIdle;
    }

    @Override
    public Boolean isRemoveAbandoned() {
        return removeAbandoned;
    }

    public void setRemoveAbandoned(Boolean removeAbandoned) {
        this.removeAbandoned = removeAbandoned;
    }

    @Override
    public Integer getRemoveAbandonedTimeout() {
        return removeAbandonedTimeout;
    }

    public void setRemoveAbandonedTimeout(Integer removeAbandonedTimeout) {
        this.removeAbandonedTimeout = removeAbandonedTimeout;
    }

    @Override
    public Boolean isLogAbandoned() {
        return logAbandoned;
    }

    public void setLogAbandoned(Boolean logAbandoned) {
        this.logAbandoned = logAbandoned;
    }

    public Map<String, DataSourceElementsTenant> getTenants() {
        return tenants;
    }

    public void setTenants(Map<String, DataSourceElementsTenant> tenants) {
        this.tenants = tenants;
    }

    @JsonIgnore
    @Override
    public TenantConfigurationStatus getStatus() {
        return TenantConfigurationStatus.builder()
                .created(created)
                .tenantKeys(new ArrayList<>(tenants.keySet()))
                .build();
    }

    @Override
    public String toString() {
        return "DataSourceElementsProperties{" +
                "created=" + created +
                ", url='" + url + '\'' +
                ", urlParts=" + urlParts +
                ", username='" + username + '\'' +
                ", password='" + "REDACTED" + '\'' +
                ", schemaSearchPath='" + schemaSearchPath + '\'' +
                ", testWhileIdle=" + testWhileIdle +
                ", validationQuery='" + validationQuery + '\'' +
                ", validationInterval=" + validationInterval +
                ", driverClassName='" + driverClassName + '\'' +
                ", initialSize=" + initialSize +
                ", maxActive=" + maxActive +
                ", minIdle=" + minIdle +
                ", maxIdle=" + maxIdle +
                ", removeAbandoned=" + removeAbandoned +
                ", removeAbandonedTimeout=" + removeAbandonedTimeout +
                ", logAbandoned=" + logAbandoned +
                ", tenants=" + tenants +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DataSourceElementsProperties)) return false;
        DataSourceElementsProperties that = (DataSourceElementsProperties) o;
        return Objects.equal(url, that.url) &&
                Objects.equal(urlParts, that.urlParts) &&
                Objects.equal(username, that.username) &&
                Objects.equal(password, that.password) &&
                Objects.equal(schemaSearchPath, that.schemaSearchPath) &&
                Objects.equal(testWhileIdle, that.testWhileIdle) &&
                Objects.equal(validationQuery, that.validationQuery) &&
                Objects.equal(validationInterval, that.validationInterval) &&
                Objects.equal(driverClassName, that.driverClassName) &&
                Objects.equal(initialSize, that.initialSize) &&
                Objects.equal(maxActive, that.maxActive) &&
                Objects.equal(minIdle, that.minIdle) &&
                Objects.equal(maxIdle, that.maxIdle) &&
                Objects.equal(removeAbandoned, that.removeAbandoned) &&
                Objects.equal(removeAbandonedTimeout, that.removeAbandonedTimeout) &&
                Objects.equal(logAbandoned, that.logAbandoned) &&
                Objects.equal(tenants, that.tenants);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(url, urlParts, username, password, schemaSearchPath, testWhileIdle, validationQuery, validationInterval, driverClassName, initialSize, maxActive, minIdle, maxIdle, removeAbandoned, removeAbandonedTimeout, logAbandoned, tenants);
    }
}
