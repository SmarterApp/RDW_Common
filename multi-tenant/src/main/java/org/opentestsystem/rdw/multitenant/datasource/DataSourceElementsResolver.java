package org.opentestsystem.rdw.multitenant.datasource;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

/**
 * Tenant specific {@link DataSourceElements} assumes tenant configuration
 * is under main configuration in "tenants" namespace
 */
public class DataSourceElementsResolver implements DataSourceElements {

    private static final Logger logger = LoggerFactory.getLogger(DataSourceElementsResolver.class);

    private final TenantKeyResolver tenantKeyResolver;
    private final DataSourceElementsProperties dataSourceElementsProperties;

    public DataSourceElementsResolver(final TenantKeyResolver tenantKeyResolver,
                                      final DataSourceElementsProperties dataSourceElementsProperties) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.dataSourceElementsProperties = dataSourceElementsProperties;
    }

    private Optional<DataSourceElementsTenant> getResolvedDataSourceElementsTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(dataSourceElementsProperties.getTenants().get(k)));
    }

    @Override
    public String getUrl() {
        final DataSourceUrlParts urlParts = getUrlParts();
        return urlParts.getProtocol() + "//" +
                urlParts.getHosts() + "/" +
                urlParts.getDatabase() + "?" +
                urlParts.getProperties();
    }

    @Override
    public DataSourceUrlParts getUrlParts() {
        final DataSourceUrlParts rootUrlParts =
                Optional.ofNullable(dataSourceElementsProperties.getUrlParts())
                        .orElse(new DataSourceUrlParts());

        final DataSourceUrlParts tenantUrlParts =
                getResolvedDataSourceElementsTenant()
                        .map(DataSourceElementsTenant::getUrlParts)
                        .orElse(new DataSourceUrlParts());

        final DataSourceUrlParts targetUrlParts = new DataSourceUrlParts();

        targetUrlParts.setProtocol(
                Optional.ofNullable(tenantUrlParts.getProtocol())
                        .orElse(rootUrlParts.getProtocol())
        );
        targetUrlParts.setHosts(
                Optional.ofNullable(tenantUrlParts.getHosts())
                        .orElse(rootUrlParts.getHosts())
        );
        targetUrlParts.setDatabase(
                Optional.ofNullable(tenantUrlParts.getDatabase())
                        .orElse(rootUrlParts.getDatabase())
        );
        targetUrlParts.setProperties(
                Optional.ofNullable(tenantUrlParts.getProperties())
                        .orElse(rootUrlParts.getProperties())
        );

        return targetUrlParts;
    }

    @Override
    public String getJdbcInterceptors() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getJdbcInterceptors)
                .orElse(dataSourceElementsProperties.getJdbcInterceptors());
    }

    @Override
    public String getUsername() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getUsername)
                .orElse(dataSourceElementsProperties.getUsername());
    }

    @Override
    public String getPassword() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getPassword)
                .orElse(dataSourceElementsProperties.getPassword());
    }

    @Override
    public String getSchemaSearchPath() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getSchemaSearchPath)
                .orElse(dataSourceElementsProperties.getSchemaSearchPath());
    }

    @Override
    public Boolean getTestWhileIdle() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getTestWhileIdle)
                .orElse(dataSourceElementsProperties.getTestWhileIdle());
    }

    @Override
    public String getValidationQuery() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getValidationQuery)
                .orElse(dataSourceElementsProperties.getValidationQuery());
    }

    @Override
    public Integer getValidationQueryTimeout() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getValidationQueryTimeout)
                .orElse(dataSourceElementsProperties.getValidationQueryTimeout());
    }

    @Override
    public String getDriverClassName() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getDriverClassName)
                .orElse(dataSourceElementsProperties.getDriverClassName());
    }

    @Override
    public Integer getInitialSize() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getInitialSize)
                .orElse(dataSourceElementsProperties.getInitialSize());
    }

    @Override
    public Integer getMaxActive() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getMaxActive)
                .orElse(dataSourceElementsProperties.getMaxActive());
    }

    @Override
    public Integer getMinIdle() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getMinIdle)
                .orElse(dataSourceElementsProperties.getMinIdle());
    }

    @Override
    public Integer getMaxIdle() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getMaxIdle)
                .orElse(dataSourceElementsProperties.getMaxIdle());
    }

    @Override
    public Boolean isRemoveAbandoned() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::isRemoveAbandoned)
                .orElse(dataSourceElementsProperties.isRemoveAbandoned());
    }

    @Override
    public Integer getRemoveAbandonedTimeout() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::getRemoveAbandonedTimeout)
                .orElse(dataSourceElementsProperties.getRemoveAbandonedTimeout());
    }

    @Override
    public Boolean isLogAbandoned() {
        return getResolvedDataSourceElementsTenant()
                .map(DataSourceElementsTenant::isLogAbandoned)
                .orElse(dataSourceElementsProperties.isLogAbandoned());

    }
}
