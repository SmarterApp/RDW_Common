package org.opentestsystem.rdw.multitenant.datasource;

import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.util.Optional;

import static org.opentestsystem.rdw.multitenant.TenantKeyResolver.NO_TENANT_KEY;

/**
 * Tenant specific {@link AbstractDynamicRoutingDataSource} defers
 * to {@link DataSourceElements} that will typically be implemented
 * as {@link DataSourceElementsResolver} for tenant specific
 * datasource configuration.
 */
public class TenantDynamicRoutingDataSource extends AbstractDynamicRoutingDataSource {

    private static final Logger logger = LoggerFactory.getLogger(TenantDynamicRoutingDataSource.class);

    private final DataSourceElements dataSourceElements;
    private final TenantKeyResolver tenantKeyResolver;

    public TenantDynamicRoutingDataSource(DataSourceElements dataSourceElements,
                                          TenantKeyResolver tenantKeyResolver) {
        this.dataSourceElements = dataSourceElements;
        this.tenantKeyResolver = tenantKeyResolver;
    }

    @Override
    protected Object determineCurrentLookupKey() {
        final String tenantKey = tenantKeyResolver.getTenantKey().orElse(NO_TENANT_KEY);

        //TODO: this is an interim use case remove for production, should throw exception
        if (tenantKey.equals(NO_TENANT_KEY)) {
            //capturing stack trace for runtime debug.
            final Exception ex = new RuntimeException("NOTE: NOT AN ACTUAL ERROR - DIAGNOSTIC ONLY - No tenantKey set");
            logger.error("NOTE: NOT AN ACTUAL ERROR - DIAGNOSTIC ONLY - No tenantKey set falling back to key {}", NO_TENANT_KEY, ex);
        }
        return tenantKey;
    }

    @Override
    protected DataSource dataSourceFactory(Object lookupKey) {
        final String tenantId = (String) lookupKey;

        logger.info("creating new tenantId [{}] dataSource for url: {} username: {} password: XXXXXXX",
                tenantId,
                dataSourceElements.getUrl(),
                dataSourceElements.getUsername());

        PoolProperties poolProperties = new PoolProperties();

        Optional.ofNullable(dataSourceElements.getUrl())
                .ifPresent(poolProperties::setUrl);
        Optional.ofNullable(dataSourceElements.getJdbcInterceptors())
                .ifPresent(poolProperties::setJdbcInterceptors);
        Optional.ofNullable(dataSourceElements.getUsername())
                .ifPresent(poolProperties::setUsername);
        Optional.ofNullable(dataSourceElements.getPassword())
                .ifPresent(poolProperties::setPassword);
        Optional.ofNullable(dataSourceElements.getTestWhileIdle())
                .ifPresent(poolProperties::setTestWhileIdle);
        Optional.ofNullable(dataSourceElements.getValidationQuery())
                .ifPresent(poolProperties::setValidationQuery);
        Optional.ofNullable(dataSourceElements.getValidationQueryTimeout())
                .ifPresent(poolProperties::setValidationQueryTimeout);
        Optional.ofNullable(dataSourceElements.getDriverClassName())
                .ifPresent(poolProperties::setDriverClassName);
        Optional.ofNullable(dataSourceElements.getInitialSize())
                .ifPresent(poolProperties::setInitialSize);
        Optional.ofNullable(dataSourceElements.getMaxActive())
                .ifPresent(poolProperties::setMaxActive);
        Optional.ofNullable(dataSourceElements.getMinIdle())
                .ifPresent(poolProperties::setMinIdle);
        Optional.ofNullable(dataSourceElements.getMaxIdle())
                .ifPresent(poolProperties::setMaxIdle);
        Optional.ofNullable(dataSourceElements.isRemoveAbandoned())
                .ifPresent(poolProperties::setRemoveAbandoned);
        Optional.ofNullable(dataSourceElements.getRemoveAbandonedTimeout())
                .ifPresent(poolProperties::setRemoveAbandonedTimeout);
        Optional.ofNullable(dataSourceElements.isLogAbandoned())
                .ifPresent(poolProperties::setLogAbandoned);

        return new org.apache.tomcat.jdbc.pool.DataSource(poolProperties);
    }
}

