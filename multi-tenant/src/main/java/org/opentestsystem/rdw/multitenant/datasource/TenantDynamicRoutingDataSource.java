package org.opentestsystem.rdw.multitenant.datasource;

import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;

import javax.sql.DataSource;
import java.util.Optional;

import static org.opentestsystem.rdw.multitenant.TenantContextHolder.DEFAULT_TENANT_ID;

/**
 * Tenant specific {@link AbstractDynamicRoutingDataSource} defers
 * to {@link TenantDataSourceOverrideResolver} for tenant specific
 * datasource url, username, and password.
 * Otherwise uses the supplied {@link DataSourceProperties}
 */
public class TenantDynamicRoutingDataSource extends AbstractDynamicRoutingDataSource {

    private static final Logger logger = LoggerFactory.getLogger(TenantDynamicRoutingDataSource.class);

    private final DataSourceElements dataSourceElements;
    private final TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver;
    private final TenantIdResolver tenantIdResolver;

    public TenantDynamicRoutingDataSource(DataSourceElements dataSourceElements,
                                          TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver,
                                          TenantIdResolver tenantIdResolver) {
        this.dataSourceElements = dataSourceElements;
        this.tenantDataSourceOverrideResolver = tenantDataSourceOverrideResolver;
        this.tenantIdResolver = tenantIdResolver;
    }

    @Override
    protected Object determineCurrentLookupKey() {
        final String tenantId = tenantIdResolver.getTenantId().orElse(DEFAULT_TENANT_ID);

        //TODO: this is an interim use case remove for production, should throw exception
        if (tenantId.equals(DEFAULT_TENANT_ID)) {
            //capturing stack trace for runtime debug.
            final Exception ex = new RuntimeException("No tenantId set");
            logger.error("No tenantId set falling back to default {}", DEFAULT_TENANT_ID, ex);
        }
        return tenantId;
    }

    @Override
    protected DataSource dataSourceFactory(Object lookupKey) {
        final String tenantId = (String) lookupKey;
        final TenantDatasourceOverride override = tenantDataSourceOverrideResolver.resolve(tenantId);

        logger.info("creating new tenantId [{}] dataSource for url: {} username: {} password: XXXXXXX", tenantId, override.getUrl(), override.getUsername());

        PoolProperties poolProperties = new PoolProperties();

        //overrides
        poolProperties.setUrl(override.getUrl());
        poolProperties.setUsername(override.getUsername());
        poolProperties.setPassword(override.getPassword());

        //shared
        Optional.ofNullable(dataSourceElements.getDriverClassName())
                .ifPresent(poolProperties::setDriverClassName);
        Optional.ofNullable(dataSourceElements.getJdbcInterceptors())
                .ifPresent(poolProperties::setJdbcInterceptors);
        Optional.ofNullable(dataSourceElements.getTestWhileIdle())
                .ifPresent(poolProperties::setTestWhileIdle);
        Optional.ofNullable(dataSourceElements.getValidationQuery())
                .ifPresent(poolProperties::setValidationQuery);
        Optional.ofNullable(dataSourceElements.getValidationQueryTimeout())
                .ifPresent(poolProperties::setValidationQueryTimeout);
        Optional.ofNullable(dataSourceElements.getDriverClassName())
                .ifPresent(poolProperties::setDriverClassName);
        Optional.ofNullable(dataSourceElements.getInitialSize())
                .ifPresent(poolProperties::setInitialSize);
        Optional.ofNullable(dataSourceElements.getMaxActive())
                .ifPresent(poolProperties::setMaxActive);
        Optional.ofNullable(dataSourceElements.getMinIdle())
                .ifPresent(poolProperties::setMinIdle);
        Optional.ofNullable(dataSourceElements.getMaxIdle())
                .ifPresent(poolProperties::setMaxIdle);

        return new org.apache.tomcat.jdbc.pool.DataSource(poolProperties);
    }
}

