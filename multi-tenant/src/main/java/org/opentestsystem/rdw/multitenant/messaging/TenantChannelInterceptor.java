package org.opentestsystem.rdw.multitenant.messaging;

import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.ChannelInterceptorAdapter;

import java.util.Optional;

import static org.opentestsystem.rdw.multitenant.TenantContextHolder.DEFAULT_TENANT_ID;

/**
 * {@link ChannelInterceptorAdapter} implementation that maps
 * an incoming request to a tenantId and places it in the
 * {@link TenantContextHolder}
 */
public class TenantChannelInterceptor extends ChannelInterceptorAdapter {

    private static final Logger logger = LoggerFactory.getLogger(TenantChannelInterceptor.class);

    private final TenantMessageRequestResolver resolver;

    public TenantChannelInterceptor(TenantMessageRequestResolver resolver) {
        this.resolver = resolver;
    }

    @Override
    public Message<?> preSend(Message<?> message, MessageChannel channel) {
        final String tenantId = resolver.resolveTenantId(message);
        //TODO: this is an interim use case remove for production, should throw exception
        if (tenantId.equals(DEFAULT_TENANT_ID)) {
            //capturing stack trace for runtime debug.
            final Exception ex = new RuntimeException("No tenantId set");
            logger.error("No tenantId set falling back to default {}", DEFAULT_TENANT_ID, ex);
        }
        logger.info("Setting setting tenantId {}", tenantId);
        TenantContextHolder.setTenantId(tenantId);
        return message;
    }

    @Override
    public void postSend(Message<?> message, MessageChannel channel, boolean sent) {
        logger.info("Setting clearing tenantId {}",
                Optional.ofNullable(TenantContextHolder.getTenantId()).orElse("NONE"));
        TenantContextHolder.clear();
    }

}
