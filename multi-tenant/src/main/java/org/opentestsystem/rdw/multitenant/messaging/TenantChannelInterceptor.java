package org.opentestsystem.rdw.multitenant.messaging;

import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.ChannelInterceptorAdapter;

import java.util.Optional;

/**
 * {@link ChannelInterceptorAdapter} implementation that maps an incoming request to a
 * tenantId and places it in the {@link TenantContextHolder}. It requires a resolver to
 * extract the tenant id from the message. Example use:<pre>
 * {@literal @}Bean
 * {@literal @}GlobalChannelInterceptor(patterns = {"Report*", "Aggregate*", "UserReport*"})
 *  public TenantChannelInterceptor getTenantChannelInterceptor(TenantMessageRequestResolver getTenantMessageRequestResolver) {
 *      return new TenantChannelInterceptor(getTenantMessageRequestResolver);
 *  }
 * </pre>
 */
public class TenantChannelInterceptor extends ChannelInterceptorAdapter {

    private static final Logger logger = LoggerFactory.getLogger(TenantChannelInterceptor.class);

    private final TenantMessageRequestResolver resolver;

    public TenantChannelInterceptor(final TenantMessageRequestResolver resolver) {
        this.resolver = resolver;
    }

    @Override
    public Message<?> preSend(Message<?> message, MessageChannel channel) {
        final Optional<String> tenantId = resolver.getTenantId(message);

        if (!tenantId.isPresent()) {
            throw new IllegalStateException("No tenant id set");
        }
        logger.debug("Setting tenantId {}", tenantId.get());
        TenantContextHolder.setTenantId(tenantId.get());
        return message;
    }

    @Override
    public void postSend(Message<?> message, MessageChannel channel, boolean sent) {
        logger.debug("Clearing tenantId {}", Optional.ofNullable(TenantContextHolder.getTenantId()).orElse("null"));
        TenantContextHolder.clear();
    }
}
