package org.opentestsystem.rdw.multitenant.task;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;

import java.util.Optional;

public class ArtClientPropertiesResolver implements ArtClientProperties {

    private static final Logger logger = LoggerFactory.getLogger(ArtClientPropertiesResolver.class);

    private final TenantKeyResolver tenantKeyResolver;
    private final ArtClientPropertiesRoot propertiesRoot;

    public ArtClientPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                       ArtClientPropertiesRoot propertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.propertiesRoot = propertiesRoot;
        logger.debug("ArtClientPropertiesResolver: {}", propertiesRoot);
    }

    @Override
    public String getGroupsOfDistrictsUrl() {
        //always root not tenant aware
        return propertiesRoot.getGroupsOfDistrictsUrl();
    }

    @Override
    public String getDistrictsUrl() {
        //always root not tenant aware
        return propertiesRoot.getDistrictsUrl();
    }

    @Override
    public String getGroupsOfSchoolsUrl() {
        //always root not tenant aware
        return propertiesRoot.getGroupsOfSchoolsUrl();
    }

    @Override
    public String getSchoolsUrl() {
        //always root not tenant aware
        return propertiesRoot.getSchoolsUrl();
    }

    @Override
    public String getStatusUrl() {
        //always root not tenant aware
        return propertiesRoot.getStatusUrl();
    }

    @Override
    public ResourceOwnerPasswordResourceDetails getOauth2() {
        return getArtClientPropertiesTenant()
                .map(ArtClientPropertiesTenant::getOauth2)
                .orElse(propertiesRoot.getOauth2());
    }

    private Optional<ArtClientPropertiesTenant> getArtClientPropertiesTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(propertiesRoot.getTenants().get(k)));
    }
}
