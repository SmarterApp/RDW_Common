package org.opentestsystem.rdw.multitenant.task;

import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;

import java.util.Optional;

public class ImportServiceClientPropertiesResolver implements ImportServiceClientProperties {

    private static final Logger logger = LoggerFactory.getLogger(ArtClientPropertiesResolver.class);

    private final TenantKeyResolver tenantKeyResolver;
    private final ImportServiceClientPropertiesRoot propertiesRoot;

    public ImportServiceClientPropertiesResolver(TenantKeyResolver tenantKeyResolver, ImportServiceClientPropertiesRoot propertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.propertiesRoot = propertiesRoot;
    }

    @Override
    public String getStatusUrl() {
        //always root not tenant aware
        return propertiesRoot.getStatusUrl();
    }

    @Override
    public String getOrganizationsImportsUrl() {
        //always root not tenant aware
        return propertiesRoot.getOrganizationsImportsUrl();
    }

    @Override
    public ResourceOwnerPasswordResourceDetails getOauth2() {
        return getImportServiceClientPropertiesTenant()
                .map(ImportServiceClientPropertiesTenant::getOauth2)
                .map(tenantOauth2 -> TaskTenantUtil
                        .tenantOverrideOauth2(tenantOauth2,
                                propertiesRoot.getOauth2()))
                .orElse(propertiesRoot.getOauth2());
    }

    public ImportServiceClientPropertiesRoot getPropertiesRoot() {
        return propertiesRoot;
    }

    private Optional<ImportServiceClientPropertiesTenant> getImportServiceClientPropertiesTenant() {
        return tenantKeyResolver.getTenantKey()
                .flatMap(k -> Optional.ofNullable(propertiesRoot.getTenants().get(k)));
    }
}
