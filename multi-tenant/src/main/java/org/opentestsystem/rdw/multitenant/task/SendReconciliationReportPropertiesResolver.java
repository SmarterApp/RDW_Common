package org.opentestsystem.rdw.multitenant.task;

import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;

public class SendReconciliationReportPropertiesResolver implements SendReconciliationReportProperties {

    private static final Logger logger = LoggerFactory.getLogger(SendReconciliationReportPropertiesResolver.class);

    private final TenantKeyResolver tenantKeyResolver;
    private final SendReconciliationReportPropertiesRoot propertiesRoot;

    public SendReconciliationReportPropertiesResolver(TenantKeyResolver tenantKeyResolver, SendReconciliationReportPropertiesRoot propertiesRoot) {
        this.tenantKeyResolver = tenantKeyResolver;
        this.propertiesRoot = propertiesRoot;
    }

    @Override
    public List<ArchivePropertiesTenant> getArchives() {
        return getSendReconciliationReportPropertiesTenant()
                .map(SendReconciliationReportPropertiesTenant::getArchives)
                .orElse(propertiesRoot.getArchives());
    }

    @Override
    public Boolean isLog() {
        return getSendReconciliationReportPropertiesTenant()
                .map(SendReconciliationReportPropertiesTenant::isLog)
                .orElse(propertiesRoot.isLog());
    }

    @Override
    public String getQuery() {
        return getSendReconciliationReportPropertiesTenant()
                .map(SendReconciliationReportPropertiesTenant::getQuery)
                .orElse(propertiesRoot.getQuery());
    }

    public SendReconciliationReportPropertiesRoot getPropertiesRoot() {
        return propertiesRoot;
    }

    private Optional<SendReconciliationReportPropertiesTenant> getSendReconciliationReportPropertiesTenant() {
        final Optional<String> tenantKey = tenantKeyResolver.getTenantKey();
        return tenantKey
                .flatMap(k -> Optional.ofNullable(propertiesRoot.getTenants().get(k)));
    }
}
