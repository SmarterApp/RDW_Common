package org.opentestsystem.rdw.multitenant;

import org.junit.Test;

import javax.sql.DataSource;

import static org.mockito.Mockito.*;

public class AbstractDynamicRoutingDataSourceTest {

    DataSource dataSourceA = mock(DataSource.class);
    DataSource dataSourceB = mock(DataSource.class);

    AbstractDynamicRoutingDataSource dynamicRoutingDataSource = new AbstractDynamicRoutingDataSource() {

        @Override
        protected Object determineCurrentLookupKey() {
            return TenantContextHolder.getTenantId();
        }

        @Override
        protected DataSource dataSourceFactory(Object lookupKey) {
            final String tenantId = (String) lookupKey;
            if (tenantId.equals("A")) {
                return dataSourceA;
            } else if (tenantId.equals("B")) {
                return dataSourceB;
            } else {
                throw new RuntimeException("unexpected state should only be A or B");
            }
        }
    };

    @Test
    public void testDynamicDatasourceA() throws Exception {
        TenantContextHolder.setTenantId("A");
        dynamicRoutingDataSource.getConnection();
        verify(dataSourceA).getConnection();
        verify(dataSourceB, times(0)).getConnection();
        reset(dataSourceA);
        reset(dataSourceB);
        TenantContextHolder.clear();
    }

    @Test
    public void testDynamicDatasourceB() throws Exception {
        TenantContextHolder.setTenantId("B");
        dynamicRoutingDataSource.getConnection();
        verify(dataSourceB).getConnection();
        verify(dataSourceA, times(0)).getConnection();
        reset(dataSourceB);
        reset(dataSourceA);
        TenantContextHolder.clear();
    }

}
