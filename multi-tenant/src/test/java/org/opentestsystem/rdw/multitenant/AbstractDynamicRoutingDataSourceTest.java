package org.opentestsystem.rdw.multitenant;

import org.junit.Test;

import javax.sql.DataSource;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;

public class AbstractDynamicRoutingDataSourceTest {

    private final DataSource dataSourceA = mock(DataSource.class);
    private final DataSource dataSourceB = mock(DataSource.class);

    private AbstractDynamicRoutingDataSource dynamicRoutingDataSource = new AbstractDynamicRoutingDataSource() {

        @Override
        protected Object determineCurrentLookupKey() {
            return TenantContextHolder.getTenantId();
        }

        @Override
        protected DataSource dataSourceFactory(Object lookupKey) {
            final String tenantId = (String) lookupKey;
            if (tenantId.equals("A")) {
                return dataSourceA;
            } else if (tenantId.equals("B")) {
                return dataSourceB;
            } else {
                throw new RuntimeException("unexpected state should only be A or B");
            }
        }
    };

    @Test
    public void testDynamicDatasourceA() throws Exception {
        TenantContextHolder.setTenantId("A");
        dynamicRoutingDataSource.getConnection();
        verify(dataSourceA).getConnection();
        verify(dataSourceB, never()).getConnection();
        reset(dataSourceA);
        reset(dataSourceB);
        TenantContextHolder.clear();
    }

    @Test
    public void testDynamicDatasourceB() throws Exception {
        TenantContextHolder.setTenantId("B");
        dynamicRoutingDataSource.getConnection("username", "password");
        verify(dataSourceB).getConnection("username", "password");
        verify(dataSourceA, never()).getConnection(anyString(), anyString());
        reset(dataSourceB);
        reset(dataSourceA);
        TenantContextHolder.clear();
    }

    @Test(expected = RuntimeException.class)
    public void itShouldPropagateFactoryException() throws Exception {
        TenantContextHolder.setTenantId("C");
        dynamicRoutingDataSource.getConnection();
    }

}
