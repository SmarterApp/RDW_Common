package org.opentestsystem.rdw.multitenant;

import org.apache.tomcat.jdbc.pool.DataSource;
import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.multitenant.TenantDynamicRoutingDataSource.DEFAULT_TENANT_ID;

public class TenantDynamicRoutingDataSourceTest {

    private TenantDataSourceOverrideResolver mockTenantDataSourceOverrideResolver;
    private TenantDynamicRoutingDataSource tenantDataSource;
    private String dataSourceUrl;
    private DataSourceElements dataSourceElements;

    @Before
    public void createDataSource() {
        DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("mockdb");
        urlParts.setHosts("localhost");
        urlParts.setProperties("useSSL=false");
        urlParts.setProtocol("jdbc:mysql:");

        dataSourceUrl = urlParts.getProtocol()
                + "//" + urlParts.getHosts()
                + "/" + urlParts.getDatabase()
                + "?" + urlParts.getProperties();

        dataSourceElements = new DataSourceElements();
        dataSourceElements.setUrl(dataSourceUrl);
        dataSourceElements.setUrlParts(new DataSourceUrlParts());
        dataSourceElements.setJdbcInterceptors("QueryTimeoutInterceptor(queryTimeout=30)");
        dataSourceElements.setUsername("mock-user");
        dataSourceElements.setPassword("mock-password");
        dataSourceElements.setTestWhileIdle(false);
        dataSourceElements.setValidationQuery("SELECT 1");
        dataSourceElements.setValidationQueryTimeout(10000);
        dataSourceElements.setDriverClassName("com.mysql.jdbc.Driver");
        dataSourceElements.setInitialSize(0);
        dataSourceElements.setMaxActive(1);
        dataSourceElements.setMinIdle(0);
        dataSourceElements.setMaxIdle(1);

        mockTenantDataSourceOverrideResolver = mock(TenantDataSourceOverrideResolver.class);
        tenantDataSource = new TenantDynamicRoutingDataSource(dataSourceElements, mockTenantDataSourceOverrideResolver);
    }

    @Test
    public void itShouldDetermineLookupKeyFromContext() {
        TenantContextHolder.setTenantId("tenant");
        assertThat(tenantDataSource.determineCurrentLookupKey()).isEqualTo("tenant");
        TenantContextHolder.clear();
    }

    @Test
    public void itShouldUseDefaultTenantIfNoneSet() {
        TenantContextHolder.clear();
        assertThat(tenantDataSource.determineCurrentLookupKey()).isEqualTo(DEFAULT_TENANT_ID);
    }

    @Test
    public void itShouldCreateDataSource() {
        when(mockTenantDataSourceOverrideResolver.resolve("tenant"))
                .thenReturn(new TenantDatasourceOverride(dataSourceElements.getUsername(), dataSourceElements.getPassword(), dataSourceUrl));
        DataSource dataSource = (DataSource) tenantDataSource.dataSourceFactory("tenant");
        assertThat(dataSource).isNotNull();
        assertThat(dataSource.getPoolProperties()
                .getUrl()).isEqualTo(dataSourceUrl);
        assertThat(dataSource.getPoolProperties()
                .getJdbcInterceptors()).isEqualTo(dataSourceElements.getJdbcInterceptors());
        assertThat(dataSource.getPoolProperties()
                .getUsername()).isEqualTo(dataSourceElements.getUsername());
        assertThat(dataSource.getPoolProperties()
                .getPassword()).isEqualTo(dataSourceElements.getPassword());
        assertThat(dataSource.getPoolProperties()
                .isTestWhileIdle()).isEqualTo(dataSourceElements.getTestWhileIdle());
        assertThat(dataSource.getPoolProperties()
                .getValidationQuery()).isEqualTo(dataSourceElements.getValidationQuery());
        assertThat(dataSource.getPoolProperties()
                .getDriverClassName()).isEqualTo(dataSourceElements.getDriverClassName());
        assertThat(dataSource.getPoolProperties()
                .getInitialSize()).isEqualTo(dataSourceElements.getInitialSize());
        assertThat(dataSource.getPoolProperties()
                .getMaxActive()).isEqualTo(dataSourceElements.getMaxActive());
        assertThat(dataSource.getPoolProperties()
                .getMinIdle()).isEqualTo(dataSourceElements.getMinIdle());
        assertThat(dataSource.getPoolProperties()
                .getMaxIdle()).isEqualTo(dataSourceElements.getMaxIdle());
    }
}
