package org.opentestsystem.rdw.multitenant;

import org.junit.Before;
import org.junit.Test;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.multitenant.TenantDynamicRoutingDataSource.DEFAULT_TENANT_ID;

public class TenantDynamicRoutingDataSourceTest {

    private DataSourceBuilder dataSourceBuilder;
    private DataSourceProperties dataSourceProperties;
    private TenantDataSourceOverrideResolver tenantDataSourceOverrideResolver;
    private TenantDynamicRoutingDataSource tenantDataSource;

    @Before
    public void createDataSource() {
        dataSourceBuilder = mock(DataSourceBuilder.class);
        when(dataSourceBuilder.username(anyString())).thenReturn(dataSourceBuilder);
        when(dataSourceBuilder.password(anyString())).thenReturn(dataSourceBuilder);
        when(dataSourceBuilder.url(anyString())).thenReturn(dataSourceBuilder);
        dataSourceProperties = mock(DataSourceProperties.class);
        when(dataSourceProperties.initializeDataSourceBuilder()).thenReturn(dataSourceBuilder);

        tenantDataSourceOverrideResolver = mock(TenantDataSourceOverrideResolver.class);

        tenantDataSource = new TenantDynamicRoutingDataSource(dataSourceProperties, tenantDataSourceOverrideResolver);
    }

    @Test
    public void itShouldDetermineLookupKeyFromContext() {
        TenantContextHolder.setTenantId("tenant");
        assertThat(tenantDataSource.determineCurrentLookupKey()).isEqualTo("tenant");
        TenantContextHolder.clear();
    }

    @Test
    public void itShouldUseDefaultTenantIfNoneSet() {
        TenantContextHolder.clear();
        assertThat(tenantDataSource.determineCurrentLookupKey()).isEqualTo(DEFAULT_TENANT_ID);
    }

    @Test
    public void itShouldInitializeDataSource() {
        when(tenantDataSourceOverrideResolver.resolve("tenant"))
                .thenReturn(new TenantDatasourceOverride("username", "password", "url"));
        tenantDataSource.dataSourceFactory("tenant");
        verify(dataSourceBuilder).username("username");
        verify(dataSourceBuilder).password("password");
        verify(dataSourceBuilder).url("url");
    }
}
