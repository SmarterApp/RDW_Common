package org.opentestsystem.rdw.multitenant;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class TenantKeyResolverTest {

    @Autowired
    private TenantKeyResolver tenantKeyResolver;

    @Test
    public void testResolveCa() {
        TenantContextHolder.setTenantId("CA");
        Optional<String> tenantKey = tenantKeyResolver.getTenantKey();
        TenantContextHolder.clear();
        assertThat(tenantKey).contains("CA");
    }

    @Test
    public void testResolveNv() {
        TenantContextHolder.setTenantId("NV");
        Optional<String> tenantKey = tenantKeyResolver.getTenantKey();
        TenantContextHolder.clear();
        assertThat(tenantKey).contains("NVX");
    }

    @Test
    public void testResolveBogus() {
        TenantContextHolder.setTenantId("FOO");
        Optional<String> tenantKey = tenantKeyResolver.getTenantKey();
        TenantContextHolder.clear();
        assertThat(tenantKey).isEmpty();
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties, TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }
    }
}
