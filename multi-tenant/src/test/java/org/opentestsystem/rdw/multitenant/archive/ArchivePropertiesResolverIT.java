package org.opentestsystem.rdw.multitenant.archive;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv", "tenant"})
@EnableConfigurationProperties
public class ArchivePropertiesResolverIT {

    @Autowired
    ArchivePropertiesRoot archivePropertiesRoot;

    @Autowired
    ArchivePropertiesResolver archivePropertiesResolver;

    @Test
    public void archivePropertiesRootShouldLoad() {
        assertThat(archivePropertiesRoot.getUriRoot())
                .isNull();
        assertThat(archivePropertiesRoot.getS3AccessKey())
                .isEqualTo("testkey");
        assertThat(archivePropertiesRoot.getS3SecretKey())
                .isEqualTo("testsecret");
        assertThat(archivePropertiesRoot.getS3RegionStatic())
                .isEqualTo("us-west-2");
        assertThat(archivePropertiesRoot.getS3Sse())
                .isEqualTo("testsse");
    }

    @Test
    public void testResolverCa() {
        TenantContextHolder.setTenantId("CA");
        assertThat(archivePropertiesResolver.getUriRoot())
                .isEqualTo("s3://ca-archive");
        assertThat(archivePropertiesResolver.getPathPrefix())
                .isEqualTo("/ca");
        assertThat(archivePropertiesResolver.getS3AccessKey())
                .isEqualTo("testkey");
        assertThat(archivePropertiesResolver.getS3SecretKey())
                .isEqualTo("testsecret");
        assertThat(archivePropertiesResolver.getS3RegionStatic())
                .isEqualTo("us-west-2");
        assertThat(archivePropertiesResolver.getS3Sse())
                .isEqualTo("testsse");
        assertThat(archivePropertiesResolver.isConfiguredS3())
                .isEqualTo(true);
        assertThat(archivePropertiesResolver.isConfiguredFile())
                .isEqualTo(false);
        TenantContextHolder.clear();
    }

    @Test
    public void testResolverNv() {
        TenantContextHolder.setTenantId("NV");
        assertThat(archivePropertiesResolver.getUriRoot())
                .isEqualTo("file://tmp");
        assertThat(archivePropertiesResolver.getPathPrefix())
                .isEqualTo("/nv");
        assertThat(archivePropertiesResolver.isConfiguredS3())
                .isEqualTo(false);
        assertThat(archivePropertiesResolver.isConfiguredFile())
                .isEqualTo(true);
        TenantContextHolder.clear();
    }


    @Configuration
    public static class Config {

        @Bean
        TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        @ConfigurationProperties(prefix = "tenant-properties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties, TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties(prefix = "archive")
        ArchivePropertiesRoot archivePropertiesRoot() {
            return new ArchivePropertiesRoot();
        }

        @Bean
        ArchivePropertiesResolver archivePropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                            ArchivePropertiesRoot archivePropertiesRoot) {
            return new ArchivePropertiesResolver(tenantKeyResolver, archivePropertiesRoot);
        }

    }
}
