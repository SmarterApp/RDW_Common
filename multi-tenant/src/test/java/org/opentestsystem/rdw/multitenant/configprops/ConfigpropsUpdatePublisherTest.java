package org.opentestsystem.rdw.multitenant.configprops;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.cloud.context.environment.EnvironmentChangeEvent;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class ConfigpropsUpdatePublisherTest {

    //class under test
    private ConfigpropsUpdatePublisher configpropsUpdatePublisher;

    private String serviceName;
    private ConfigpropsProcessor configpropsProcessor;
    private ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint;
    private ObjectMapper objectMapper;

    @Before
    public void setUp() {
        serviceName = "test-service";
        configpropsProcessor = mock(ConfigpropsProcessor.class, Mockito.RETURNS_DEEP_STUBS);
        configurationPropertiesReportEndpoint = mock(ConfigurationPropertiesReportEndpoint.class);
        objectMapper = new ObjectMapper();
        configpropsUpdatePublisher = new ConfigpropsUpdatePublisher(serviceName, configpropsProcessor, configurationPropertiesReportEndpoint, objectMapper);
        when(configurationPropertiesReportEndpoint.invoke()).thenReturn(ImmutableMap.of("tenant", Tenant.builder().id("AA").key("AA").build()));
    }

    @Test
    public void environmentChangeEventPublish() {
        configpropsUpdatePublisher.environmentChangeEventPublish(new EnvironmentChangeEvent(ImmutableSet.of("TEST_KEY")));
        verify(configurationPropertiesReportEndpoint).invoke();
        verify(configpropsProcessor.configpropsUpdateOutput()).send(any());
    }

    @Test
    public void scheduledPublish() {
        configpropsUpdatePublisher.scheduledPublish();
        verify(configurationPropertiesReportEndpoint).invoke();
        verify(configpropsProcessor.configpropsUpdateOutput()).send(any());
    }
}