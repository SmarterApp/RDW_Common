package org.opentestsystem.rdw.multitenant.configprops;

import org.junit.Before;
import org.junit.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cloud.context.environment.EnvironmentChangeEvent;

import java.util.Arrays;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class ConfigurationChangeCacheClearerTest {
    //class under test
    private ConfigurationChangeCacheClearer configurationChangeCacheClearer;

    private CacheManager cacheManager;
    private Cache cacheOne, cacheTwo;
    private EnvironmentChangeEvent event;

    @Before
    public void setUp() {
        cacheManager = mock(CacheManager.class);
        cacheOne = mock(Cache.class);
        cacheTwo = mock(Cache.class);
        event = mock(EnvironmentChangeEvent.class);

        configurationChangeCacheClearer = new ConfigurationChangeCacheClearer(cacheManager);

        when(cacheManager.getCacheNames()).thenReturn(Arrays.asList("testOne", "missing", "testTwo"));
        when(cacheManager.getCache("testOne")).thenReturn(cacheOne);
        when(cacheManager.getCache("missing")).thenReturn(null);
        when(cacheManager.getCache("testTwo")).thenReturn(cacheTwo);
    }

    @Test
    public void environmentChangeEventPublish() {
        configurationChangeCacheClearer.environmentChangeEventClearCaches(event);
        verify(cacheManager, times(3)).getCache(anyString());
        verify(cacheOne).clear();
        verify(cacheTwo).clear();
    }
}