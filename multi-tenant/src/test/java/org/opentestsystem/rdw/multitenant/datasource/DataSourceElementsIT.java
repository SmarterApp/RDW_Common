package org.opentestsystem.rdw.multitenant.datasource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class DataSourceElementsIT {

    @Autowired
    DataSourceElementsProperties dataSourceElementsProperties;

    @Autowired
    DataSourceElementsResolver dataSourceElementsResolver;

    @Test
    public void underlyingDataSourceElementsPropertiesShouldLoad() {
        assertThat(dataSourceElementsProperties)
                .isNotNull();
        assertThat(dataSourceElementsProperties.getUrl())
                .isEqualTo("jdbc:mysql://localhost:3306/reporting?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&rewriteBatchedStatements=true&connectTimeout=10000&socketTimeout=40000");
        assertThat(dataSourceElementsProperties.getUsername())
                .isEqualTo("root");
        assertThat(dataSourceElementsProperties.getTenants().size())
                .isEqualTo(2);
    }

    @Test
    public void testDataSourceElementsResolverToTenantCa() {
        TenantContextHolder.setTenantId("CA");
        assertThat(dataSourceElementsResolver.getUrl())
                .isEqualTo("jdbc:mysql://localhost:3306/tenant_ca?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&rewriteBatchedStatements=true&connectTimeout=10000&socketTimeout=40000");
        assertThat(dataSourceElementsResolver.getUsername())
                .isEqualTo("tenant_ca_user");
        assertThat(dataSourceElementsResolver.getPassword())
                .isEqualTo("tenant_ca_password");
        assertThat(dataSourceElementsResolver.getSchemaSearchPath())
                .isEqualTo("ca_schema");
        assertThat(dataSourceElementsResolver.getTestWhileIdle())
                .isEqualTo(true);
        assertThat(dataSourceElementsResolver.getValidationQuery())
                .isEqualTo("SELECT 1");
        assertThat(dataSourceElementsResolver.getValidationInterval())
                .isEqualTo(35000);
        assertThat(dataSourceElementsResolver.getDriverClassName())
                .isEqualTo("com.mysql.jdbc.Driver");
        assertThat(dataSourceElementsResolver.getInitialSize())
                .isEqualTo(4);
        assertThat(dataSourceElementsResolver.getMaxActive())
                .isEqualTo(10);
        assertThat(dataSourceElementsResolver.getMinIdle())
                .isEqualTo(4);
        assertThat(dataSourceElementsResolver.getMaxIdle())
                .isEqualTo(10);
        assertThat(dataSourceElementsResolver.isRemoveAbandoned())
                .isEqualTo(false);
        assertThat(dataSourceElementsResolver.getRemoveAbandonedTimeout())
                .isEqualTo(60);
        assertThat(dataSourceElementsResolver.isLogAbandoned())
                .isEqualTo(false);

        TenantContextHolder.clear();
    }

    @Test
    public void testDataSourceElementsResolverToTenantNv() {
        TenantContextHolder.setTenantId("NV");
        assertThat(dataSourceElementsResolver.getUrl())
                .isEqualTo("jdbc:mysql://localhost:3306/tenant_nv?useSSL=false&useLegacyDatetimeCode=false&characterEncoding=utf8&rewriteBatchedStatements=true&connectTimeout=10000&socketTimeout=40000");
        assertThat(dataSourceElementsResolver.getUsername())
                .isEqualTo("tenant_nv_user");
        assertThat(dataSourceElementsResolver.getPassword())
                .isEqualTo("tenant_nv_password");
        assertThat(dataSourceElementsResolver.getTestWhileIdle())
                .isEqualTo(true);
        assertThat(dataSourceElementsResolver.getValidationQuery())
                .isEqualTo("SELECT 1");
        assertThat(dataSourceElementsResolver.getValidationInterval())
                .isEqualTo(35000);
        assertThat(dataSourceElementsResolver.getDriverClassName())
                .isEqualTo("com.mysql.jdbc.Driver");
        assertThat(dataSourceElementsResolver.getInitialSize())
                .isEqualTo(4);
        assertThat(dataSourceElementsResolver.getMaxActive())
                .isEqualTo(10);
        assertThat(dataSourceElementsResolver.getMinIdle())
                .isEqualTo(4);
        assertThat(dataSourceElementsResolver.getMaxIdle())
                .isEqualTo(10);
        TenantContextHolder.clear();
    }

    @Configuration
    public static class Config {
        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties, TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties(prefix = "spring.datasource")
        public DataSourceElementsProperties dataSourceElementsProperties() {
            return new DataSourceElementsProperties();
        }

        @Bean
        public DataSourceElementsResolver dataSourceElementsResolver(TenantKeyResolver tenantKeyResolver,
                                                                     DataSourceElementsProperties dataSourceElementsProperties) {
            return new DataSourceElementsResolver(tenantKeyResolver, dataSourceElementsProperties);
        }
    }

}
