package org.opentestsystem.rdw.multitenant.datasource;

import org.apache.tomcat.jdbc.pool.DataSource;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import java.util.Collections;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

public class TenantDynamicRoutingDataSourceTest {

    private TenantDynamicRoutingDataSource tenantDataSource;
    private String dataSourceUrl;
    //using the tenant concrete impl for testing instead of mock
    private DataSourceElementsTenant dataSourceElements;

    @Before
    public void createDataSource() {
        DataSourceUrlParts urlParts = new DataSourceUrlParts();
        urlParts.setDatabase("mockdb");
        urlParts.setHosts("localhost");
        urlParts.setProperties("useSSL=false");
        urlParts.setProtocol("jdbc:mysql:");

        dataSourceUrl = urlParts.getProtocol()
                + "//" + urlParts.getHosts()
                + "/" + urlParts.getDatabase()
                + "?" + urlParts.getProperties();

        dataSourceElements = new DataSourceElementsTenant();
        dataSourceElements.setUrl(dataSourceUrl);
        dataSourceElements.setUrlParts(new DataSourceUrlParts());
        dataSourceElements.setUsername("mock-user");
        dataSourceElements.setPassword("mock-password");
        dataSourceElements.setTestWhileIdle(false);
        dataSourceElements.setValidationQuery("SELECT 1");
        dataSourceElements.setValidationInterval(35000);
        dataSourceElements.setDriverClassName("com.mysql.jdbc.Driver");
        dataSourceElements.setInitialSize(0);
        dataSourceElements.setMaxActive(1);
        dataSourceElements.setMinIdle(0);
        dataSourceElements.setMaxIdle(1);

        TenantIdResolver tenantIdResolver = () -> Optional.ofNullable(TenantContextHolder.getTenantId());

        TenantProperties tenantProperties = new TenantProperties();
        Tenant tenant = Tenant.builder()
                .id("tenant")
                .key("tenant")
                .name("tenant")
                .build();
        tenantProperties.setTenants(Collections.singletonMap(tenant.getId(), tenant));
        TenantKeyResolver tenantKeyResolver = new TenantKeyResolver(tenantProperties, tenantIdResolver);

        tenantDataSource = new TenantDynamicRoutingDataSource(dataSourceElements, tenantKeyResolver);
    }

    @Test
    public void itShouldDetermineLookupKeyFromContext() {
        TenantContextHolder.setTenantId("tenant");
        assertThat(tenantDataSource.determineCurrentLookupKey()).isEqualTo("tenant");
        TenantContextHolder.clear();
    }

    @Test(expected = IllegalStateException.class)
    public void itShouldThrowIfNoTenantSet() {
        TenantContextHolder.clear();
        tenantDataSource.determineCurrentLookupKey();
    }

    @Test
    public void itShouldCreateDataSource() {
        DataSource dataSource = (DataSource) tenantDataSource.dataSourceFactory("tenant");
        assertThat(dataSource).isNotNull();
        assertThat(dataSource.getPoolProperties()
                .getUrl()).isEqualTo(dataSourceUrl);
        assertThat(dataSource.getPoolProperties()
                .getUsername()).isEqualTo(dataSourceElements.getUsername());
        assertThat(dataSource.getPoolProperties()
                .getPassword()).isEqualTo(dataSourceElements.getPassword());
        assertThat(dataSource.getPoolProperties()
                .isTestWhileIdle()).isEqualTo(dataSourceElements.getTestWhileIdle());
        assertThat(dataSource.getPoolProperties()
                .getValidationQuery()).isEqualTo(dataSourceElements.getValidationQuery());
        assertThat(dataSource.getPoolProperties()
                .getDriverClassName()).isEqualTo(dataSourceElements.getDriverClassName());
        assertThat(dataSource.getPoolProperties()
                .getInitialSize()).isEqualTo(dataSourceElements.getInitialSize());
        assertThat(dataSource.getPoolProperties()
                .getMaxActive()).isEqualTo(dataSourceElements.getMaxActive());
        assertThat(dataSource.getPoolProperties()
                .getMinIdle()).isEqualTo(dataSourceElements.getMinIdle());
        assertThat(dataSource.getPoolProperties()
                .getMaxIdle()).isEqualTo(dataSourceElements.getMaxIdle());
    }
}
