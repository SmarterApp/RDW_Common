package org.opentestsystem.rdw.multitenant.messaging;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.cloud.stream.test.binder.MessageCollector;
import org.springframework.context.annotation.Bean;
import org.springframework.integration.annotation.Transformer;
import org.springframework.integration.config.GlobalChannelInterceptor;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.HashMap;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class TenantChannelInterceptorIT {

    @Autowired
    private Processor processor;

    @Autowired
    private MessageCollector messageCollector;

    @Test
    @SuppressWarnings("unchecked")
    public void testInterceptor() {
        HashMap<String, Object> headers = new HashMap();
        headers.put("tenantId", "TEST_TENANT");
        Message<String> message = MessageBuilder.createMessage("hello", new MessageHeaders(headers));

        //assert context empty at start
        assertThat(TenantContextHolder.getTenantId()).isNull();

        processor.input().send(message);
        Message<String> received = (Message<String>) messageCollector.forChannel(processor.output()).poll();
        assertThat(received.getPayload()).isEqualTo("hello TEST_TENANT");

        //assert context empty at completion
        assertThat(TenantContextHolder.getTenantId()).isNull();
    }

    @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
    @EnableBinding(Processor.class)
    public static class MyProcessor {

        @Autowired
        private Processor channels;

        @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)
        public String transform(String in) {
            String tenantId = Optional.ofNullable(TenantContextHolder.getTenantId()).orElse("None");
            return in + " " + tenantId;
        }

        @Bean
        @GlobalChannelInterceptor(patterns = "*")
        public TenantChannelInterceptor getTenantChannelInterceptor() {
            return new TenantChannelInterceptor(message -> (String) message.getHeaders().get("tenantId"));
        }
    }
}
