package org.opentestsystem.rdw.multitenant.task;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class ArtClientPropertiesResolverTest {

    @Autowired
    private ArtClientPropertiesResolver artClientPropertiesResolver;

    @Test
    public void caShouldResolveOverride() {
        TenantContextHolder.setTenantId("CA");
        assertThat(artClientPropertiesResolver.getGroupsOfDistrictsUrl()).contains("https://art-deployment.sbtds.org/rest/groupofdistrict?stateAbbreviation={state}&pageSize=1000");
        assertThat(artClientPropertiesResolver.getDistrictsUrl()).contains("https://art-deployment.sbtds.org/rest/district?stateAbbreviation={state}&pageSize=5000");
        assertThat(artClientPropertiesResolver.getGroupsOfSchoolsUrl()).contains("https://art-deployment.sbtds.org/rest/groupofinstitution?stateAbbreviation={state}&pageSize=1000");
        assertThat(artClientPropertiesResolver.getSchoolsUrl()).isEmpty();
        assertThat(artClientPropertiesResolver.getStatusUrl()).contains("https://art-deployment.sbtds.org/rest/status");
        assertThat(artClientPropertiesResolver.getOauth2().getAccessTokenUri()).contains("https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac");
        assertThat(artClientPropertiesResolver.getOauth2().getClientId()).contains("sbacdw");
        assertThat(artClientPropertiesResolver.getOauth2().getClientSecret()).isEmpty();
        assertThat(artClientPropertiesResolver.getOauth2().getUsername()).contains("ca.user@example.com");
        assertThat(artClientPropertiesResolver.getOauth2().getPassword()).contains("caPwd!");
        TenantContextHolder.clear();
    }

    @Test
    public void nvShouldResolveDefaults() {
        TenantContextHolder.setTenantId("NV");
        assertThat(artClientPropertiesResolver.getGroupsOfDistrictsUrl()).contains("https://art-deployment.sbtds.org/rest/groupofdistrict?stateAbbreviation={state}&pageSize=1000");
        assertThat(artClientPropertiesResolver.getDistrictsUrl()).contains("https://art-deployment.sbtds.org/rest/district?stateAbbreviation={state}&pageSize=5000");
        assertThat(artClientPropertiesResolver.getGroupsOfSchoolsUrl()).contains("https://art-deployment.sbtds.org/rest/groupofinstitution?stateAbbreviation={state}&pageSize=1000");
        assertThat(artClientPropertiesResolver.getSchoolsUrl()).isEmpty();
        assertThat(artClientPropertiesResolver.getStatusUrl()).contains("https://art-deployment.sbtds.org/rest/status");
        assertThat(artClientPropertiesResolver.getOauth2().getAccessTokenUri()).contains("https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac");
        assertThat(artClientPropertiesResolver.getOauth2().getClientId()).contains("sbacdw");
        assertThat(artClientPropertiesResolver.getOauth2().getClientSecret()).isEmpty();
        assertThat(artClientPropertiesResolver.getOauth2().getUsername()).contains("prime.user@example.com");
        assertThat(artClientPropertiesResolver.getOauth2().getPassword()).isEmpty();
        TenantContextHolder.clear();
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                            TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties("task-update-organizations-art-client")
        ArtClientPropertiesRoot artClientPropertiesRoot() {
            return new ArtClientPropertiesRoot();
        }

        @Bean
        ArtClientPropertiesResolver artClientPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                ArtClientPropertiesRoot artClientPropertiesRoot) {
            return new ArtClientPropertiesResolver(tenantKeyResolver, artClientPropertiesRoot);
        }

    }
}
