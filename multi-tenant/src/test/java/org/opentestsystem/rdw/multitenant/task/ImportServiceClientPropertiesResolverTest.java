package org.opentestsystem.rdw.multitenant.task;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class ImportServiceClientPropertiesResolverTest {

    @Autowired
    ImportServiceClientPropertiesResolver importServiceClientPropertiesResolver;

    @Test
    public void caShouldResolveOverride() {
        TenantContextHolder.setTenantId("CA");
        assertThat(importServiceClientPropertiesResolver.getOrganizationsImportsUrl()).contains("http://localhost:8080/organizations/imports");
        assertThat(importServiceClientPropertiesResolver.getStatusUrl()).contains("http://localhost:8081/status");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getAccessTokenUri()).contains("https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getClientId()).contains("sbacdw");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getClientSecret()).isEmpty();
        assertThat(importServiceClientPropertiesResolver.getOauth2().getUsername()).contains("ca.user@example.com");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getPassword()).contains("caPwd!");
        TenantContextHolder.clear();
    }

    @Test
    public void nvShouldResolveDefaults() {
        TenantContextHolder.setTenantId("NV");
        assertThat(importServiceClientPropertiesResolver.getOrganizationsImportsUrl()).contains("http://localhost:8080/organizations/imports");
        assertThat(importServiceClientPropertiesResolver.getStatusUrl()).contains("http://localhost:8081/status");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getAccessTokenUri()).contains("https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getClientId()).contains("sbacdw");
        assertThat(importServiceClientPropertiesResolver.getOauth2().getClientSecret()).isEmpty();
        assertThat(importServiceClientPropertiesResolver.getOauth2().getUsername()).isNull();
        assertThat(importServiceClientPropertiesResolver.getOauth2().getPassword()).isNull();
        TenantContextHolder.clear();
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                            TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties("task-update-organizations-import-service-client")
        ImportServiceClientPropertiesRoot importServiceClientPropertiesRoot() {
            return new ImportServiceClientPropertiesRoot();
        }

        @Bean
        ImportServiceClientPropertiesResolver importServiceClientPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                                    ImportServiceClientPropertiesRoot importServiceClientPropertiesRoot) {
            return new ImportServiceClientPropertiesResolver(tenantKeyResolver, importServiceClientPropertiesRoot);
        }

    }
}
