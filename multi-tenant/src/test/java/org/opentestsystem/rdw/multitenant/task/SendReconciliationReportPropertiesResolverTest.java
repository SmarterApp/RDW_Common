package org.opentestsystem.rdw.multitenant.task;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class SendReconciliationReportPropertiesResolverTest {

    @Autowired
    private SendReconciliationReportPropertiesResolver sendReconciliationReportPropertiesResolver;

    @Test
    public void tenantCa() {
        TenantContextHolder.setTenantId("CA");
        assertThat(sendReconciliationReportPropertiesResolver.isLog()).isFalse();
        assertThat(sendReconciliationReportPropertiesResolver.getQuery()).contains("status=PROCESSED&after=-PT24H");
        assertThat(sendReconciliationReportPropertiesResolver.getArchives().size()).isEqualTo(2);
        Optional<ArchivePropertiesTenant> file = sendReconciliationReportPropertiesResolver.getArchives().stream().filter(a -> a.getUriRoot().contains("file")).findFirst();
        assertThat(file).isPresent();
        Optional<ArchivePropertiesTenant> s3 = sendReconciliationReportPropertiesResolver.getArchives().stream().filter(a -> a.getUriRoot().contains("s3")).findFirst();
        assertThat(s3).isPresent();
        s3.ifPresent(archive -> {
            assertThat(archive.getUriRoot()).contains("s3:///bucket");
            assertThat(archive.getS3AccessKey()).contains("AccessKey");
            assertThat(archive.getS3SecretKey()).contains("SecretKey");
            assertThat(archive.getS3RegionStatic()).contains("us-west-2");
            assertThat(archive.getS3Sse()).contains("AES256");
        });
        TenantContextHolder.clear();
    }

    @Test
    public void tenantNv() {
        TenantContextHolder.setTenantId("NV");
        assertThat(sendReconciliationReportPropertiesResolver.isLog()).isTrue();
        assertThat(sendReconciliationReportPropertiesResolver.getQuery()).contains("DEFAULT QUERY");
        assertThat(sendReconciliationReportPropertiesResolver.getArchives().size()).isEqualTo(1);
        Optional<ArchivePropertiesTenant> file = sendReconciliationReportPropertiesResolver.getArchives().stream().filter(a -> a.getUriRoot().contains("file")).findFirst();
        assertThat(file).isPresent();
        TenantContextHolder.clear();
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                            TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties("task-send-reconciliation-report")
        SendReconciliationReportPropertiesRoot sendReconciliationReportPropertiesRoot() {
            return new SendReconciliationReportPropertiesRoot();
        }

        @Bean
        SendReconciliationReportPropertiesResolver sendReconciliationReportPropertiesResolver(TenantKeyResolver tenantKeyResolver,
                                                                                              SendReconciliationReportPropertiesRoot sendReconciliationReportPropertiesRoot) {
            return new SendReconciliationReportPropertiesResolver(tenantKeyResolver, sendReconciliationReportPropertiesRoot);
        }
    }
}
