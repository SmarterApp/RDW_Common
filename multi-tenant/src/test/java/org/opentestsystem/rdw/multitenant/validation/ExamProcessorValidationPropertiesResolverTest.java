package org.opentestsystem.rdw.multitenant.validation;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles(profiles = {"tenant_ca", "tenant_nv"})
@EnableConfigurationProperties
public class ExamProcessorValidationPropertiesResolverTest {

    @Autowired
    ExamProcessorValidationPropertiesResolver examProcessorValidationProperties;

    @Test
    public void caShouldResolveOverride() {
        TenantContextHolder.setTenantId("CA");
        List<String> result = examProcessorValidationProperties.getRequiredDataElements();
        assertThat(result).contains("FirstName");
        assertThat(result).contains("LastOrSurname");
        assertThat(result).contains("Birthdate");
        assertThat(result.size()).isEqualTo(3);
        TenantContextHolder.clear();
    }

    @Test
    public void nvShouldResolveDefault() {
        TenantContextHolder.setTenantId("NV");
        List<String> result = examProcessorValidationProperties.getRequiredDataElements();
        assertThat(result.size()).isEqualTo(8);
        TenantContextHolder.clear();
    }

    @Configuration
    static class Config {
        @Bean
        @ConfigurationProperties(prefix = "tenantProperties")
        TenantProperties tenantProperties() {
            return new TenantProperties();
        }

        @Bean
        public TenantIdResolver tenantIdResolver() {
            return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
        }

        @Bean
        TenantKeyResolver tenantKeyResolver(TenantProperties tenantProperties,
                                            TenantIdResolver tenantIdResolver) {
            return new TenantKeyResolver(tenantProperties, tenantIdResolver);
        }

        @Bean
        @ConfigurationProperties("validation")
        ExamProcessorValidationPropertiesRoot examProcessorValidationPropertiesRoot() {
            return new ExamProcessorValidationPropertiesRoot();
        }

        @Bean
        ExamProcessorValidationPropertiesResolver examProcessorValidationProperties(TenantKeyResolver tenantKeyResolver,
                                                                                    ExamProcessorValidationPropertiesRoot aggregateReportingPropertiesRoot) {
            return new ExamProcessorValidationPropertiesResolver(tenantKeyResolver, aggregateReportingPropertiesRoot);
        }
    }
}
