package org.opentestsystem.rdw.script;

import groovy.lang.GroovyClassLoader;
import org.apache.commons.lang3.StringUtils;
import org.codehaus.groovy.control.CompilationFailedException;

/**
 * Compiles a script into a class with the given class loader.
 */
public class ScriptCompiler {
    private final GroovyClassLoader classLoader;

    public ScriptCompiler(GroovyClassLoader classLoader) {
        this.classLoader = classLoader;
    }

    /**
     * Compiles the given script code into a Java class extending PipelineScript. The class and file name
     * for this class will be automatically generated.
     *
     * @param scriptCode Groovy code for the script
     * @return compiled class
     *
     * @throws CompilationFailedException if the script cannot be compile.
     */
    public Class<? extends PipelineScript> compile(final String scriptCode) throws CompilationFailedException {
        Class<?> clazz = classLoader.parseClass(scriptCode);
        return clazz.asSubclass(PipelineScript.class);
    }

    /**
     * Compiles the given script code into a Java class extending PipelineScript. The name will be set from the
     * given name. This name will be available for logging and future error reporting.
     *
     * @param scriptCode Groovy code for the script
     * @param name file name of the script being compiled. If name doesn't end with .groovy this will be appended.
     * @return compiled class
     *
     * @throws CompilationFailedException if the script cannot be compile.
     */
    public Class<? extends PipelineScript> compile(final String scriptCode, final String name)
            throws CompilationFailedException {
        if (StringUtils.isBlank(name)) {
            return compile(scriptCode);
        }

        final String fileName = (name.endsWith(".groovy")) ? name : name + ".groovy";
        Class<?> clazz = classLoader.parseClass(scriptCode, fileName);
        return clazz.asSubclass(PipelineScript.class);
    }
}