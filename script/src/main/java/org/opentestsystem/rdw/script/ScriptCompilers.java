package org.opentestsystem.rdw.script;

import groovy.lang.GroovyClassLoader;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

import static org.opentestsystem.rdw.script.publishing.PublishedPipelines.getBaseScriptBody;

public final class ScriptCompilers {
    private static final String BASE_CLASS_NAME = "DSLScriptBase";

    /**
     * Creates a script compiler given a base script's source code
     *
     * @param sourceCode The base source code for the root class loader of the compiler
     * @return The created script compiler
     */
    public static ScriptCompiler toScriptCompiler(final String sourceCode) {
        return new ScriptCompiler(createGroovyClassLoader(sourceCode));
    }

    /**
     * Creates a script compiler for the given published pipeline
     *
     * @param publishedPipeline The published pipeline
     * @return The script compiler for the pipeline
     */
    public static ScriptCompiler toScriptCompiler(final PublishedPipeline publishedPipeline) {
        return toScriptCompiler(
                getBaseScriptBody(publishedPipeline)
                        .orElseThrow(() -> new IllegalArgumentException(String.format(
                                "The provided pipeline has no base script configured: %s",
                                publishedPipeline
                        )))
        );
    }

    private static GroovyClassLoader createGroovyClassLoader(final String sourceCode) {
        final GroovyClassLoader parent = new GroovyClassLoader();
        try (final Reader reader = new StringReader(sourceCode)) {
            final Class baseClass = parent.parseClass(reader, BASE_CLASS_NAME);
            final CompilerConfiguration configuration = new CompilerConfiguration();
            configuration.setScriptBaseClass(baseClass.getName());
            return new GroovyClassLoader(parent, configuration);
        } catch (final IOException exception) {
            throw new RuntimeException("Cannot create script class loader", exception);
        }
    }

    private ScriptCompilers() {}

}
