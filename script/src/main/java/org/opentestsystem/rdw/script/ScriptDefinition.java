package org.opentestsystem.rdw.script;

import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableMap;

import java.util.Map;

/**
 * Script definition for pipeline nodes scripts.
 */
public class ScriptDefinition extends VersionedResource {
    private Class<? extends PipelineScript> compiledScript;
    private Map<String, Object> configuration;
    private PropertyResolver propertyResolver;

    public Class<? extends PipelineScript> getCompiledScript() {
        return compiledScript;
    }

    public Map<String, Object> getConfiguration() {
        return configuration;
    }

    public PropertyResolver getPropertyResolver() {
        return propertyResolver;
    }

    /**
     * Get an instance of the script to be run against the given input
     *
     * @param input an open Reader with the input file for the script to work on
     * @return an instance of a PipelineScript
     * @throws Exception if there is an problem constructing the script
     */
    public PipelineScript getInstance(Object input) throws Exception {
        return getInstance(input, null);
    }

    /**
     * Get an instance of the script to be run against the given input and properties.
     *
     * @param input                   an open Reader with the input file for the script to work on
     * @param additionalConfiguration a Map of string properties that will be added to the configuration and
     *                                made available to the scripts
     * @return an instance of a PipelineScript
     * @throws Exception if there is an problem constructing the script
     */
    public PipelineScript getInstance(Object input, Map<String, Object> additionalConfiguration) throws Exception {
        final PipelineScript script = compiledScript.getConstructor().newInstance()
                .bindProperties(configuration)
                .bindProperties(additionalConfiguration)
                .bindInput(input);

        if (getType() == ResourceType.SYSTEM_NODE && this.propertyResolver != null) {
            script.setProperty("propertyResolver", propertyResolver);
        }

        return script;
    }

    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("name", getName())
                .add("version", getVersion())
                .add("type", getType())
                .add("configuration", getConfiguration())
                .toString();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends VersionedResource.Builder<ScriptDefinition, Builder> {
        private Class<? extends PipelineScript> compiledScript;
        private Map<String, Object> configuration;
        private PropertyResolver propertyResolver;

        public Builder compiledScript(final Class<? extends PipelineScript> compiledScript) {
            this.compiledScript = compiledScript;
            return this;
        }

        public Builder configuration(final Map<String, Object> configuration) {
            this.configuration = configuration != null ? ImmutableMap.copyOf(configuration) : null;
            return this;
        }

        public Builder propertyResolver(final PropertyResolver propertyResolver) {
            this.propertyResolver = propertyResolver;
            return this;
        }

        protected ScriptDefinition build(final ScriptDefinition instance) {
            super.build(instance);
            instance.compiledScript = compiledScript;
            instance.configuration = configuration;
            instance.propertyResolver = propertyResolver;
            return instance;
        }

        public ScriptDefinition build() {
            return build(new ScriptDefinition());
        }

    }
}
