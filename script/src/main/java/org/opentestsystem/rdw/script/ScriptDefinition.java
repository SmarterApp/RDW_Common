package org.opentestsystem.rdw.script;

import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;

import java.util.Map;

import static com.google.common.collect.ImmutableMap.of;

/**
 * Script definition for pipeline nodes scripts.
 *
 * TODO stop inheriting versioned resource
 */
public class ScriptDefinition {

    private PublishedScript source;
    private Class<? extends PipelineScript> compiledScript;
    private Map<String, Object> configuration;
    private PropertyResolver propertyResolver;

    public PublishedScript getSource() {
        return source;
    }

    public boolean isUserScript() {
        return source.getType() == ScriptType.User;
    }

    public boolean isSystemScript() {
        return source.getType() != ScriptType.User;
    }

    public Class<? extends PipelineScript> getCompiledScript() {
        return compiledScript;
    }

    public Map<String, Object> getConfiguration() {
        return configuration;
    }

    public PropertyResolver getPropertyResolver() {
        return propertyResolver;
    }

    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("source", getSource())
                .add("configuration", getConfiguration())
                .toString();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private PublishedScript source;
        private Class<? extends PipelineScript> compiledScript;
        private Map<String, Object> configuration;
        private PropertyResolver propertyResolver;

        public Builder source(final PublishedScript source) {
            this.source = source;
            return this;
        }

        public Builder compiledScript(final Class<? extends PipelineScript> compiledScript) {
            this.compiledScript = compiledScript;
            return this;
        }

        public Builder configuration(final Map<String, Object> configuration) {
            this.configuration = configuration != null ? ImmutableMap.copyOf(configuration) : null;
            return this;
        }

        public Builder propertyResolver(final PropertyResolver propertyResolver) {
            this.propertyResolver = propertyResolver;
            return this;
        }

        protected ScriptDefinition build(final ScriptDefinition instance) {
            instance.source = source;
            instance.compiledScript = compiledScript;
            instance.configuration = configuration != null ? configuration : of();
            instance.propertyResolver = propertyResolver;
            return instance;
        }

        public ScriptDefinition build() {
            return build(new ScriptDefinition());
        }

    }
}
