package org.opentestsystem.rdw.script;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import groovy.lang.GroovyClassLoader;
import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.archive.ArchiveConfiguration;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.script.impl.DefaultConfigurationCompiler;
import org.opentestsystem.rdw.script.impl.DefaultPipelineFactory;
import org.opentestsystem.rdw.script.impl.DefaultScriptSource;
import org.opentestsystem.rdw.script.impl.EmptyPropertyResolver;
import org.opentestsystem.rdw.script.publishing.ArchiveBackedPublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.security.DefaultSandboxPermissions;
import org.opentestsystem.rdw.script.security.SandboxPermissions;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;

import java.io.IOException;

import static java.nio.charset.StandardCharsets.UTF_8;

/**
 * Spring configuration for archive service. To use do something like:<pre>
 * {@literal @}Import(ScriptPipelineConfiguration.class)
 *  public class Application {
 *      {@literal @}Autowired private PipelineFactory factory;
 *      private Pipeline pipeline = factory.getPipeline(PIPELINE_NAME, PIPELINE_VERSION);
 * </pre>
 *
 * @see PipelineFactory
 * @see ScriptCompiler
 * @see ScriptSource
 * @see GroovyClassLoader
 */
@Configuration
@Import({
        ArchiveConfiguration.class
})
public class ScriptPipelineConfiguration {

    @Bean("defaultBaseScript")
    public String defaultBaseScript() throws IOException {
        return IOUtils.toString(
                this.getClass().getClassLoader().getResourceAsStream("scripts/DSLScriptBase.groovy"),
                UTF_8
        );
    }

    @Bean
    public ConfigurationCompiler configurationCompiler() {
        return new DefaultConfigurationCompiler();
    }

    @Bean
    public PipelineFactory pipelineFactory(
            final ScriptSource scriptSource,
            final ConfigurationCompiler configurationCompiler,
            final PropertyResolver propertyResolver,
            final SandboxSecurityManager sandboxSecurityManager,
            @Qualifier("defaultBaseScript") final String defaultBaseScript) {

        return new DefaultPipelineFactory(
                scriptSource,
                configurationCompiler,
                propertyResolver,
                sandboxSecurityManager,
                defaultBaseScript
        );
    }

    @Bean
    public PropertyResolver propertyResolver() {
        return new EmptyPropertyResolver();
    }

    @Bean
    public SandboxSecurityManager sandboxSecurityManager(final SandboxPermissions permissions) {
        return new SandboxSecurityManager(permissions);
    }

    @Bean
    public SandboxPermissions sandboxPermissions() {
        return new DefaultSandboxPermissions();
    }

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        return new ObjectMapper()
                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    @Bean
    public PublishedPipelineRepository publishedPipelineRepository(
            final ArchiveService archiveService,
            final ObjectMapper objectMapper) {
        return new ArchiveBackedPublishedPipelineRepository(archiveService, objectMapper);
    }

    @Bean
    public ScriptSource scriptSource(final PublishedPipelineRepository repository) {
        return new DefaultScriptSource(repository);
    }

}
