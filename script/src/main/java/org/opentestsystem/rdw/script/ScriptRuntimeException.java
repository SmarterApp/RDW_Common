package org.opentestsystem.rdw.script;

/**
 * ScriptRuntimeException wraps any exceptions throw during the run of a PipelineScript. It contains the
 * line number and script file name if they are extractable from the wrapped exception's stack trace.
 */
public class ScriptRuntimeException extends RuntimeException {
    private final String scriptFileName;
    private final Integer lineNumber;

    public ScriptRuntimeException(final Exception cause) {
        super(formatOriginalMessage(cause), cause);
        StackTraceElement scriptInfo = extractScriptInfo(cause);
        this.scriptFileName = (scriptInfo == null) ? null : scriptInfo.getFileName();
        this.lineNumber = (scriptInfo == null) ? null : scriptInfo.getLineNumber();
    }

    @Override
    public String getMessage() {
        final String scriptName = this.scriptFileName == null ? "UNKNOWN" : this.scriptFileName;
        final String lineNumber = this.lineNumber == null ? "UNKNOWN" : Integer.toString(this.lineNumber);

        return "Error in " + scriptName + " at line " + lineNumber + ": " + getOriginalMessage();
    }

    public String getScriptFileName() {
        return scriptFileName;
    }

    public Integer getLineNumber() {
        return lineNumber;
    }

    public String getOriginalMessage() {
        return super.getMessage();
    }

    private StackTraceElement extractScriptInfo(final Throwable t) {
        if (t.getStackTrace() != null) {
            for (StackTraceElement element : t.getStackTrace()) {
                if (element.getFileName() != null && element.getFileName().endsWith(".groovy")) {
                    return element;
                }
            }
        }

        // Not found
        return null;
    }

    private static String formatOriginalMessage(final Exception cause) {
        return String.format("%s: %s", cause.getClass().getSimpleName(), cause.getMessage());
    }
}
