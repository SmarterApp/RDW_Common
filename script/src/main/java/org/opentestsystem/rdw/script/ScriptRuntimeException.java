package org.opentestsystem.rdw.script;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;

public class ScriptRuntimeException extends RuntimeException {
    private final String scriptName;
    private final Integer lineNumber;

    public ScriptRuntimeException(final Exception cause) {
        super(cause.getMessage(), cause);
        Pair<String,Integer> scriptInfo = extractScriptInfo(cause);

        this.scriptName = scriptInfo.getLeft();
        this.lineNumber = scriptInfo.getRight();
    }

    @Override
    public String getMessage() {
        final String scriptName = this.scriptName == null ? "UNKNOWN" : this.scriptName;
        final String lineNumber = this.lineNumber == null ? "UNKNOWN" : Integer.toString(this.lineNumber);

        if (getLineNumber() == null) {
            return "Script error at unknown line: " + getOriginalMessage();
        }

        return "Error in " + scriptName + " at line " + lineNumber + ": " +
                getCause().getClass().getSimpleName() + " " + getOriginalMessage();
    }

    public String getScriptName() {
        return scriptName;
    }

    public Integer getLineNumber() {
        return lineNumber;
    }

    public String getOriginalMessage() {
        return super.getMessage();
    }

    private Pair<String,Integer> extractScriptInfo(final Throwable t) {
        if (t.getStackTrace() != null) {
            for (StackTraceElement element : t.getStackTrace()) {
                if (StringUtils.endsWith(element.getFileName(), ".groovy")) {
                    final String fileName = element.getFileName();
                    final Integer lineNumber = (element.getLineNumber() < 0) ? null : element.getLineNumber();

                    return Pair.of(fileName, lineNumber);
                }
            }
        }

        // Not found
        return Pair.of(null, null);
    }
}
