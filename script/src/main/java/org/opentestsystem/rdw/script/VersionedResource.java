package org.opentestsystem.rdw.script;

import com.google.common.base.MoreObjects;

import java.util.Objects;

/**
 * Base class for all resources with name and version identifiers.
 */
public class VersionedResource {

    private String name;
    private String version;
    private ResourceType type;

    public String getName() {
        return name;
    }

    public String getVersion() {
        return version;
    }

    public ResourceType getType() {
        return type;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, version, type);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final VersionedResource that = (VersionedResource) o;
        return name.equals(that.name) &&
                version.equals(that.version) &&
                type == that.type;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("name", getName())
                .add("version", getVersion())
                .add("type", getType())
                .toString();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder<A extends VersionedResource, B extends Builder<A, B>> {

        private String name;
        private String version;
        private ResourceType type;

        public B name(final String name) {
            this.name = name;
            return (B) this;
        }

        public B version(final String version) {
            this.version = version;
            return (B) this;
        }

        public B type(final ResourceType type) {
            this.type = type;
            return (B) this;
        }

        protected A build(final VersionedResource instance) {
            instance.name = name;
            instance.version = version;
            instance.type = type;
            return (A) instance;
        }

        public A build() {
            return build(new VersionedResource());
        }

    }

}
