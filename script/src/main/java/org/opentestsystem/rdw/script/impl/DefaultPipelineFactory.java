package org.opentestsystem.rdw.script.impl;

import org.codehaus.groovy.control.CompilationFailedException;
import org.opentestsystem.rdw.script.ConfigurationCompiler;
import org.opentestsystem.rdw.script.Pipeline;
import org.opentestsystem.rdw.script.PipelineBuildException;
import org.opentestsystem.rdw.script.PipelineDefinition;
import org.opentestsystem.rdw.script.PipelineFactory;
import org.opentestsystem.rdw.script.PipelineScript;
import org.opentestsystem.rdw.script.PropertyResolver;
import org.opentestsystem.rdw.script.ScriptCompiler;
import org.opentestsystem.rdw.script.ScriptDefinition;
import org.opentestsystem.rdw.script.ScriptInfo;
import org.opentestsystem.rdw.script.ScriptSource;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.script.ScriptCompilers.toScriptCompiler;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Base;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Post;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Pre;
import static org.opentestsystem.rdw.script.publishing.ScriptType.User;

/**
 * Factory class for creating a Pipeline by loading the pipeline definition and then using it to
 * load the script definitions for each node.
 */
public class DefaultPipelineFactory implements PipelineFactory {

    private static PipelineDefinition toPipelineDefinition(final PublishedPipeline publishedPipeline) {
        return PipelineDefinition.builder()
                .source(publishedPipeline)
                .scripts(
                        publishedPipeline.getScripts().stream()
                                .map(publishedScript -> ScriptDefinition.builder()
                                        .source(publishedScript)
                                        .build()
                                )
                                .collect(toList())
                )
                .build();
    }

    private final PublishedPipelineRepository repository;
    // Compiler of configuration properties, which may involve loading database connections and
    // other manipulations
    private final ConfigurationCompiler configCompiler;
    private final PropertyResolver propertyResolver;
    private final SandboxSecurityManager sandboxSecurityManager;
    private final ScriptSource scriptSource;

    public DefaultPipelineFactory(final PublishedPipelineRepository repository,
                                  final ConfigurationCompiler configCompiler,
                                  final PropertyResolver propertyResolver,
                                  final SandboxSecurityManager sandboxSecurityManager,
                                  final ScriptSource scriptSource) {
        this.repository = repository;
        this.configCompiler = configCompiler;
        this.propertyResolver = propertyResolver;
        this.sandboxSecurityManager = sandboxSecurityManager;
        this.scriptSource = scriptSource;
    }

    @Override
    public Pipeline getPipeline(
            final String pipelineCode,
            final String pipelineVersion) throws PipelineBuildException {

        return createPipeline(
                getEffectivePipeline(pipelineCode, pipelineVersion)
        );
    }

    @Override
    public Pipeline getDevelopmentPipeline(
            final String pipelineCode,
            final String pipelineVersion,
            final String userScript) {

        return createPipeline(
                createDevelopmentPipeline(pipelineCode, userScript)
        );
    }

    private PublishedPipeline getEffectivePipeline(
            final String pipelineCode,
            final String pipelineVersion) {

        if (pipelineVersion == null) {
            return PublishedPipeline.builder()
                    .pipelineCode(pipelineCode)
                    .scripts(getSystemScripts(pipelineCode))
                    .build();
        }

        final PublishedPipeline publishedPipeline = repository
                .findByCodeAndVersion(pipelineCode, pipelineVersion);

        if (publishedPipeline == null) {
            throw new IllegalArgumentException(String.format(
                    "Unable to build pipeline. There is no published pipeline with code \"%s\" and version \"%s\"",
                    pipelineCode,
                    pipelineVersion
            ));
        }

        final List<PublishedScript> scripts = newArrayList(publishedPipeline.getScripts());
        scripts.addAll(getSystemScripts(pipelineCode));

        return publishedPipeline.copy()
                .scripts(scripts)
                .build();
    }

    private List<PublishedScript> getSystemScripts(final String pipelineCode) {
        return newArrayList(
                PublishedScript.builder().type(Base).build(),
                PublishedScript.builder().type(Pre).build(),
                PublishedScript.builder().type(Post).build()
        ).stream()
                .map(script -> script.copy()
                        .body(scriptSource.loadScript(script.getType(), pipelineCode)
                                .map(PublishedScript::getBody)
                                .orElse(null)
                        )
                        .build()
                )
                .filter(script -> script.getBody() != null)
                .collect(toList());
    }

    private PublishedPipeline createDevelopmentPipeline(
            final String pipelineCode,
            final String userScript) {

        return PublishedPipeline.builder()
                .pipelineCode("Development Pipeline")
                .scripts(newArrayList(
                        PublishedScript.builder()
                                .type(User)
                                .body(userScript)
                                .build(),
                        scriptSource.loadScript(Base, pipelineCode)
                                .orElseThrow(() -> new IllegalStateException(String.format(
                                        "No base script found for the \"%s\" pipeline",
                                        pipelineCode
                                )))
                ))
                .build();
    }


    private Pipeline createPipeline(final PublishedPipeline publishedPipeline) throws PipelineBuildException {

        final ScriptCompiler scriptCompiler = toScriptCompiler(
                publishedPipeline.getScripts().stream()
                        .filter(script -> script.getType() == ScriptType.Base)
                        .findFirst()
                        .map(PublishedScript::getBody)
                        .orElseThrow(() -> new IllegalStateException(String.format(
                                "Pipeline has no base script configured: %s",
                                publishedPipeline
                        )))
        );

        final List<PublishedScript> nonBaseScripts = publishedPipeline.getScripts().stream()
                .filter(script -> script.getType() != Base)
                .collect(toList());

        final List<PipelineScript> nonBaseScriptDefinitions = new ArrayList<>();
        final Map<PublishedScript, Exception> buildErrors = new HashMap<>();

        // For each node, load and compile the code and configuration and report back any errors.
        for (final PublishedScript script : nonBaseScripts) {
            try {
                final ScriptInfo scriptInfo = new ScriptInfo(
                        script.getBody(),
                        Collections.emptyMap()
                );
                final Class<? extends PipelineScript> scriptClass = scriptCompiler.compile(scriptInfo.getCode());
                final Map<String, Object> configuration = configCompiler.compile(scriptInfo.getProperties());

                final ScriptDefinition.Builder builder = ScriptDefinition.builder()
                        .compiledScript(scriptClass)
                        .configuration(configuration)
                        .source(script);

                // Add property resolver to system scripts.
                final ScriptType type = script.getType();
                if (type == Pre || type == Post) {
                    builder.propertyResolver(propertyResolver);
                }
                nonBaseScriptDefinitions.add(
                        toPipelineScript(
                                script,
                                scriptClass,
                                configuration,
                                script.getType() == Pre || script.getType() == Post
                                        ? propertyResolver
                                        : null

                        )
                );

            } catch (final Exception exception) {
                exception.fillInStackTrace();
                buildErrors.put(script, exception);
            }
        }

        if (!buildErrors.isEmpty()) {
            throw new PipelineBuildException(
                    String.format(
                            "Failed to build pipeline: %s v. %s",
                            publishedPipeline.getPipelineCode(),
                            publishedPipeline.getVersion()
                    ),
                    publishedPipeline,
                    buildErrors
            );
        }

        // TODO
        // there is redundancy in storing script definitions on the pipeline definition
        // but then not using them and passing just the compiled non-base scripts to the pipeline
        return new Pipeline(
                publishedPipeline,
                nonBaseScriptDefinitions,
                sandboxSecurityManager
        );
    }


    /**
     * Get an instance of the script to be run against the given input
     *
     * @return an instance of a PipelineScript
     * @throws Exception if there is an problem constructing the script
     */
    private PipelineScript toPipelineScript(
            final PublishedScript source,
            final Class<? extends PipelineScript> scriptClass,
            final Map<String, Object> configuration,
            final PropertyResolver propertyResolver) throws Exception {
        final PipelineScript script = scriptClass.getConstructor().newInstance()
                .source(source)
                .bindProperties(configuration);

        if (propertyResolver != null) {
            script.setProperty("propertyResolver", propertyResolver);
        }

        return script;
    }

}
