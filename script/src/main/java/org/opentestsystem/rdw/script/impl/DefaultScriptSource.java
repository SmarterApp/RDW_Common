package org.opentestsystem.rdw.script.impl;

import org.apache.commons.io.IOUtils;
import org.opentestsystem.rdw.script.PipelineDefinition;
import org.opentestsystem.rdw.script.ScriptDefinition;
import org.opentestsystem.rdw.script.ScriptInfo;
import org.opentestsystem.rdw.script.ScriptSource;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import static java.util.Collections.emptyMap;
import static java.util.stream.Collectors.toList;

/**
 * TODO: This is a stub. It must be replaced with a real implementation that loads scripts from an s3 bucket,
 * a private GitHub repo, or other source.
 */
public class DefaultScriptSource implements ScriptSource {

    private final PublishedPipelineRepository repository;

    public DefaultScriptSource(final PublishedPipelineRepository repository) {
        this.repository = repository;
    }

    @Override
    public String loadScriptBaseClass() {
        // TODO this should be the base script that the pipeline points at
        return getResourceAsString("/scripts/DSLScriptBase.groovy");
    }

    @Override
    public PipelineDefinition loadPipelineDefinition(final String pipelineName, final String pipelineVersion) {
        final PublishedPipeline publishedPipeline = repository.findByCodeAndVersion(pipelineName, pipelineVersion);
        return PipelineDefinition.builder()
                .source(publishedPipeline)
                .scripts(
                        publishedPipeline.getScripts().stream()
                                .map(publishedScript -> ScriptDefinition.builder()
                                        .source(publishedScript)
                                        .build()
                                )
                                .collect(toList())
                )
                .build();
    }

    @Override
    public ScriptInfo loadScript(final ScriptDefinition scriptDefinition) {
        return new ScriptInfo(scriptDefinition.getSource().getBody(), emptyMap());
    }

    private String getResourceAsString(final String path) {
        try (final InputStream input = this.getClass().getResourceAsStream(path)) {
            return IOUtils.toString(input, StandardCharsets.UTF_8);
        } catch (final IOException exception) {
            throw new RuntimeException("Failed to load " + path, exception);
        }
    }
}
