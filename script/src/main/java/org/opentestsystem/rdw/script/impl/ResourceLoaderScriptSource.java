package org.opentestsystem.rdw.script.impl;

import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;
import org.opentestsystem.rdw.script.ScriptSource;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Base;
import static org.opentestsystem.rdw.script.publishing.ScriptType.User;

/**
 * Implements the ScriptSource to load system scripts from resources, that is, from the classpath.
 *
 * Base script should be in /scripts//scripts/DSLScriptBase.groovy
 * Pre-processing script should be in /scripts/pipelines/[code]/pre-process.groovy
 * Post-processing script should be in /scripts/pipelines/[code]/post-process.groovy
 *
 * ([code] is the code name of the pipeline: exam, assessment, or group.
 */
public class ResourceLoaderScriptSource implements ScriptSource {
    @Override
    public Optional<PublishedScript> loadScript(final ScriptType type, final String pipelineCode) {
        final String path = toSystemScriptPath(pipelineCode, type);

        final InputStream input = getClass().getResourceAsStream(path);
        if (input != null) {
            return Optional.of(
                    PublishedScript.builder()
                            .type(type)
                            .body(readSystemResourceAsString(input))
                            .build()
            );
        }
        return Optional.empty();
    }

    private static String toSystemScriptPath(final String code, final ScriptType type) {
        if (type == User) {
            throw new IllegalArgumentException("Cannot load user scripts from resources");
        }
        if (type == Base) {
            return "/scripts/DSLScriptBase.groovy";
        }

        return String.format("/scripts/pipelines/%s/%s-process.groovy", code, type.name().toLowerCase());
    }

    private String readSystemResourceAsString(final InputStream input) {
        try {
            return IOUtils.toString(input, UTF_8);
        } catch (IOException e) {
            throw new IllegalArgumentException("Failed to read script", e);
        }
    }
}
