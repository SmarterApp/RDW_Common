
package org.opentestsystem.rdw.script.publishing;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.script.ScriptSource;
import org.springframework.stereotype.Repository;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.regex.Pattern;

import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.stream.Collectors.toList;
import static org.opentestsystem.rdw.script.publishing.PublishedPipelines.toProperties;
import static org.opentestsystem.rdw.script.publishing.PublishedPipelines.toPublishedPipeline;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Base;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Post;
import static org.opentestsystem.rdw.script.publishing.ScriptType.Pre;
import static org.opentestsystem.rdw.script.publishing.ScriptType.User;

/**
 * Published pipeline repository implementation that stores the published pipelines using an archive service
 * <p>
 * The address structure for pipeline resources is organized as follows:
 * <p>
 * /{bucket}
 *  /pipelines
 *   /{pipelineCode} (assessment|exam|group)
 *    user.{version}.groovy
 */
@Repository
public class ArchiveBackedPublishedPipelineRepository implements PublishedPipelineRepository {

    private static final Pattern UserScriptPattern = Pattern.compile("user\\.(.+)\\.groovy");
    private final ArchiveService archiveService;
    private final ScriptSource scriptSource;

    public ArchiveBackedPublishedPipelineRepository(
            final ArchiveService archiveService,
            final ScriptSource scriptSource) {
        this.archiveService = archiveService;
        this.scriptSource = scriptSource;
    }

    @Override
    public List<PublishedPipeline> findAllByCode(final String code) {
        return archiveService.listResources(toPipelinesPathPrefix(code)).stream()
                .filter(path -> UserScriptPattern.matcher(path).find())
                .map(scriptPath -> toPublishedPipeline(
                        findUserScriptProperties(scriptPath)
                ))
                .collect(toList());
    }

    @Override
    public PublishedPipeline findByCodeAndVersion(final String code, final String version) {
        return toPublishedPipeline(findUserScriptProperties(code, version)).copy()
                .scripts(findScripts(code, version))
                .build();
    }

    @Override
    public PublishedPipeline create(final PublishedPipeline pipeline) {

        final String nextVersion = Integer.toString(
                findAllByCode(pipeline.getPipelineCode())
                        .stream()
                        .mapToInt(published -> Integer.parseInt(published.getVersion()))
                        .max()
                        .orElse(0)
                        + 1
        );

        final PublishedPipeline published = pipeline.copy()
                .version(nextVersion)
                .published(Instant.now())
                .build();

        published.getScripts().stream()
                .filter(script -> script.getType() == User)
                .findFirst()
                .ifPresent(publishedScript -> archiveService.writeResource(
                        toUserScriptPath(published.getPipelineCode(), published.getVersion()),
                        publishedScript.getBody().getBytes(UTF_8),
                        toProperties(published)
                ));

        return published;
    }

    private List<PublishedScript> findScripts(final String pipelineCode, final String version) {
        final List<PublishedScript> scripts = new ArrayList<>();
        findUserScript(pipelineCode, version).ifPresent(scripts::add);
        scriptSource.loadScript(Base, pipelineCode).ifPresent(scripts::add);
        scriptSource.loadScript(Pre, pipelineCode).ifPresent(scripts::add);
        scriptSource.loadScript(Post, pipelineCode).ifPresent(scripts::add);
        return scripts;
    }

    /**
     * Finds the script for the specified type, pipeline and version
     *
     * @param pipelineCode The pipeline identifier
     * @param version The script version (this can be the pipeline version in the case of the user script)
     * @return The published script for the given type, pipeline and version
     */
    private Optional<PublishedScript> findUserScript(final String pipelineCode, final String version) {
        final String path = toUserScriptPath(pipelineCode, version);
        if (archiveService.exists(path)) {
            return Optional.of(
                    PublishedScript.builder()
                            .type(User)
                            .version(version)
                            .body(readArchiveResourceAsString(path))
                            .build()
            );
        }
        return Optional.empty();
    }

    private static String toPipelinesPathPrefix(final String pipelineCode) {
        return String.format("pipelines/%s", pipelineCode);
    }

    private static String toUserScriptPath(final String code, final String version) {
        return String.format("pipelines/%s/user.%s.groovy", code, version);
    }

    private Properties findUserScriptProperties(final String pipelineCode, final String version) {
        return findUserScriptProperties(
                toUserScriptPath(pipelineCode, version)
        );
    }

    private Properties findUserScriptProperties(final String path) {
        try {
            return archiveService.readProperties(path);
        } catch (IllegalArgumentException e) {
            return new Properties();
        }
    }

    private String readArchiveResourceAsString(final String location) {
        return new String(archiveService.readResource(location), UTF_8);
    }

}
