package org.opentestsystem.rdw.script.publishing;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.ImmutableList.copyOf;
import static com.google.common.collect.ImmutableList.of;

/**
 * Represents a published pipeline artifact
 */
public class PublishedPipeline {

    private String pipelineCode;
    private int version;
    private List<PublishedScript> scripts;
    private Instant published;
    private String publishedBy;

    public String getPipelineCode() {
        return pipelineCode;
    }

    public int getVersion() {
        return version;
    }

    public List<PublishedScript> getScripts() {
        return scripts;
    }

    public Instant getPublished() {
        return published;
    }

    public String getPublishedBy() {
        return publishedBy;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String pipelineCode;
        private int version;
        private List<PublishedScript> scripts;
        private Instant published;
        private String publishedBy;

        public Builder pipelineCode(final String pipelineCode) {
            this.pipelineCode = pipelineCode;
            return this;
        }

        public Builder version(final int version) {
            this.version = version;
            return this;
        }

        public Builder scripts(final List<PublishedScript> scripts) {
            this.scripts = scripts != null ? copyOf(scripts) : null;
            return this;
        }

        public Builder published(final Instant published) {
            this.published = published;
            return this;
        }

        public Builder publishedBy(final String publishedBy) {
            this.publishedBy = publishedBy;
            return this;
        }

        public Builder copy(final PublishedPipeline pipeline) {
            return pipelineCode(pipeline.getPipelineCode())
                    .version(pipeline.getVersion())
                    .scripts(pipeline.getScripts())
                    .published(pipeline.getPublished())
                    .publishedBy(pipeline.getPublishedBy());
        }

        public PublishedPipeline build() {
            final PublishedPipeline pipeline = new PublishedPipeline();
            pipeline.pipelineCode = pipelineCode;
            pipeline.version = version;
            pipeline.scripts = scripts != null ? scripts : of();
            pipeline.published = published;
            pipeline.publishedBy = publishedBy;
            return pipeline;
        }

    }

}
