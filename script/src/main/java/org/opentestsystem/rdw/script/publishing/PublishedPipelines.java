package org.opentestsystem.rdw.script.publishing;

import java.time.Instant;
import java.util.Optional;
import java.util.Properties;

/**
 * Holds utility methods for published pipelines
 */
public final class PublishedPipelines {

    /**
     * Creates a set of properties representative of the provided pipeline.
     * This does not include script information.
     *
     * @param pipeline The published pipeline to turn into properties
     * @return The properties of the published pipeline
     */
    public static Properties toProperties(final PublishedPipeline pipeline) {
        final Properties properties = new Properties();
        properties.setProperty("pipelineCode", pipeline.getPipelineCode());
        properties.setProperty("version", pipeline.getVersion());
        properties.setProperty("published", pipeline.getPublished().toString());
        properties.setProperty("publishedBy", pipeline.getPublishedBy());
        return properties;
    }

    /**
     * Creates a published pipeline instance from the provided properties.
     * This does not include script information.
     *
     * @param properties The properties to produce the pipeline from
     * @return The published pipeline created from the provided properties
     */
    public static PublishedPipeline toPublishedPipeline(final Properties properties) {
        return PublishedPipeline.builder()
                .pipelineCode(properties.getProperty("pipelineCode"))
                .version(properties.getProperty("version"))
                .published(Instant.parse(properties.getProperty("published")))
                .publishedBy(properties.getProperty("publishedBy"))
                .build();
    }

    public static Optional<String> getBaseScriptBody(final PublishedPipeline pipeline) {
        return pipeline
                .getScripts().stream()
                .filter(script -> script.getType() == ScriptType.Base)
                .findFirst()
                .map(PublishedScript::getBody);
    }

    private PublishedPipelines() {}
}
