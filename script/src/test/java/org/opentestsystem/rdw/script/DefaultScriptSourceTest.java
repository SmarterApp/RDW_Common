package org.opentestsystem.rdw.script;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.script.impl.DefaultScriptSource;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedScript;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultScriptSourceTest {

    @Mock
    private PublishedPipelineRepository repository;

    private DefaultScriptSource scriptSource;

    @Before
    public void createScriptSource() {
        scriptSource = new DefaultScriptSource(repository);
    }

    @Test
    public void itShouldLoadPipelineDefinition() {

        final String code = "code";
        final String version = "1.0";
        final PublishedPipeline publishedPipeline = PublishedPipeline.builder()
                .pipelineCode(code)
                .version(version)
                .build();

        when(repository.findByCodeAndVersion(code, version))
                .thenReturn(publishedPipeline);

        assertThat(scriptSource.loadPipelineDefinition(code, version))
                .isEqualToComparingFieldByFieldRecursively(
                        PipelineDefinition.builder()
                                .source(publishedPipeline)
                                .build()
                );
    }

    @Test
    public void isShouldLoadScript() {
        final ScriptDefinition node = ScriptDefinition.builder()
                .source(
                        PublishedScript.builder()
                                .body("enable 'xml'")
                                .build()
                )
                .build();

        assertThat(scriptSource.loadScript(node).getCode())
                .isEqualTo(node.getSource().getBody());
    }
}
