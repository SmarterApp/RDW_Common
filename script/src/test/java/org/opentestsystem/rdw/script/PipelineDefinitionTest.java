package org.opentestsystem.rdw.script;

import com.google.common.collect.ImmutableList;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class PipelineDefinitionTest {

    @Test
    public void itShouldReturnBuilderValues() {
        final ScriptDefinition node = mock(ScriptDefinition.class);
        final PipelineDefinition definition = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .scripts(ImmutableList.of(node))
                .build();

        assertThat(definition.getName()).isEqualTo("test");
        assertThat(definition.getVersion()).isEqualTo("23");
        assertThat(definition.getRollbackVersion()).isEqualTo("16");
        assertThat(definition.getScripts()).containsExactly(node);
    }

    @Test
    public void itShouldHaveReadableToString() {
        final PipelineDefinition definition = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .build();

        assertThat(definition.toString())
                .contains(definition.getName())
                .contains(definition.getVersion())
                .contains(definition.getRollbackVersion());
    }

    @Test
    public void equalsIsBasedOnlyOnTypeNameAndVersion() {
        final ScriptDefinition node = mock(ScriptDefinition.class);
        final PipelineDefinition one = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .scripts(ImmutableList.of(node))
                .build();
        final PipelineDefinition two = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("19")
                .scripts(ImmutableList.of(node))
                .build();

        assertThat(one.equals(two)).isTrue();
        assertThat(one.hashCode()).isEqualTo(two.hashCode());
    }
}
