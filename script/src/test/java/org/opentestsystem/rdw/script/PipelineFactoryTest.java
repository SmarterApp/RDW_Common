package org.opentestsystem.rdw.script;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.script.impl.DefaultPipelineFactory;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;

import java.util.Arrays;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.script.util.Tests.resourceAsString;

@RunWith(MockitoJUnitRunner.class)
public class PipelineFactoryTest {

    @Mock
    private PublishedPipelineRepository repository;

    @Mock
    private ConfigurationCompiler configurationCompiler;

    @Mock
    private PropertyResolver propertyResolver;

    @Mock
    private SandboxSecurityManager sandboxSecurityManager;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    private PipelineFactory factory;
    private PublishedPipeline publishedPipeline;

    @Before
    public void before() throws Exception {

        publishedPipeline = PublishedPipeline.builder()
                .pipelineCode("test")
                .version("1.0")
                .scripts(Arrays.asList(
                        PublishedScript.builder()
                                .type(ScriptType.Base)
                                .body(resourceAsString("/scripts/DSLScriptBase.groovy"))
                                .version("1")
                                .build(),
                        PublishedScript.builder()
                                .type(ScriptType.User)
                                .body("")
                                .version("1.0")
                                .build()
                ))
                .build();

        factory = new DefaultPipelineFactory(
                repository,
                configurationCompiler,
                propertyResolver,
                sandboxSecurityManager
        );

        when(repository.findByCodeAndVersion(anyString(), anyString()))
                .thenReturn(publishedPipeline);
    }

    @Test
    public void testNameAndVersion() {
        final Pipeline pipeline = factory.getPipeline("test", "1.0");
        assertThat(pipeline.getPipelineDefinition().getSource())
                .isEqualToComparingFieldByFieldRecursively(
                        publishedPipeline
                );
    }

    @Test
    public void testInitialize() {
        final Pipeline pipeline = factory.getPipeline("test", "1.0");
        verify(repository).findByCodeAndVersion(anyString(), anyString());
        verify(configurationCompiler).compile(anyMap());

        assertThat(pipeline.getPipelineDefinition().getSource())
                .isEqualToComparingFieldByFieldRecursively(
                        publishedPipeline
                );
    }

    @Test
    public void testInitializeDevelopmentPipeline() {
        final String scriptBody = "return 'hello'";
        final Pipeline pipeline = factory.getDevelopmentPipeline("code", "v", scriptBody);
        assertThat(pipeline.getPipelineDefinition().getSource())
                .isEqualToComparingFieldByFieldRecursively(
                        PublishedPipeline.builder()
                                .pipelineCode("Development Pipeline")
                                .scripts(newArrayList(
                                        PublishedScript.builder()
                                                .type(ScriptType.User)
                                                .body(scriptBody)
                                                .build()
                                ))
                                .build()
                );
    }

}
