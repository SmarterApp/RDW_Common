package org.opentestsystem.rdw.script;

import org.assertj.core.api.Assertions;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Map;

import org.opentestsystem.rdw.script.impl.DefaultPipelineFactory;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;
import org.opentestsystem.rdw.script.security.SandboxSecurityManager;
import org.springframework.boot.autoconfigure.security.SecurityProperties;

import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonMap;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class PipelineFactoryTest {

    @Mock
    private ScriptSource scriptSource;

    private ScriptDefinition nodeDefinition;

    @Mock
    private ScriptCompiler scriptCompiler;

    @Mock
    private ConfigurationCompiler configurationCompiler;

    @Mock
    private PropertyResolver propertyResolver;

    @Mock
    private SandboxSecurityManager sandboxSecurityManager;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    private PipelineFactory factory;

    @Before
    public void before() {

        nodeDefinition = ScriptDefinition.builder()
                .source(
                        PublishedScript.builder()
                                .type(ScriptType.User)
                                .body("")
                                .version("v")
                                .build()
                )
                .build();

        final PipelineDefinition pipelineDefinition = PipelineDefinition.builder()
                .source(
                        PublishedPipeline.builder()
                                .pipelineCode("test")
                                .version("1.0")
                                .build()
                )
                .scripts(Arrays.asList(nodeDefinition, nodeDefinition, nodeDefinition))
                .build();

        final String scriptCode = "return 'results'";
        final Map<String, String> scriptProperties = emptyMap();

        factory = new DefaultPipelineFactory(scriptSource,
                scriptCompiler,
                configurationCompiler,
                propertyResolver,
                sandboxSecurityManager);

        when(scriptSource.loadPipelineDefinition(anyString(), anyString())).thenReturn(pipelineDefinition);
        when(scriptSource.loadScript(nodeDefinition)).thenReturn(new ScriptInfo(scriptCode, scriptProperties));
    }

    @Test
    public void testNameAndVersion() {
        final Pipeline pipeline = factory.getPipeline("test", "1.0");
        assertThat(pipeline.getPipelineDefinition().getSource().getPipelineCode(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getSource().getVersion(), is("1.0"));
    }

    @Test
    public void testInitialize() {
        final Pipeline pipeline = factory.getPipeline("test", "1.0");
        verify(scriptSource).loadPipelineDefinition(anyString(), anyString());
        verify(scriptSource, times(3)).loadScript(nodeDefinition);
        verify(scriptCompiler, times(3)).compile(anyString(), anyString());
        verify(configurationCompiler, times(3)).compile(anyMap());

        assertThat(pipeline.getPipelineDefinition().getSource().getPipelineCode(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getSource().getVersion(), is("1.0"));
    }

    @Test
    public void testInitializeDevelopmentPipeline() {
        final String scriptBody = "return 'hello'";
        factory.getDevelopmentPipeline(scriptBody);
        verify(scriptCompiler, times(1)).compile(eq(scriptBody), anyString());
    }

}