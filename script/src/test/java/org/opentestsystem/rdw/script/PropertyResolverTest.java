package org.opentestsystem.rdw.script;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.script.impl.DefaultConfigurationCompiler;
import org.opentestsystem.rdw.script.publishing.PublishedPipeline;
import org.opentestsystem.rdw.script.publishing.PublishedPipelineRepository;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;

import java.util.Arrays;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.script.util.Tests.resourceAsString;

@RunWith(MockitoJUnitRunner.class)
public class PropertyResolverTest {
    private static final String PIPELINE_NAME = "My Test Pipeline";
    private static final String PIPELINE_VERSION = "1.0";
    private static final String MISSING_PROPERTY_SCRIPT_CODE =
            "cat.equals('cat')\n" +
            "return 'transformed input'";

    @Mock
    private PublishedPipelineRepository repository;

    @Mock
    private PropertyResolver propertyResolver;

    private PipelineFactory pipelineFactory;
    private ScriptPipelineConfiguration config = new ScriptPipelineConfiguration();

    @Before
    public void before() throws Exception {
        when(propertyResolver.resolveProperty("cat")).thenReturn("cat");

        final ConfigurationCompiler configurationCompiler = new DefaultConfigurationCompiler();

        pipelineFactory = config.pipelineFactory(
                repository,
                configurationCompiler,
                propertyResolver,
                null,
                resourceAsString("/scripts/DSLScriptBase.groovy")
            );
    }

    @Test
    public void itShouldUsePropertyResolverInSystemScript() throws Exception {
        final PublishedPipeline publishedPipeline = PublishedPipeline.builder()
                .pipelineCode(PIPELINE_NAME)
                .version(PIPELINE_VERSION)
                .scripts(Arrays.asList(
                        PublishedScript.builder()
                                .type(ScriptType.Post)
                                .version("1.0")
                                .body(MISSING_PROPERTY_SCRIPT_CODE)
                                .build(),
                        PublishedScript.builder()
                                .type(ScriptType.Base)
                                .version("1.0")
                                .body(resourceAsString("/scripts/DSLScriptBase.groovy"))
                                .build()
                ))
                .build();

        when(repository.findByCodeAndVersion(PIPELINE_NAME, PIPELINE_VERSION))
                .thenReturn(publishedPipeline);

        Pipeline pipeline = pipelineFactory.getPipeline(PIPELINE_NAME, PIPELINE_VERSION);
        PipelineResults result = pipeline.run(null);
        assertThat(result.asString()).isEqualTo("transformed input");
    }

    @Test(expected = RuntimeException.class)
    public void itShouldNotUsePropertyResolverInUserScript() throws Exception {
        final PublishedPipeline publishedPipeline = PublishedPipeline.builder()
                .pipelineCode(PIPELINE_NAME)
                .version(PIPELINE_VERSION)
                .scripts(Arrays.asList(
                        PublishedScript.builder()
                                .type(ScriptType.User)
                                .version("1.0")
                                .body(MISSING_PROPERTY_SCRIPT_CODE)
                                .build(),
                        PublishedScript.builder()
                                .type(ScriptType.Base)
                                .version("1.0")
                                .body(resourceAsString("/scripts/DSLScriptBase.groovy"))
                                .build()
                ))
                .build();

        Pipeline pipeline = pipelineFactory.getPipeline(PIPELINE_NAME, PIPELINE_VERSION);
        pipeline.run(null);
    }
}
