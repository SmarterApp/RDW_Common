package org.opentestsystem.rdw.script;

import groovy.lang.GroovyRuntimeException;
import org.apache.commons.io.IOUtils;
import org.codehaus.groovy.control.CompilationFailedException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.script.util.ExceptionConverter.convert;


@RunWith(MockitoJUnitRunner.class)
public class ScriptCompilerTest {
    @Mock
    private ScriptSource scriptSource;

    private ScriptCompiler compiler;

    private final ScriptPipelineConfiguration configuration = new ScriptPipelineConfiguration();

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void setup() throws Exception {
        final String base = IOUtils.toString(this.getClass().getResourceAsStream("/scripts/DSLScriptBase.groovy"), UTF_8);
        when(scriptSource.loadScriptBaseClass()).thenReturn(base);

        compiler = new ScriptCompiler(configuration.groovyClassLoader(scriptSource));
    }

    @Test
    public void itShouldCompileTheScript() {
        compiler.compile("return 1");
    }

    @Test
    public void itShouldCompileIntoRunnableCode() throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile("return 'Hello'");

        assertThat(scriptClass.getConstructor().newInstance().execute(), is("Hello"));
    }

    @Test
    public void testCompilerError() {
        exception.expect(CompilationFailedException.class);
        exception.expectMessage(containsString("expecting '''"));

        try {
            compiler.compile("def myFunction() {\n" +
                    "    return 'myFunc\n" +
                    "}\n" +
                    "def x = hello();\n" +
                    "def y = ;\n" +
                    "def z = ;\nreturn 'Unterminated string  ");
        } catch (CompilationFailedException e) {
//            System.out.println(e.getMessage());
            System.out.println(convert(e));
            throw e;
        }
    }

    @Test
    public void testRuntimeError() throws Exception {
        exception.expect(ScriptRuntimeException.class);

        final Class<? extends PipelineScript> scriptClass = compiler.compile("return 1 / 0", "1.groovy");
        scriptClass.getConstructor().newInstance().execute();
    }

    @Test
    public void testGroovyRuntimeException() throws Exception {
        exception.expect(ScriptRuntimeException.class);
        exception.expectCause(instanceOf(GroovyRuntimeException.class));

        Class<? extends PipelineScript> scriptClass = compiler.compile("return bogusMethod()");
        scriptClass.getConstructor().newInstance().execute();
    }

    @Test
    public void testValidDslEnabled() throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'xml'; outputXml");
        final String sampleXml = "<sample><field>1</field></sample>";
        scriptClass.newInstance().bindInput(sampleXml).execute();
    }

    @Test
    public void testInvalidDslEnable() throws Exception {
        exception.expect(RuntimeException.class);
        exception.expectMessage(containsString("bogus type"));

        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'bogus type'; return 'hello'");
        scriptClass.newInstance().execute();
    }

    @Test
    public void testLineNumberExtraction() throws Exception {
        exception.expect(RuntimeException.class);
        exception.expectMessage(containsString("line 5"));

        final String badScript =
                "def a = 1\n" +
                        "def b = 2\n" +
                        "def c = 3\n" +
                        "def d = 4\n" +
                        "bogusMethod()\n" +
                        "def e = a / 0\n" +
                        "return e";

        final Class<? extends PipelineScript> scriptClass = compiler.compile(badScript);
        scriptClass.newInstance().execute();
    }
}

