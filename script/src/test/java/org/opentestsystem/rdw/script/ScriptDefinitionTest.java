package org.opentestsystem.rdw.script;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.script.publishing.PublishedScript;
import org.opentestsystem.rdw.script.publishing.ScriptType;

import java.io.Reader;
import java.io.StringReader;
import java.util.Map;

import static java.util.Collections.singletonMap;
import static org.assertj.core.api.Assertions.assertThat;


public class ScriptDefinitionTest {

    private ScriptDefinition scriptDefinition;
    private Reader input;

    @Before
    public void setup() {
        final Map<String,Object> configuration = singletonMap("test", "value");
        scriptDefinition = ScriptDefinition.builder()
                .name("test")
                .version("1.0")
                .type(ResourceType.USER_NODE)
                .compiledScript(MockScript.class)
                .configuration(configuration)
                .source(
                        PublishedScript.builder()
                                .type(ScriptType.User)
                                .body("")
                        .build()
                )
                .build();

        input = new StringReader("Hello");
    }

    @After
    public void tearDown() throws Exception {
        input.close();
    }

    @Test
    public void itShouldBindInputToScript() throws Exception {
        final PipelineScript script = scriptDefinition.getInstance(input);
        assertThat(script.getProperty("input")).isEqualTo(input);
    }

    @Test
    public void itShouldBindConfigToScriptProperties() throws Exception {
        final PipelineScript script = scriptDefinition.getInstance(null);
        assertThat(script.getProperty("test")).isEqualTo("value");
    }

    @Test
    public void itShouldBindExtraPropertiesToScriptProperties() throws Exception {
        final PipelineScript script = scriptDefinition.getInstance(null,
                singletonMap("answer", 42));

        assertThat(script.getProperty("test")).isEqualTo("value");
        assertThat(script.getProperty("answer")).isEqualTo(42);
    }

    @Test
    public void equalsIsBasedOnlyOnTypeNameAndVersion() {
        final ScriptDefinition anotherDefinition = ScriptDefinition.builder()
                .name("test")
                .version("1.0")
                .type(ResourceType.USER_NODE)
                .compiledScript(MockScript.class)
                .configuration(singletonMap("not-test", "not-value"))
                .build();

        assertThat(scriptDefinition.equals(anotherDefinition)).isTrue();
    }


    static class MockScript extends PipelineScript {
        public MockScript() {
        }

        @Override
        public Object run() {
            return "Test Results";
        }
    }
}
