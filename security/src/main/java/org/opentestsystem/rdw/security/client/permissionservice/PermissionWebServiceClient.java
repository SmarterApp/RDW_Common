package org.opentestsystem.rdw.security.client.permissionservice;

import com.google.common.collect.ImmutableMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import javax.validation.constraints.NotNull;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * This class is used to integrate with the permission service and query system component, role and permission relationships
 */
public class PermissionWebServiceClient {
    private static final Logger logger = LoggerFactory.getLogger(PermissionWebServiceClient.class);

	/**
	 * Spring REST Template used to connect to the permission service REST API
	 */
	private RestTemplate restTemplate;

	/**
	 * Permission service REST API base URL
	 */
	private String endpoint;

	public PermissionWebServiceClient(@NotNull final RestTemplate restTemplate, @NotNull final String endpoint) {
		this.restTemplate = checkNotNull(restTemplate);
		this.endpoint = checkNotNull(endpoint);
	}

	/**
	 * Gets all components and the permissions associated with these components
	 *
	 * @return response containing all registered components
	 */
	public Response<Component> getComponents() {
		return get("/component", Component.class);
	}

	/**
	 * Gets the component and permissions associated with the given component name
	 *
	 * @param component Component name as registered in the permission management system
	 * @return response containing the matching component or a response with a failure status if no matching component is found
	 */
	public Response<Component> getComponent(final String component) {
		return get("/component?component={component}", Component.class, component);
	}

	/**
	 * Gets all roles and the components and permissions associated with the roles
	 *
	 * @return response containing all registered roles
	 */
	public Response<Role> getRoles() {
		return get("/role", Role.class);
	}

	/**
	 * Gets the role and the components and permissions associated with that role for the given component name
	 *
	 * @param component Component name as registered in the permission management system
	 * @return response containing the matching role or a response with a failure status if no matching component is found
	 */
	public Response<Role> getRole(final String component) {
		return get("/role?component={component}", Role.class, component);
	}

	/**
	 * Gets all permissions
	 *
	 * @return response containing all registered permissions
	 */
	public Response<Permission> getPermissions() {
	    return get("/permission", Permission.class);
	}


	private <T> Response<T> get(String path, Class<T> type) {
        return get(path, type, ImmutableMap.of());
    }

    private <T> Response<T> get(String path, Class<T> type, String component) {
	    return get(path, type, ImmutableMap.of("component", component));
    }

    private <T> Response<T> get(String path, Class<T> type, Map<String, ?> parameters) {
        try {
            return restTemplate.exchange(endpoint + path, HttpMethod.GET, null,
                    new ParameterizedTypeReference<Response<T>>() {}, parameters).getBody();
        } catch (final RestClientException e) {
            logger.warn("Error getting {} from {}{}", type.getName(), endpoint + path, parameters.isEmpty() ? "" : (" component=" + parameters.get("component")));
            return null;
        }
    }
}
