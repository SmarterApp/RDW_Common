package org.opentestsystem.rdw.security.service;


import org.opentestsystem.rdw.security.client.permissionservice.Component;
import org.opentestsystem.rdw.security.client.permissionservice.Permission;
import org.opentestsystem.rdw.security.client.permissionservice.PermissionWebServiceClient;
import org.opentestsystem.rdw.security.client.permissionservice.Response;
import org.opentestsystem.rdw.security.client.permissionservice.Role;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.collect.Sets.newHashSet;

/**
 * This permission service implementation integrates with the https://github.com/SmarterApp/SS_Permissions
 * project and accesses information for one registered component.
 */
public class ComponentPermissionService implements PermissionService {

	/**
	 * Used to integrate with the permission service
	 */
	private PermissionWebServiceClient client;

	/**
	 * The component for which permission information will be looked up
	 */
	private String component;

	public ComponentPermissionService(@NotNull final PermissionWebServiceClient client, @NotNull final String component) {
		this.client = checkNotNull(client);
		this.component = checkNotNull(component);
	}

	/**
	 * {@inheritDoc}
	 */
	public Map<String, Collection<String>> getPermissionsByRole() throws PermissionServiceException {

		final Response<Role> response = client.getRole(component);

		if (response.getStatus() == null || !response.getStatus().equals(Response.Status.SUCCESS)) {
			throw new PermissionServiceException(String.format(
				"Error getting roles and permissions for component \"%s\". Server responded with message: \"%s\"",
				component, response.getMessage()));
		}

		final Map<String, Collection<String>> permissionsByRole = newHashMap();
		for (Role role : response.getValue()) {
			final Collection<String> permissions = newHashSet();
			for (Component mapping : role.getMappings()) {
				for (Permission permission : mapping.getPermissions()) {
					permissions.add(permission.getName());
				}
			}
			permissionsByRole.put(role.getRole(), permissions);
		}
		return permissionsByRole;
	}

}
