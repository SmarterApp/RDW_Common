package org.opentestsystem.rdw.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

public class PermissionScopeTest {

    @Test
    public void empty() {
        assertThat(PermissionScope.EMPTY.isStatewide()).isFalse();
        assertThat(PermissionScope.EMPTY.getDistrictGroupIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getDistrictIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getInstitutionGroupIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getInstitutionIds()).isEmpty();
    }

    @Test
    public void statewide() {
        assertThat(PermissionScope.STATEWIDE.isStatewide()).isTrue();
        assertThat(PermissionScope.STATEWIDE.getDistrictGroupIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getDistrictIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getInstitutionGroupIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getInstitutionIds()).isEmpty();
    }

    @Test
    public void ctorAllowsNulls() {
        final PermissionScope permissionScope = PermissionScope.builder().build();
        assertThat(permissionScope.isStatewide()).isFalse();
        assertThat(permissionScope.getDistrictGroupIds()).isEmpty();
        assertThat(permissionScope.getDistrictIds()).isEmpty();
        assertThat(permissionScope.getInstitutionGroupIds()).isEmpty();
        assertThat(permissionScope.getInstitutionIds()).isEmpty();
    }

    @Test
    public void itShouldSerialize() throws IOException {
        final ObjectMapper mapper = new ObjectMapper();

        final PermissionScope src = PermissionScope.builder().addSchoolId(123L).build();
        final String value = mapper.writeValueAsString(src);

        final PermissionScope unwrapped = mapper.readValue(value, PermissionScope.class);
        assertThat(unwrapped.getInstitutionIds()).containsExactly(123L);
        assertThat(unwrapped.isStatewide()).isFalse();
    }

    @Test
    public void itShouldSetDistrictGroupIds() {
        final PermissionScope src = PermissionScope.builder()
                .addDistrictGroupId(1)
                .addDistrictGroupIds(newArrayList(2L, 3L))
                .build();
        assertThat(src.getDistrictGroupIds()).containsExactly(1L, 2L, 3L);
    }

    @Test
    public void itShouldSetDistrictIds() {
        final PermissionScope src = PermissionScope.builder()
                .addDistrictId(1)
                .addDistrictIds(newArrayList(2L, 3L))
                .build();
        assertThat(src.getDistrictIds()).containsExactly(1L, 2L, 3L);
    }

    @Test
    public void itShouldSetSchooltGroupIds() {
        final PermissionScope src = PermissionScope.builder()
                .addSchoolGroupId(1)
                .addSchoolGroupIds(newArrayList(2L, 3L))
                .build();
        assertThat(src.getInstitutionGroupIds()).containsExactly(1L, 2L, 3L);
    }

    @Test
    public void itShouldSetSchoolIds() {
        final PermissionScope src = PermissionScope.builder()
                .addSchoolId(1)
                .addSchoolIds(newArrayList(2L, 3L))
                .build();
        assertThat(src.getInstitutionIds()).containsExactly(1L, 2L, 3L);
    }

    @Test
    public void itShouldCopy() throws IOException {
        final PermissionScope src = PermissionScope.builder()
                .addDistrictGroupId(1)
                .addDistrictId(2)
                .addSchoolGroupId(3)
                .addSchoolIds(newArrayList(4L, 5L))
                .build();
        final PermissionScope copy = src.copy()
                .addDistrictId(10)
                .build();
        assertThat(copy.getDistrictGroupIds()).containsExactly(1L);
        assertThat(copy.getDistrictIds()).containsExactly(2L, 10L);
        assertThat(copy.getInstitutionGroupIds()).containsExactly(3L);
        assertThat(copy.getInstitutionIds()).containsExactly(4L, 5L);
    }

    @Test
    public void itShouldSetIdsEvenWhenStatewideIsTrue() {
        final PermissionScope scope = PermissionScope.builder()
                .statewide(true)
                .addDistrictIds(newArrayList(1L, 2L))
                .build();
        assertThat(scope.isStatewide()).isTrue();
        assertThat(scope.getDistrictIds()).containsExactly(1L, 2L);
    }

    @Test
    public void validMeansSomethingIsSet() {
        assertThat(PermissionScope.builder().isValid()).isFalse();
        assertThat(PermissionScope.builder().statewide(true).isValid()).isTrue();
        assertThat(PermissionScope.builder().addDistrictGroupId(1).isValid()).isTrue();
        assertThat(PermissionScope.builder().addDistrictId(1).isValid()).isTrue();
        assertThat(PermissionScope.builder().addSchoolGroupId(1).isValid()).isTrue();
        assertThat(PermissionScope.builder().addSchoolId(1).isValid()).isTrue();
    }
}
