package org.opentestsystem.rdw.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

public class PermissionScopeTest {

    @Test
    public void empty() {
        assertThat(PermissionScope.EMPTY.isStatewide()).isFalse();
        assertThat(PermissionScope.EMPTY.getDistrictGroupIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getDistrictIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getInstitutionGroupIds()).isEmpty();
        assertThat(PermissionScope.EMPTY.getInstitutionIds()).isEmpty();
    }

    @Test
    public void statewide() {
        assertThat(PermissionScope.STATEWIDE.isStatewide()).isTrue();
        assertThat(PermissionScope.STATEWIDE.getDistrictGroupIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getDistrictIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getInstitutionGroupIds()).isEmpty();
        assertThat(PermissionScope.STATEWIDE.getInstitutionIds()).isEmpty();
    }

    @Test
    public void ctorAllowsNulls() {
        final PermissionScope permissionScope = new PermissionScope(null, null, null, null);
        assertThat(permissionScope.isStatewide()).isFalse();
        assertThat(permissionScope.getDistrictGroupIds()).isEmpty();
        assertThat(permissionScope.getDistrictIds()).isEmpty();
        assertThat(permissionScope.getInstitutionGroupIds()).isEmpty();
        assertThat(permissionScope.getInstitutionIds()).isEmpty();
    }

    @Test
    public void itShouldSerialize() throws IOException {
        final ObjectMapper mapper = new ObjectMapper();

        final PermissionScope src = new PermissionScope(null, null, null, newArrayList(123L));
        final String value = mapper.writeValueAsString(src);

        final PermissionScope unwrapped = mapper.readValue(value, PermissionScope.class);
        assertThat(unwrapped.getInstitutionIds()).containsExactly(123L);
        assertThat(unwrapped.isStatewide()).isFalse();
    }
}
