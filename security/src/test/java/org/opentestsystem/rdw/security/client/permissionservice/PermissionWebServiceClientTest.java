package org.opentestsystem.rdw.security.client.permissionservice;

import org.junit.Before;
import org.junit.Test;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.startsWith;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class PermissionWebServiceClientTest {

    private RestTemplate restTemplate;
    private final String endpoint = "http://perm-service";
    private PermissionWebServiceClient client;

    @Before
    public void createClient() {
        restTemplate = mock(RestTemplate.class);

        client = new PermissionWebServiceClient(restTemplate, endpoint);
    }

    @Test
    public void itShouldGetComponents() {
        final Component component = new Component("Reporting", null);
        when(restTemplate.exchange(startsWith(endpoint+"/component"), eq(HttpMethod.GET), eq(null), any(ParameterizedTypeReference.class), any(Map.class)))
                .thenReturn(new ResponseEntity<>(new Response<>("status", "message", newArrayList(component)), HttpStatus.OK));
        assertThat(client.getComponents().getValue().get(0)).isEqualTo(component);
    }

    @Test
    public void itShouldGetPermissions() {
        final Permission permission = new Permission("READ");
        when(restTemplate.exchange(startsWith(endpoint+"/permission"), eq(HttpMethod.GET), eq(null), any(ParameterizedTypeReference.class), any(Map.class)))
                .thenReturn(new ResponseEntity<>(new Response<>("status", "message", newArrayList(permission)), HttpStatus.OK));
        assertThat(client.getPermissions().getValue().get(0)).isEqualTo(permission);
    }

    @Test
    public void itShouldGetRole() {
        final Role role = new Role("ROLE", null, null);
        when(restTemplate.exchange(startsWith(endpoint+"/role"), eq(HttpMethod.GET), eq(null), any(ParameterizedTypeReference.class), any(Map.class)))
                .thenReturn(new ResponseEntity<>(new Response<>("status", "message", newArrayList(role)), HttpStatus.OK));
        assertThat(client.getRole("Reporting").getValue().get(0)).isEqualTo(role);
    }

    @Test
    public void itShouldCatchRestClientException() {
        when(restTemplate.exchange(startsWith(endpoint+"/role"), eq(HttpMethod.GET), eq(null), any(ParameterizedTypeReference.class), any(Map.class)))
                .thenThrow(RestClientException.class);
        assertThat(client.getRole("Reporting")).isNull();
    }
}