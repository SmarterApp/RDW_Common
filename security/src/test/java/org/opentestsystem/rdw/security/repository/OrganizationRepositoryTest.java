package org.opentestsystem.rdw.security.repository;

import org.junit.Before;
import org.junit.Test;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

public class OrganizationRepositoryTest {

    private OrganizationRepository repository;
    private NamedParameterJdbcTemplate jdbcTemplate;

    @Before
    public void createRepository() {
        jdbcTemplate = mock(NamedParameterJdbcTemplate.class);
        repository = new JdbcOrganizationRepository(jdbcTemplate);
    }

    @Test
    public void itShouldNoOpForEmptyIdList() {
        repository.findAllDistrictIds(null);
        repository.findAllSchoolIds(newArrayList());
        verifyZeroInteractions(jdbcTemplate);
    }

    @Test
    public void itShouldRetrieveIds() throws SQLException {
        final ResultSet rs = mock(ResultSet.class);
        when(rs.getString("natural_id")).thenReturn("8723981");
        when(rs.getLong("id")).thenReturn(123L);

        doAnswer(invocation -> {
            final RowCallbackHandler rowHandler = invocation.getArgument(2);
            rowHandler.processRow(rs);
            return null;
        }).when(jdbcTemplate).query(any(), any(SqlParameterSource.class), any(RowCallbackHandler.class));

        assertThat(repository.findAllSchoolIds(newArrayList("8723981")).get("8723981")).isEqualTo(123L);
    }
}
