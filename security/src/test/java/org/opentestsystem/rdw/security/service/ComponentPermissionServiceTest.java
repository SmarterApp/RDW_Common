package org.opentestsystem.rdw.security.service;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.security.client.permissionservice.Component;
import org.opentestsystem.rdw.security.client.permissionservice.Permission;
import org.opentestsystem.rdw.security.client.permissionservice.PermissionWebServiceClient;
import org.opentestsystem.rdw.security.client.permissionservice.Response;
import org.opentestsystem.rdw.security.client.permissionservice.Role;

import java.util.Collection;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ComponentPermissionServiceTest {

	private PermissionWebServiceClient mockClient;
	private String component = "test-component";
	private ComponentPermissionService service;

	@Before
	public void before() {
		mockClient = mock(PermissionWebServiceClient.class);
		service = new ComponentPermissionService(mockClient, component);
	}

	@Test(expected = NullPointerException.class)
	public void constructor_should_throw_exception_for_null_parameters() throws Exception {
		new ComponentPermissionService(null, null);
	}

	@Test(expected = NullPointerException.class)
	public void constructor_should_throw_exception_for_null_component() throws Exception {
		new ComponentPermissionService(mockClient, null);
	}

	@Test(expected = NullPointerException.class)
	public void constructor_should_throw_exception_for_null_client() throws Exception {
		new ComponentPermissionService(null, "");
	}

	@Test(expected = PermissionServiceException.class)
	public void getPermissionsByRole_client_request_failure_should_result_in_exception() throws Exception {
		when(mockClient.getRole(component)).thenReturn(new Response<>("message", Response.Status.FAILURE, null));
		service.getPermissionsByRole();
	}

	@Test
	public void getPermissionsByRole_should_return_all_role_to_permission_mappings() throws Exception {
		when(mockClient.getRole(component)).thenReturn(
			new Response<>(null, Response.Status.SUCCESS, newArrayList(
				new Role("role1", newArrayList(
					new Component(component, newArrayList(
						new Permission("permission1")
					))
				), newArrayList()),
				new Role("role2", newArrayList(
					new Component(component, newArrayList(
						new Permission("permission2"),
						new Permission("permission3")
					))
				), newArrayList())
			)));
		final Map<String, Collection<String>> actual = service.getPermissionsByRole();
		final Map<String, Collection<String>> expected = ImmutableMap.of(
			"role1", ImmutableSet.of("permission1"),
			"role2", ImmutableSet.of("permission2", "permission3")
		);
		assertThat("response should contain all roles and permissions", actual, equalTo(expected));
	}

}