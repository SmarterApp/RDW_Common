package org.opentestsystem.rdw.security.support;

import org.junit.Test;
import org.opentestsystem.rdw.security.Grant;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class TenancyChainsTest {

	@Test(expected = NullPointerException.class)
	public void fromStringShouldThrowExceptionWhenStringIsNull() throws Exception {
		TenancyChains.from(null);
	}

	@Test(expected = IllegalArgumentException.class)
	public void fromStringShouldThrowExceptionWhenStringHasTooLittleDelimiters() throws Exception {
		TenancyChains.from("||||||||||||||||");
	}

	@Test(expected = IllegalArgumentException.class)
	public void fromStringShouldThrowExceptionWhenStringHasTooManyDelimiters() throws Exception {
		TenancyChains.from("||||||||||||||||||");
	}

	@Test
	public void fromStringShouldCorrectlyPassAllFields() throws Exception {
		final Grant grant = TenancyChains.from("|a|b|STATE|d|e|||a|i|||l|m|n|o|p|q");
		assertThat(grant.getEntityId(), is("a"));
		assertThat(grant.getRole(), is("b"));
		assertThat(grant.getEntityLevel(), is(Grant.EntityLevel.STATE));
		assertThat(grant.getClientId(), is("d"));
		assertThat(grant.getClientName(), is("e"));
		assertThat(grant.getStateGroupId(), is((String) null));
		assertThat(grant.getStateGroupName(), is((String) null));
		assertThat(grant.getStateId(), is("a"));
		assertThat(grant.getStateName(), is("i"));
		assertThat(grant.getDistrictGroupId(), is((String) null));
		assertThat(grant.getDistrictGroupName(), is((String) null));
		assertThat(grant.getDistrictId(), is("l"));
		assertThat(grant.getDistrictName(), is("m"));
		assertThat(grant.getInstitutionGroupId(), is("n"));
		assertThat(grant.getInstitutionGroupName(), is("o"));
		assertThat(grant.getInstitutionId(), is("p"));
		assertThat(grant.getInstitutionName(), is("q"));
	}

	@Test
	public void containsShouldReturnFalseForGrantsWithDifferentRoles() {
		final Grant a = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.CLIENT).clientId("a").build();
		final Grant b = Grant.builder().entityId("a").role("b").entityLevel(Grant.EntityLevel.CLIENT).clientId("a").build();
		assertThat("grants with different roles cannot contain one another", TenancyChains.contains(a, b), is(false));
	}

	@Test
	public void containsShouldReturnTrueForEqualGrants() {
		final Grant a = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.CLIENT).clientId("a").build();
		final Grant b = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.CLIENT).clientId("a").build();
		assertThat("equal grants should count as contained because they are redundant", TenancyChains.contains(a, b), is(true));
	}

	@Test
	public void containsShouldReturnTrueWhenAGrantOfLesserGranularityHasAnEntityWhichContainsAQualifierInTheOtherGrant() {
		final Grant a = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.STATE).stateId("a").build();
		final Grant b = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.DISTRICT).stateId("a").districtId("a").build();
		assertThat("a grant with lesser granularity and a matching entity qualifier should count as containing the other grant", TenancyChains.contains(a, b), is(true));
	}

	@Test
	public void containsShouldReturnFalseIfGrantsDontHaveAnyMatchingQualifiers() {
		final Grant a = Grant.builder().entityId("a").role("a").entityLevel(Grant.EntityLevel.STATE).stateId("a").build();
		final Grant b = Grant.builder().entityId("b").role("a").entityLevel(Grant.EntityLevel.DISTRICT).stateId("b").districtId("b").build();
		assertThat("grants without matching qualifiers should not count as containing one another", TenancyChains.contains(a, b), is(false));
	}

}
