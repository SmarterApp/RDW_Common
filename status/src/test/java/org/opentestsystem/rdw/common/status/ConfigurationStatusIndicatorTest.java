package org.opentestsystem.rdw.common.status;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.boot.actuate.endpoint.EnvironmentEndpoint;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ConfigurationStatusIndicatorTest {

    private ConfigurationStatusIndicator statusIndicator;
    private ConfigurationPropertiesReportEndpoint configurationEndPoint;
    private EnvironmentEndpoint environmentEndpoint;

    @Before
    public void createStatusIndicator() {
        configurationEndPoint = mock(ConfigurationPropertiesReportEndpoint.class);
        when(configurationEndPoint.invoke()).thenReturn(ImmutableMap.of("configClientProperties", "config"));

        environmentEndpoint = mock(EnvironmentEndpoint.class);
        when(environmentEndpoint.invoke()).thenReturn(ImmutableMap.of("profiles", "test"));

        statusIndicator = new ConfigurationStatusIndicator(configurationEndPoint, environmentEndpoint);
    }

    @Test
    public void itShouldReturnItsName() {
        assertThat(statusIndicator.name()).isEqualTo("configuration");
    }

    @Test
    public void itShouldBeConfigurationLevel() {
        assertThat(statusIndicator.doLevelCheck(1)).isFalse();
        assertThat(statusIndicator.doLevelCheck(2)).isTrue();
    }

    @Test
    public void itShouldUseEndpointsToGetDetails() {
        final Status status = statusIndicator.status(2);

        assertThat(status.getStatusRating()).isEqualTo(4);
        assertThat(((Map<String, Object>)status.getDetails().get("environmentSettings")).get("profiles")).isEqualTo("test");
        assertThat(status.getDetails().get("configClientProperties")).isEqualTo("config");
    }
}
