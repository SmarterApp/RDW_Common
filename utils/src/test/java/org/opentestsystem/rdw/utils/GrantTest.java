package org.opentestsystem.rdw.utils;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class GrantTest {

    @Test
    public void itShouldParseSimpleGrant() {
        final String value = "|SBAC|ASMTDATALOAD|CLIENT|SBAC||||CA||||||||||";
        final Grant grant = Grant.fromString(value);
        assertThat(grant.toString()).isEqualTo(value);
        assertThat(grant.getEntityId()).isEqualTo("SBAC");
        assertThat(grant.getRole()).isEqualTo("ASMTDATALOAD");
        assertThat(grant.getLevel()).isEqualTo(Grant.Level.CLIENT);
        assertThat(grant.getClientId()).isEqualTo("SBAC");
        assertThat(grant.getStateId()).isEqualTo("CA");
    }

    @Test
    public void equalAndSimilarAreNotTheSame() {
        final Grant g1 = Grant.fromString("|CA|ASMTDATALOAD|STATE|SBAC||||CA||||||||||");
        final Grant g2 = Grant.fromString("|CA|ASMTDATALOAD|STATE|SBAC||||CA|California|||||||||");
        final Grant g3 = Grant.fromString("|CA|ASMTDATALOAD|STATE|||||CA||||||||||");
        final Grant g4 = Grant.fromString("|CA|ASMTDATALOAD|STATE|SBAC||||CA||||||||||");

        assertThat(g1.equals(g2)).isFalse();
        assertThat(g1.equals(g3)).isFalse();
        assertThat(g1.equals(g4)).isTrue();

        assertThat(g1.similar(g2)).isTrue();
        assertThat(g1.similar(g3)).isTrue();
        assertThat(g1.similar(g4)).isTrue();
    }

    @Test
    public void impliesMatchesRoleAndEntity() {
        assertThat(Grant.fromString("|SBAC|GENERAL|CLIENT|SBAC||")
                .contains(Grant.fromString("|SBAC|GENERAL|CLIENT|SBAC||"))).isTrue();
    }

    @Test
    public void impliesRequiresSameRole() {
        assertThat(Grant.fromString("|SBAC|GENERAL|CLIENT|SBAC||")
                .contains(Grant.fromString("|SBAC|ASMTDATALOAD|CLIENT|SBAC||"))).isFalse();
    }

    @Test
    public void impliesMatchesLowerLevel() {
        assertThat(Grant.fromString("|CA|GENERAL|STATE|SBAC||||CA||||")
          .contains(Grant.fromString("|D1|GENERAL|DISTRICT|SBAC||||CA||||D1||"))).isTrue();
    }

    @Test
    public void impliesRequiresLowerLevel() {
        assertThat(Grant.fromString("|D1|GENERAL|DISTRICT|SBAC||||CA||||D1||")
          .contains(Grant.fromString("|CA|GENERAL|STATE|SBAC||||CA||||"))).isFalse();
    }

    @Test
    public void impliesSkipsUnsetValues() {
        assertThat(Grant.fromString("|D1|GENERAL|DISTRICT|||||||||D1||||||")
          .contains(Grant.fromString("|D1S1|GENERAL|INSTITUTION|||||||||D1||||D1S1||"))).isTrue();
    }

    @Test
    public void impliesAssumesUniqueIds() {
        // note that the algorithm assumes ids are unique across hierarchy
        assertThat(Grant.fromString("|D1|GENERAL|DISTRICT|||||CA||||D1||||||")
          .contains(Grant.fromString("|D1|GENERAL|DISTRICT|||||AP||||D1||||||"))).isTrue();
    }

    @Test
    public void impliesTest() {
        final Grant g1 = Grant.fromString("|CA|GENERAL|STATE|SBAC||||CA||||||||||");
        final Grant g2 = Grant.fromString("|D1|GENERAL|DISTRICT|SBAC||||CA||||D1||||||");
        final Grant g3 = Grant.fromString("|D2|GENERAL|DISTRICT|SBAC||||CA||||D2||||||");
        final Grant g4 = Grant.fromString("|D2|ASMTDATALOAD|DISTRICT|SBAC||||CA||||D2||||||");
        final Grant g5 = Grant.fromString("|D1G1|GENERAL|INSTITUTION_GROUP|SBAC||||CA||||D1||D1G1||||");
        final Grant g6 = Grant.fromString("|D1S1|GENERAL|INSTITUTION|SBAC||||CA||||D1||||D1S1||");

        assertThat(g1.contains(g2)).isTrue();
        assertThat(g1.contains(g3)).isTrue();
        assertThat(g1.contains(g5)).isTrue();
        assertThat(g1.contains(g6)).isTrue();
        assertThat(g2.contains(g5)).isTrue();
        assertThat(g2.contains(g6)).isTrue();

        assertThat(g1.contains(g4)).isFalse();  // mismatch role
        assertThat(g2.contains(g3)).isFalse();  // mismatch entity
        assertThat(g3.contains(g5)).isFalse();  // mismatch district
        assertThat(g3.contains(g6)).isFalse();  // mismatch district
        assertThat(g5.contains(g6)).isFalse();  // mismatch school group
    }
}
