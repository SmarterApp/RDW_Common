package org.opentestsystem.rdw.utils;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class TenancyChainTest {

    @Test
    public void itShouldSupportAnEmptyChain() {
        final String value = "";
        final TenancyChain chain = TenancyChain.fromString(value);
        assertThat(chain.isEmpty()).isTrue();
        assertThat(chain.toString()).isEqualTo(value);
    }

    @Test
    public void itShouldSupportASimpleClientGrant() {
        final String value = "|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||";
        final TenancyChain chain = TenancyChain.fromString(value);
        assertThat(chain.toString()).isEqualTo(value);
        assertThat(chain.hasRole("ASMTDATALOAD")).isTrue();
        assertThat(chain.hasRoleForClient("ASMTDATALOAD", "SBAC")).isTrue();
        assertThat(chain.hasRoleForClient("SAREXTRACTS", "SBAC")).isFalse();
        assertThat(chain.hasRoleForClient("ASMTDATALOAD", "FUBAR")).isFalse();
    }

    @Test
    public void itShouldSupportMultipleRolesStateGrant() {
        final String value = "|CA|SAREXTRACTS|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|AUDITXML|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|SRCEXTRACTS|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|GENERAL|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|ASMTDATALOAD|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|SRSEXTRACTS|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|PII|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|ALLSTATES|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|CA|IIRDEXTRACTS|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||";
        final TenancyChain chain = TenancyChain.fromString(value);
        assertThat(chain.toString()).isEqualTo(value);

        assertThat(chain.hasRoleForState("SAREXTRACTS", "CA")).isTrue();
        assertThat(chain.hasRoleForState("AUDITXML", "CALIFORNIA")).isTrue();
        assertThat(chain.hasRoleForState("GENERAL", "CA")).isTrue();
        assertThat(chain.hasRoleForState("ASMTDATALOAD", "CA")).isTrue();

        assertThat(chain.hasRoleForState("ASMTDATALOAD", "NV")).isFalse();

        assertThat(chain.hasRole("ASMTDATALOAD")).isTrue();
    }

    @Test
    public void itShouldSupportMultipeRolesMultipleLevels() {
        final String value = "|CA|Administrator|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||,|DS9002|Test Administrator|INSTITUTION|98765|CA98765|||CA|CALIFORNIA|||DISTRICT2|District 2 - San Diego|||DS9002|San Diego Institution|,|DISTRICT2|Administrator|DISTRICT|98765|CA98765|||CA|CALIFORNIA|||DISTRICT2|District 2 - San Diego|||||";
        final TenancyChain chain = TenancyChain.fromString(value);
        assertThat(chain.toString()).isEqualTo(value);

        assertThat(chain.hasRoleForState("Administrator", "CA")).isTrue();
        assertThat(chain.hasRoleForDistrict("Administrator", "DISTRICT2")).isTrue();
        assertThat(chain.hasRole("Administrator", "CA", "DISTRICT9", "SCHOOL6")).isTrue();

        assertThat(chain.hasRoleForState("Test Administrator", "CA")).isFalse();
        assertThat(chain.hasRoleForDistrict("Test Administrator", "DISTRICT2")).isFalse();
        assertThat(chain.hasRoleForSchool("Test Administrator", "DS9002")).isTrue();
        assertThat(chain.hasRole("Test Administrator", "CA", "DISTRICT2", null)).isFalse();
        assertThat(chain.hasRole("Test Administrator", "CA", "DISTRICT2", "DS9002")).isTrue();
        assertThat(chain.hasRole("Administrator", "CA", "DISTRICT2", "DS9002")).isTrue();
    }

    @Test
    public void bugCheck() {
        final String value = "|AP|ASMTDATALOAD|STATE|SBAC||||AP|ARMED FORCES PACIFIC|||||||||,|CA|ASMTDATALOAD|STATE||SBAC|||CA|CALIFORNIA|||||||||";
        final TenancyChain chain = TenancyChain.fromString(value);

        assertThat(chain.hasRole("ASMTDATALOAD", "AP", "UCLALS", "APTEST1")).isTrue();
    }


    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfTooShort() {
        TenancyChain.fromString("||PII|");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfTooShortForStateLevel() {
        TenancyChain.fromString("||GENERAL|STATE||SBAC|");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfTooShortForDistrictLevel() {
        TenancyChain.fromString("||GENERAL|DISTRICT|||||CA||");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfTooShortForInstitutionLevel() {
        TenancyChain.fromString("||GENERAL|INSTITUTION|||||CA||DS9001||");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfEntityIdDoesNotMatchClient() {
        TenancyChain.fromString("|CL|GENERAL|CLIENT|SBAC||||CA||||");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfEntityIdDoesNotMatchState() {
        TenancyChain.fromString("|AP|GENERAL|STATE|SBAC||||CA||||");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfEntityIdDoesNotMatchDistrict() {
        TenancyChain.fromString("|DS001|GENERAL|DISTRICT|SBAC||||CA||||DS||");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRejectIfEntityIdDoesNotMatchSchool() {
        TenancyChain.fromString("|S2|GENERAL|INSTITUTION|SBAC||||CA||||DS||||S1||");
    }
}
