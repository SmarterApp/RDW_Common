package org.opentestsystem.rdw.webclient.permissionservice;

import com.google.common.collect.ImmutableMap;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestTemplate;

import javax.validation.constraints.NotNull;
import java.util.Map;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * This class is used to integrate with the permission service and query system component, role and permission relationships
 */
public class PermissionWebServiceClient {

	/**
	 * Spring REST Template used to connect to the permission service REST API
	 */
	private RestTemplate restTemplate;

	/**
	 * Permission service REST API base URL
	 */
	private String endpoint;

	public PermissionWebServiceClient(@NotNull final RestTemplate restTemplate, @NotNull final String endpoint) {
		this.restTemplate = checkNotNull(restTemplate);
		this.endpoint = checkNotNull(endpoint);
	}

	/**
	 * Gets all components and the permissions associated with these components
	 *
	 * @return response containing all registered components
	 */
	public Response<Component> getComponents() {
		return get(endpoint + "/component", new ParameterizedTypeReference<Response<Component>>() {});
	}

	/**
	 * Gets the component and permissions associated with the given component name
	 *
	 * @param component Component name as registered in the permission management system
	 * @return response containing the matching component or a response with a failure status if no matching component is found
	 */
	public Response<Component> getComponent(final String component) {
		return get(endpoint + "/component?component={component}",
			new ParameterizedTypeReference<Response<Component>>() {},
			ImmutableMap.of("component", component));
	}

	/**
	 * Gets all roles and the components and permissions associated with the roles
	 *
	 * @return response containing all registered roles
	 */
	public Response<Role> getRoles() {
		return get(endpoint + "/role", new ParameterizedTypeReference<Response<Role>>() {});
	}

	/**
	 * Gets the role and the components and permissions associated with that role for the given component name
	 *
	 * @param component Component name as registered in the permission management system
	 * @return response containing the matching role or a response with a failure status if no matching component is found
	 */
	public Response<Role> getRole(final String component) {
		return get(endpoint + "/role?component={component}",
			new ParameterizedTypeReference<Response<Role>>() {},
			ImmutableMap.of("component", component));
	}

	/**
	 * Gets all permissions
	 *
	 * @return response containing all registered permissions
	 */
	public Response<Permission> getPermissions() {
		return get(endpoint + "/permission", new ParameterizedTypeReference<Response<Permission>>() {});
	}

	private <T> T get(String url, ParameterizedTypeReference<T> typeReference) {
		return get(url, typeReference, ImmutableMap.of());
	}

	private <T> T get(String url, ParameterizedTypeReference<T> typeReference, Map<String, ?> parameters) {
		return restTemplate.exchange(url, HttpMethod.GET, null, typeReference, parameters).getBody();
	}

}
